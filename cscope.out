cscope 15 $HOME/workspace/os/xv6               0000298391
	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

16 
	#STA_X
 0x8

17 
	#STA_E
 0x4

18 
	#STA_C
 0x4

19 
	#STA_W
 0x2

20 
	#STA_R
 0x2

21 
	#STA_A
 0x1

	@bio.c

23 
	~"ty≥s.h
"

24 
	~"defs.h
"

25 
	~"∑øm.h
"

26 
	~"•ölock.h
"

27 
	~"buf.h
"

30 
•ölock
 
	mlock
;

31 
buf
 
	mbuf
[
NBUF
];

35 
buf
 
	mhód
;

36 } 
	gbˇche
;

39 
	$böô
()

41 
buf
 *
b
;

43 
	`öôlock
(&
bˇche
.
lock
, "bcache");

47 
bˇche
.
hód
.
¥ev
 = &bcache.head;

48 
bˇche
.
hód
.
√xt
 = &bcache.head;

49 
b
 = 
bˇche
.
buf
; b < bˇche.buf+
NBUF
; b++){

50 
b
->
√xt
 = 
bˇche
.
hód
.next;

51 
b
->
¥ev
 = &
bˇche
.
hód
;

52 
b
->
dev
 = -1;

53 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

54 
bˇche
.
hód
.
√xt
 = 
b
;

56 
	}
}

61 
buf
*

62 
	$bgë
(
uöt
 
dev
, uöà
£˘‹
)

64 
buf
 *
b
;

66 
	`acquúe
(&
bˇche
.
lock
);

68 
lo›
:

70 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next){

71 if(
b
->
dev
 =dev && b->
£˘‹
 == sector){

72 if(!(
b
->
Êags
 & 
B_BUSY
)){

73 
b
->
Êags
 |
B_BUSY
;

74 
	`ªÀa£
(&
bˇche
.
lock
);

75  
b
;

77 
	`¶ìp
(
b
, &
bˇche
.
lock
);

78 
lo›
;

83 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev){

84 if((
b
->
Êags
 & 
B_BUSY
Ë=0 && (b->Êag†& 
B_DIRTY
) == 0){

85 
b
->
dev
 = dev;

86 
b
->
£˘‹
 = sector;

87 
b
->
Êags
 = 
B_BUSY
;

88 
	`ªÀa£
(&
bˇche
.
lock
);

89  
b
;

92 
	`∑nic
("bget:Ço buffers");

93 
	}
}

96 
buf
*

97 
	$bªad
(
uöt
 
dev
, uöà
£˘‹
)

99 
buf
 *
b
;

101 
b
 = 
	`bgë
(
dev
, 
£˘‹
);

102 if(!(
b
->
Êags
 & 
B_VALID
))

103 
	`idîw
(
b
);

104  
b
;

105 
	}
}

109 
	$bwrôe
(
buf
 *
b
)

111 if((
b
->
Êags
 & 
B_BUSY
) == 0)

112 
	`∑nic
("bwrite");

113 
b
->
Êags
 |
B_DIRTY
;

114 
	`idîw
(
b
);

115 
	}
}

120 
	$bªl£
(
buf
 *
b
)

122 if((
b
->
Êags
 & 
B_BUSY
) == 0)

123 
	`∑nic
("brelse");

125 
	`acquúe
(&
bˇche
.
lock
);

127 
b
->
√xt
->
¥ev
 = b->prev;

128 
b
->
¥ev
->
√xt
 = b->next;

129 
b
->
√xt
 = 
bˇche
.
hód
.next;

130 
b
->
¥ev
 = &
bˇche
.
hód
;

131 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

132 
bˇche
.
hód
.
√xt
 = 
b
;

134 
b
->
Êags
 &~
B_BUSY
;

135 
	`wakeup
(
b
);

137 
	`ªÀa£
(&
bˇche
.
lock
);

138 
	}
}

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

11 
	~"memœyout.h
"

13 
	#SECTSIZE
 512

	)

15 
ªad£g
(
uch¨
*, 
uöt
, uint);

18 
	$boŸmaö
()

20 
ñfhdr
 *
ñf
;

21 
¥oghdr
 *
ph
, *
ïh
;

22 (*
íåy
)();

23 
uch¨
* 
∑
;

25 
ñf
 = (
ñfhdr
*)0x10000;

28 
	`ªad£g
((
uch¨
*)
ñf
, 4096, 0);

31 if(
ñf
->
magic
 !
ELF_MAGIC
)

35 
ph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

36 
ïh
 = 
ph
 + 
ñf
->
phnum
;

37 ; 
ph
 < 
ïh
;Öh++){

38 
∑
 = (
uch¨
*)
ph
->
∑ddr
;

39 
	`ªad£g
(
∑
, 
ph
->
fûesz
,Öh->
off
);

40 if(
ph
->
memsz
 >Öh->
fûesz
)

41 
	`°osb
(
∑
 + 
ph
->
fûesz
, 0,Öh->
memsz
 -Öh->filesz);

46 
íåy
 = ((*)())(
ñf
->entry);

47 
	`íåy
();

48 
	}
}

51 
	$waôdisk
()

54 (
	`öb
(0x1F7) & 0xC0) != 0x40)

56 
	}
}

60 
	$ªad£˘
(*
d°
, 
uöt
 
off£t
)

63 
	`waôdisk
();

64 
	`outb
(0x1F2, 1);

65 
	`outb
(0x1F3, 
off£t
);

66 
	`outb
(0x1F4, 
off£t
 >> 8);

67 
	`outb
(0x1F5, 
off£t
 >> 16);

68 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

69 
	`outb
(0x1F7, 0x20);

72 
	`waôdisk
();

73 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

74 
	}
}

79 
	$ªad£g
(
uch¨
* 
∑
, 
uöt
 
cou¡
, uöà
off£t
)

81 
uch¨
* 
ïa
;

83 
ïa
 = 
∑
 + 
cou¡
;

86 
∑
 -
off£t
 % 
SECTSIZE
;

89 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

94 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
++)

95 
	`ªad£˘
(
∑
, 
off£t
);

96 
	}
}

	@buf.h

1 
	sbuf
 {

2 
	mÊags
;

3 
uöt
 
	mdev
;

4 
uöt
 
	m£˘‹
;

5 
buf
 *
	m¥ev
;

6 
buf
 *
	m√xt
;

7 
buf
 *
	mq√xt
;

8 
uch¨
 
	md©a
[512];

10 
	#B_BUSY
 0x1

11 
	#B_VALID
 0x2

12 
	#B_DIRTY
 0x4

13 

	)

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"fs.h
"

11 
	~"fûe.h
"

12 
	~"memœyout.h
"

13 
	~"mmu.h
"

14 
	~"¥oc.h
"

15 
	~"x86.h
"

17 
c⁄•utc
();

19 
	g∑nicked
 = 0;

22 
•ölock
 
	mlock
;

23 
	mlockög
;

24 } 
	gc⁄s
;

27 
	$¥ötöt
(
xx
, 
ba£
, 
sign
)

29 
digôs
[] = "0123456789abcdef";

30 
buf
[16];

31 
i
;

32 
uöt
 
x
;

34 if(
sign
 && (sig¿
xx
 < 0))

35 
x
 = -
xx
;

37 
x
 = 
xx
;

39 
i
 = 0;

41 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

42 }(
x
 /
ba£
) != 0);

44 if(
sign
)

45 
buf
[
i
++] = '-';

47 --
i
 >= 0)

48 
	`c⁄•utc
(
buf
[
i
]);

49 
	}
}

54 
	$˝rötf
(*
fmt
, ...)

56 
i
, 
c
, 
lockög
;

57 
uöt
 *
¨gp
;

58 *
s
;

60 
lockög
 = 
c⁄s
.locking;

61 if(
lockög
)

62 
	`acquúe
(&
c⁄s
.
lock
);

64 i‡(
fmt
 == 0)

65 
	`∑nic
("null fmt");

67 
¨gp
 = (
uöt
*)(*)(&
fmt
 + 1);

68 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++){

69 if(
c
 != '%'){

70 
	`c⁄•utc
(
c
);

73 
c
 = 
fmt
[++
i
] & 0xff;

74 if(
c
 == 0)

76 
c
){

78 
	`¥ötöt
(*
¨gp
++, 10, 1);

82 
	`¥ötöt
(*
¨gp
++, 16, 0);

85 if((
s
 = (*)*
¨gp
++) == 0)

86 
s
 = "(null)";

87 ; *
s
; s++)

88 
	`c⁄•utc
(*
s
);

91 
	`c⁄•utc
('%');

95 
	`c⁄•utc
('%');

96 
	`c⁄•utc
(
c
);

101 if(
lockög
)

102 
	`ªÀa£
(&
c⁄s
.
lock
);

103 
	}
}

106 
	$∑nic
(*
s
)

108 
i
;

109 
uöt
 
pcs
[10];

111 
	`˛i
();

112 
c⁄s
.
lockög
 = 0;

113 
	`˝rötf
("˝u%d:Ö™ic: ", 
˝u
->
id
);

114 
	`˝rötf
(
s
);

115 
	`˝rötf
("\n");

116 
	`gëˇŒîpcs
(&
s
, 
pcs
);

117 
i
=0; i<10; i++)

118 
	`˝rötf
(" %p", 
pcs
[
i
]);

119 
∑nicked
 = 1;

122 
	}
}

125 
	#BACKSPACE
 0x100

	)

126 
	#CRTPORT
 0x3d4

	)

127 
ush‹t
 *
	g¸t
 = (ush‹t*)
P2V
(0xb8000);

130 
	$cg≠utc
(
c
)

132 
pos
;

135 
	`outb
(
CRTPORT
, 14);

136 
pos
 = 
	`öb
(
CRTPORT
+1) << 8;

137 
	`outb
(
CRTPORT
, 15);

138 
pos
 |
	`öb
(
CRTPORT
+1);

140 if(
c
 == '\n')

141 
pos
 += 80 -Öos%80;

142 if(
c
 =
BACKSPACE
){

143 if(
pos
 > 0) --pos;

145 
¸t
[
pos
++] = (
c
&0xff) | 0x0700;

147 if((
pos
/80) >= 24){

148 
	`memmove
(
¸t
, crt+80, (crt[0])*23*80);

149 
pos
 -= 80;

150 
	`mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

153 
	`outb
(
CRTPORT
, 14);

154 
	`outb
(
CRTPORT
+1, 
pos
>>8);

155 
	`outb
(
CRTPORT
, 15);

156 
	`outb
(
CRTPORT
+1, 
pos
);

157 
¸t
[
pos
] = ' ' | 0x0700;

158 
	}
}

161 
	$c⁄•utc
(
c
)

163 if(
∑nicked
){

164 
	`˛i
();

169 if(
c
 =
BACKSPACE
){

170 
	`u¨çutc
('\b'); uartputc(' '); uartputc('\b');

172 
	`u¨çutc
(
c
);

173 
	`cg≠utc
(
c
);

174 
	}
}

176 
	#INPUT_BUF
 128

	)

178 
•ölock
 
	mlock
;

179 
	mbuf
[
INPUT_BUF
];

180 
uöt
 
	mr
;

181 
uöt
 
	mw
;

182 
uöt
 
	me
;

183 } 
	göput
;

185 
	#C
(
x
) ((x)-'@')

186 

	)

188 
c⁄sﬁeöå
((*
gëc
)())

190 
c
;

192 
	`acquúe
(&
öput
.
lock
);

193 (
c
 = 
	`gëc
()) >= 0){

194 
c
){

195 
	`C
('P'):

196 
	`¥ocdump
();

198 
	`C
('U'):

199 
öput
.
e
 !öput.
w
 &&

200 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

201 
öput
.
e
--;

202 
	`c⁄•utc
(
BACKSPACE
);

205 
	`C
('H'): '\x7f':

206 if(
öput
.
e
 !öput.
w
){

207 
öput
.
e
--;

208 
	`c⁄•utc
(
BACKSPACE
);

212 if(
c
 !0 && 
öput
.
e
-öput.
r
 < 
INPUT_BUF
){

213 
c
 = (c == '\r') ? '\n' : c;

214 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

215 
	`c⁄•utc
(
c
);

216 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

217 
öput
.
w
 = i≈ut.
e
;

218 
	`wakeup
(&
öput
.
r
);

224 
	`ªÀa£
(&
öput
.
lock
);

225 
	}
}

228 
	$c⁄sﬁîód
(
öode
 *
ù
, *
d°
, 
n
)

230 
uöt
 
èrgë
;

231 
c
;

233 
	`iu∆ock
(
ù
);

234 
èrgë
 = 
n
;

235 
	`acquúe
(&
öput
.
lock
);

236 
n
 > 0){

237 
öput
.
r
 =öput.
w
){

238 if(
¥oc
->
kûÀd
){

239 
	`ªÀa£
(&
öput
.
lock
);

240 
	`ûock
(
ù
);

243 
	`¶ìp
(&
öput
.
r
, &öput.
lock
);

245 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

246 if(
c
 =
	`C
('D')){

247 if(
n
 < 
èrgë
){

250 
öput
.
r
--;

254 *
d°
++ = 
c
;

255 --
n
;

256 if(
c
 == '\n')

259 
	`ªÀa£
(&
öput
.
lock
);

260 
	`ûock
(
ù
);

262  
èrgë
 - 
n
;

263 
	}
}

266 
	$c⁄sﬁewrôe
(
öode
 *
ù
, *
buf
, 
n
)

268 
i
;

270 
	`iu∆ock
(
ù
);

271 
	`acquúe
(&
c⁄s
.
lock
);

272 
i
 = 0; i < 
n
; i++)

273 
	`c⁄•utc
(
buf
[
i
] & 0xff);

274 
	`ªÀa£
(&
c⁄s
.
lock
);

275 
	`ûock
(
ù
);

277  
n
;

278 
	}
}

281 
	$c⁄sﬁeöô
()

283 
	`öôlock
(&
c⁄s
.
lock
, "console");

284 
	`öôlock
(&
öput
.
lock
, "input");

286 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

287 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

288 
c⁄s
.
lockög
 = 1;

290 
	`pi˚«bÀ
(
IRQ_KBD
);

291 
	`iﬂpi˚«bÀ
(
IRQ_KBD
, 0);

292 
	}
}

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g°©
;

9 
	gsu≥rblock
;

10 
	gksmöfo_t
;

13 
böô
();

14 
buf
* 
bªad
(
uöt
, uint);

15 
bªl£
(
buf
*);

16 
bwrôe
(
buf
*);

19 
c⁄sﬁeöô
();

20 
˝rötf
(*, ...);

21 
c⁄sﬁeöå
((*)());

22 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

25 
	`exec
(*, **);

28 
fûe
* 
	`fûóŒoc
();

29 
	`fûe˛o£
(
fûe
*);

30 
fûe
* 
	`fûedup
(file*);

31 
	`fûeöô
();

32 
	`fûîód
(
fûe
*, *, 
n
);

33 
	`fûe°©
(
fûe
*, 
°©
*);

34 
	`fûewrôe
(
fûe
*, *, 
n
);

37 
	`ªadsb
(
dev
, 
su≥rblock
 *
sb
);

38 
	`dúlök
(
öode
*, *, 
uöt
);

39 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

40 
öode
* 
	`üŒoc
(
uöt
, );

41 
öode
* 
	`idup
(inode*);

42 
	`iöô
();

43 
	`ûock
(
öode
*);

44 
	`ùut
(
öode
*);

45 
	`iu∆ock
(
öode
*);

46 
	`iu∆ockput
(
öode
*);

47 
	`iupd©e
(
öode
*);

48 
	`«mecmp
(const *, const *);

49 
öode
* 
	`«mei
(*);

50 
öode
* 
	`«meù¨ít
(*, *);

51 
	`ªadi
(
öode
*, *, 
uöt
, uint);

52 
	`°©i
(
öode
*, 
°©
*);

53 
	`wrôei
(
öode
*, *, 
uöt
, uint);

56 
	`ideöô
();

57 
	`ideöå
();

58 
	`idîw
(
buf
*);

61 
	`iﬂpi˚«bÀ
(
úq
, 
˝u
);

62 
uch¨
 
iﬂpicid
;

63 
	`iﬂpicöô
();

66 * 
	`kÆloc
();

67 
	`k‰ì
(*);

68 
	`köô1
(*, *);

69 
	`köô2
(*, *);

70 
	`pgu£d
();

73 
	`kbdöå
();

76 
	`˝unum
();

77 vﬁ©ûê
uöt
* 
œpic
;

78 
	`œpi˚oi
();

79 
	`œpicöô
();

80 
	`œpic°¨èp
(
uch¨
, 
uöt
);

81 
	`mi¸odñay
();

84 
	`öôlog
();

85 
	`log_wrôe
(
buf
*);

86 
	`begö_å™s
();

87 
	`commô_å™s
();

90 
ismp
;

91 
	`mpb˝u
();

92 
	`mpöô
();

93 
	`mp°¨âhem
();

96 
	`pi˚«bÀ
();

97 
	`picöô
();

100 
	`pùóŒoc
(
fûe
**, file**);

101 
	`pùe˛o£
(
pùe
*, );

102 
	`pùîód
(
pùe
*, *, );

103 
	`pùewrôe
(
pùe
*, *, );

107 
¥oc
* 
	`c›y¥oc
(proc*);

108 
	`exô
();

109 
	`f‹k
();

110 
	`grow¥oc
();

111 
	`kûl
();

112 
	`pöô
();

113 
	`¥ocdump
();

114 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

115 
	`sched
();

116 
	`¶ìp
(*, 
•ölock
*);

117 
	`u£röô
();

118 
	`waô
();

119 
	`wakeup
(*);

120 
	`yõld
();

123 
	`swtch
(
c⁄ãxt
**, context*);

126 
	`acquúe
(
•ölock
*);

127 
	`gëˇŒîpcs
(*, 
uöt
*);

128 
	`hﬁdög
(
•ölock
*);

129 
	`öôlock
(
•ölock
*, *);

130 
	`ªÀa£
(
•ölock
*);

131 
	`push˛i
();

132 
	`p›˛i
();

135 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

136 * 
	`memmove
(*, c⁄° *, 
uöt
);

137 * 
	`mem£t
(*, , 
uöt
);

138 * 
	`ß„°r˝y
(*, const *, );

139 
	`°æí
(const *);

140 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

141 * 
	`°∫˝y
(*, const *, );

144 
	`¨göt
(, *);

145 
	`¨g±r
(, **, );

146 
	`¨g°r
(, **);

147 
	`„tchöt
(
uöt
, *);

148 
	`„tch°r
(
uöt
, **);

149 
	`sysˇŒ
();

152 
	`timîöô
();

155 
	`idtöô
();

156 
uöt
 
ticks
;

157 
	`tvöô
();

158 
•ölock
 
tick¶ock
;

161 
	`u¨töô
();

162 
	`u¨töå
();

163 
	`u¨çutc
();

166 
	`£göô
();

167 
	`kvmÆloc
();

168 
	`vmíabÀ
();

169 
pde_t
* 
	`£tupkvm
();

170 * 
	`uva2ka
(
pde_t
*, *);

171 
	`Ælocuvm
(
pde_t
*, 
uöt
, uint);

172 
	`dóŒocuvm
(
pde_t
*, 
uöt
, uint);

173 
	`‰ìvm
(
pde_t
*);

174 
	`öôuvm
(
pde_t
*, *, 
uöt
);

175 
	`lﬂduvm
(
pde_t
*, *, 
öode
*, 
uöt
, uint);

176 
pde_t
* 
	`c›yuvm
’de_t*, 
uöt
);

177 
	`swôchuvm
(
¥oc
*);

178 
	`swôchkvm
();

179 
	`c›yout
(
pde_t
*, 
uöt
, *, uint);

180 
	`˛óΩãu
(
pde_t
 *
pgdú
, *
uva
);

183 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

186 
	`m≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
);

187 
	`unm≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
);

190 
	`ksmöô
();

191 
	`ksmgë
(* 
«me
, 
uöt
 
size
);

192 
	`ksm©èch
(
hd
, 
Êag
);

193 
	`ksmdëach
(
hd
);

194 
	`ksmöfo
(
hd
, 
ksmöfo_t
* 
öfo
);

195 
	`ksmdñëe
(
hd
);

198 
	`£möô
();

199 
	`£m_gë
(
uöt
 
«me
, 
vÆue
);

200 
	`£m_sig«l
(
hd
);

201 
	`£m_waô
(
hd
);

202 
	`£m_dñëe
(
hd
);

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
(1, "%s%s", 
¨gv
[
i
], i+1 < 
¨gc
 ? " " : "\n");

12 
	`exô
();

13 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt
 
	míåy
;

13 
uöt
 
	mphoff
;

14 
uöt
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt
 
	mty≥
;

27 
uöt
 
	moff
;

28 
uöt
 
	mvaddr
;

29 
uöt
 
	m∑ddr
;

30 
uöt
 
	mfûesz
;

31 
uöt
 
	mmemsz
;

32 
uöt
 
	mÊags
;

33 
uöt
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"defs.h
"

7 
	~"x86.h
"

8 
	~"ñf.h
"

11 
	$exec
(*
∑th
, **
¨gv
)

13 *
s
, *
œ°
;

14 
i
, 
off
;

15 
uöt
 
¨gc
, 
sz
, 
•
, 
u°ack
[3+
MAXARG
+1];

16 
ñfhdr
 
ñf
;

17 
öode
 *
ù
;

18 
¥oghdr
 
ph
;

19 
pde_t
 *
pgdú
, *
ﬁdpgdú
;

21 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

23 
	`ûock
(
ù
);

24 
pgdú
 = 0;

27 if(
	`ªadi
(
ù
, (*)&
ñf
, 0, (elf)) < (elf))

28 
bad
;

29 if(
ñf
.
magic
 !
ELF_MAGIC
)

30 
bad
;

32 if((
pgdú
 = 
	`£tupkvm
()) == 0)

33 
bad
;

36 
sz
 = 0;

37 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

38 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

39 
bad
;

40 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

42 if(
ph
.
memsz
 <Öh.
fûesz
)

43 
bad
;

44 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

45 
bad
;

46 if(
	`lﬂduvm
(
pgdú
, (*)
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

47 
bad
;

49 
	`iu∆ockput
(
ù
);

50 
ù
 = 0;

54 
sz
 = 
	`PGROUNDUP
(sz);

55 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, sz + 2*
PGSIZE
)) == 0)

56 
bad
;

57 
	`˛óΩãu
(
pgdú
, (*)(
sz
 - 2*
PGSIZE
));

58 
•
 = 
sz
;

61 
¨gc
 = 0; 
¨gv
[argc];árgc++) {

62 if(
¨gc
 >
MAXARG
)

63 
bad
;

64 
•
 = (• - (
	`°æí
(
¨gv
[
¨gc
]) + 1)) & ~3;

65 if(
	`c›yout
(
pgdú
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
(argv[argc]) + 1) < 0)

66 
bad
;

67 
u°ack
[3+
¨gc
] = 
•
;

69 
u°ack
[3+
¨gc
] = 0;

71 
u°ack
[0] = 0xffffffff;

72 
u°ack
[1] = 
¨gc
;

73 
u°ack
[2] = 
•
 - (
¨gc
+1)*4;

75 
•
 -(3+
¨gc
+1) * 4;

76 if(
	`c›yout
(
pgdú
, 
•
, 
u°ack
, (3+
¨gc
+1)*4) < 0)

77 
bad
;

80 
œ°
=
s
=
∑th
; *s; s++)

81 if(*
s
 == '/')

82 
œ°
 = 
s
+1;

83 
	`ß„°r˝y
(
¥oc
->
«me
, 
œ°
, (proc->name));

86 
ﬁdpgdú
 = 
¥oc
->
pgdú
;

87 
¥oc
->
pgdú
 =Ögdir;

88 
¥oc
->
sz
 = sz;

89 
¥oc
->
tf
->
eù
 = 
ñf
.
íåy
;

90 
¥oc
->
tf
->
e•
 = 
•
;

91 
	`swôchuvm
(
¥oc
);

92 
	`‰ìvm
(
ﬁdpgdú
);

95 
bad
:

96 if(
pgdú
)

97 
	`‰ìvm
(
pgdú
);

98 if(
ù
)

99 
	`iu∆ockput
(
ù
);

101 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"•ölock.h
"

12 
devsw
 
	gdevsw
[
NDEV
];

14 
•ölock
 
	mlock
;

15 
fûe
 
	mfûe
[
NFILE
];

16 } 
	g·abÀ
;

19 
	$fûeöô
()

21 
	`öôlock
(&
·abÀ
.
lock
, "ftable");

22 
	}
}

25 
fûe
*

26 
	$fûóŒoc
()

28 
fûe
 *
f
;

30 
	`acquúe
(&
·abÀ
.
lock
);

31 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++){

32 if(
f
->
ªf
 == 0){

33 
f
->
ªf
 = 1;

34 
	`ªÀa£
(&
·abÀ
.
lock
);

35  
f
;

38 
	`ªÀa£
(&
·abÀ
.
lock
);

40 
	}
}

43 
fûe
*

44 
	$fûedup
(
fûe
 *
f
)

46 
	`acquúe
(&
·abÀ
.
lock
);

47 if(
f
->
ªf
 < 1)

48 
	`∑nic
("filedup");

49 
f
->
ªf
++;

50 
	`ªÀa£
(&
·abÀ
.
lock
);

51  
f
;

52 
	}
}

56 
	$fûe˛o£
(
fûe
 *
f
)

58 
fûe
 
ff
;

60 
	`acquúe
(&
·abÀ
.
lock
);

61 if(
f
->
ªf
 < 1)

62 
	`∑nic
("fileclose");

63 if(--
f
->
ªf
 > 0){

64 
	`ªÀa£
(&
·abÀ
.
lock
);

67 
ff
 = *
f
;

68 
f
->
ªf
 = 0;

69 
f
->
ty≥
 = 
FD_NONE
;

70 
	`ªÀa£
(&
·abÀ
.
lock
);

72 if(
ff
.
ty≥
 =
FD_PIPE
)

73 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

74 if(
ff
.
ty≥
 =
FD_INODE
){

75 
	`begö_å™s
();

76 
	`ùut
(
ff
.
ù
);

77 
	`commô_å™s
();

79 
	}
}

83 
	$fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

85 if(
f
->
ty≥
 =
FD_INODE
){

86 
	`ûock
(
f
->
ù
);

87 
	`°©i
(
f
->
ù
, 
°
);

88 
	`iu∆ock
(
f
->
ù
);

92 
	}
}

96 
	$fûîód
(
fûe
 *
f
, *
addr
, 
n
)

98 
r
;

100 if(
f
->
ªadabÀ
 == 0)

102 if(
f
->
ty≥
 =
FD_PIPE
)

103  
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

104 if(
f
->
ty≥
 =
FD_INODE
){

105 
	`ûock
(
f
->
ù
);

106 if((
r
 = 
	`ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

107 
f
->
off
 +
r
;

108 
	`iu∆ock
(
f
->
ù
);

109  
r
;

111 
	`∑nic
("fileread");

112 
	}
}

117 
	$fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

119 
r
;

121 if(
f
->
wrôabÀ
 == 0)

123 if(
f
->
ty≥
 =
FD_PIPE
)

124  
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

125 if(
f
->
ty≥
 =
FD_INODE
){

132 
max
 = ((
LOGSIZE
-1-1-2) / 2) * 512;

133 
i
 = 0;

134 
i
 < 
n
){

135 
n1
 = 
n
 - 
i
;

136 if(
n1
 > 
max
)

137 
n1
 = 
max
;

139 
	`begö_å™s
();

140 
	`ûock
(
f
->
ù
);

141 i‡((
r
 = 
	`wrôei
(
f
->
ù
, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

142 
f
->
off
 +
r
;

143 
	`iu∆ock
(
f
->
ù
);

144 
	`commô_å™s
();

146 if(
r
 < 0)

148 if(
r
 !
n1
)

149 
	`∑nic
("short filewrite");

150 
i
 +
r
;

152  
i
 =
n
 ?Ç : -1;

154 
	`∑nic
("filewrite");

155 
	}
}

	@file.h

1 
	sfûe
 {

2 íum { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
pùe
 *
	mpùe
;

7 
öode
 *
	mù
;

8 
uöt
 
	moff
;

13 
	söode
 {

14 
uöt
 
	mdev
;

15 
uöt
 
	möum
;

16 
	mªf
;

17 
	mÊags
;

19 
	mty≥
;

20 
	mmaj‹
;

21 
	mmö‹
;

22 
	m∆ök
;

23 
uöt
 
	msize
;

24 
uöt
 
	maddrs
[
NDIRECT
+1];

26 
	#I_BUSY
 0x1

	)

27 
	#I_VALID
 0x2

	)

31 
	sdevsw
 {

32 (*
	mªad
)(
	möode
*, *, );

33 (*
	mwrôe
)(
	möode
*, *, );

36 
devsw
 devsw[];

38 
	#CONSOLE
 1

	)

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

8 
	#N
 1000

	)

11 
	$¥ötf
(
fd
, *
s
, ...)

13 
	`wrôe
(
fd
, 
s
, 
	`°æí
(s));

14 
	}
}

17 
	$f‹kã°
()

19 
n
, 
pid
;

21 
	`¥ötf
(1, "forkÅest\n");

23 
n
=0;Ç<
N
;Ç++){

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0)

27 if(
pid
 == 0)

28 
	`exô
();

31 if(
n
 =
N
){

32 
	`¥ötf
(1, "f‹k cœimedÅÿw‹k NÅimes!\n", 
N
);

33 
	`exô
();

36 ; 
n
 > 0;Ç--){

37 if(
	`waô
() < 0){

38 
	`¥ötf
(1, "wait stoppedÉarly\n");

39 
	`exô
();

43 if(
	`waô
() != -1){

44 
	`¥ötf
(1, "wait gotÅoo many\n");

45 
	`exô
();

48 
	`¥ötf
(1, "forkÅest OK\n");

49 
	}
}

52 
	$maö
()

54 
	`f‹kã°
();

55 
	`exô
();

56 
	}
}

	@fs.c

12 
	~"ty≥s.h
"

13 
	~"defs.h
"

14 
	~"∑øm.h
"

15 
	~"°©.h
"

16 
	~"mmu.h
"

17 
	~"¥oc.h
"

18 
	~"•ölock.h
"

19 
	~"buf.h
"

20 
	~"fs.h
"

21 
	~"fûe.h
"

23 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
ôrunc
(
öode
*);

28 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

30 
buf
 *
bp
;

32 
bp
 = 
	`bªad
(
dev
, 1);

33 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

34 
	`bªl£
(
bp
);

35 
	}
}

39 
	$bzîo
(
dev
, 
bno
)

41 
buf
 *
bp
;

43 
bp
 = 
	`bªad
(
dev
, 
bno
);

44 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

45 
	`log_wrôe
(
bp
);

46 
	`bªl£
(
bp
);

47 
	}
}

52 
uöt


53 
	$bÆloc
(
uöt
 
dev
)

55 
b
, 
bi
, 
m
;

56 
buf
 *
bp
;

57 
su≥rblock
 
sb
;

59 
bp
 = 0;

60 
	`ªadsb
(
dev
, &
sb
);

61 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

62 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

63 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++){

64 
m
 = 1 << (
bi
 % 8);

65 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

66 
bp
->
d©a
[
bi
/8] |
m
;

67 
	`log_wrôe
(
bp
);

68 
	`bªl£
(
bp
);

69 
	`bzîo
(
dev
, 
b
 + 
bi
);

70  
b
 + 
bi
;

73 
	`bªl£
(
bp
);

75 
	`∑nic
("balloc: out of blocks");

76 
	}
}

80 
	$b‰ì
(
dev
, 
uöt
 
b
)

82 
buf
 *
bp
;

83 
su≥rblock
 
sb
;

84 
bi
, 
m
;

86 
	`ªadsb
(
dev
, &
sb
);

87 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

88 
bi
 = 
b
 % 
BPB
;

89 
m
 = 1 << (
bi
 % 8);

90 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

91 
	`∑nic
("freeing free block");

92 
bp
->
d©a
[
bi
/8] &~
m
;

93 
	`log_wrôe
(
bp
);

94 
	`bªl£
(
bp
);

95 
	}
}

160 
•ölock
 
	mlock
;

161 
öode
 
	möode
[
NINODE
];

162 } 
	giˇche
;

165 
	$iöô
()

167 
	`öôlock
(&
iˇche
.
lock
, "icache");

168 
	}
}

170 
öode
* 
igë
(
uöt
 
dev
, uöà
öum
);

175 
öode
*

176 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

178 
öum
;

179 
buf
 *
bp
;

180 
döode
 *
dù
;

181 
su≥rblock
 
sb
;

183 
	`ªadsb
(
dev
, &
sb
);

185 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

186 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
));

187 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

188 if(
dù
->
ty≥
 == 0){

189 
	`mem£t
(
dù
, 0, (*dip));

190 
dù
->
ty≥
 =Åype;

191 
	`log_wrôe
(
bp
);

192 
	`bªl£
(
bp
);

193  
	`igë
(
dev
, 
öum
);

195 
	`bªl£
(
bp
);

197 
	`∑nic
("ialloc:Ço inodes");

198 
	}
}

202 
	$iupd©e
(
öode
 *
ù
)

204 
buf
 *
bp
;

205 
döode
 *
dù
;

207 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

208 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

209 
dù
->
ty≥
 = 
ù
->type;

210 
dù
->
maj‹
 = 
ù
->major;

211 
dù
->
mö‹
 = 
ù
->minor;

212 
dù
->
∆ök
 = 
ù
->nlink;

213 
dù
->
size
 = 
ù
->size;

214 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

215 
	`log_wrôe
(
bp
);

216 
	`bªl£
(
bp
);

217 
	}
}

222 
öode
*

223 
	$igë
(
uöt
 
dev
, uöà
öum
)

225 
öode
 *
ù
, *
em±y
;

227 
	`acquúe
(&
iˇche
.
lock
);

230 
em±y
 = 0;

231 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

232 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

233 
ù
->
ªf
++;

234 
	`ªÀa£
(&
iˇche
.
lock
);

235  
ù
;

237 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

238 
em±y
 = 
ù
;

242 if(
em±y
 == 0)

243 
	`∑nic
("iget:Ço inodes");

245 
ù
 = 
em±y
;

246 
ù
->
dev
 = dev;

247 
ù
->
öum
 = inum;

248 
ù
->
ªf
 = 1;

249 
ù
->
Êags
 = 0;

250 
	`ªÀa£
(&
iˇche
.
lock
);

252  
ù
;

253 
	}
}

257 
öode
*

258 
	$idup
(
öode
 *
ù
)

260 
	`acquúe
(&
iˇche
.
lock
);

261 
ù
->
ªf
++;

262 
	`ªÀa£
(&
iˇche
.
lock
);

263  
ù
;

264 
	}
}

269 
	$ûock
(
öode
 *
ù
)

271 
buf
 *
bp
;

272 
döode
 *
dù
;

274 if(
ù
 =0 || ip->
ªf
 < 1)

275 
	`∑nic
("ilock");

277 
	`acquúe
(&
iˇche
.
lock
);

278 
ù
->
Êags
 & 
I_BUSY
)

279 
	`¶ìp
(
ù
, &
iˇche
.
lock
);

280 
ù
->
Êags
 |
I_BUSY
;

281 
	`ªÀa£
(&
iˇche
.
lock
);

283 if(!(
ù
->
Êags
 & 
I_VALID
)){

284 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

285 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

286 
ù
->
ty≥
 = 
dù
->type;

287 
ù
->
maj‹
 = 
dù
->major;

288 
ù
->
mö‹
 = 
dù
->minor;

289 
ù
->
∆ök
 = 
dù
->nlink;

290 
ù
->
size
 = 
dù
->size;

291 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

292 
	`bªl£
(
bp
);

293 
ù
->
Êags
 |
I_VALID
;

294 if(
ù
->
ty≥
 == 0)

295 
	`∑nic
("ilock:ÇoÅype");

297 
	}
}

301 
	$iu∆ock
(
öode
 *
ù
)

303 if(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

304 
	`∑nic
("iunlock");

306 
	`acquúe
(&
iˇche
.
lock
);

307 
ù
->
Êags
 &~
I_BUSY
;

308 
	`wakeup
(
ù
);

309 
	`ªÀa£
(&
iˇche
.
lock
);

310 
	}
}

318 
	$ùut
(
öode
 *
ù
)

320 
	`acquúe
(&
iˇche
.
lock
);

321 if(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

323 if(
ù
->
Êags
 & 
I_BUSY
)

324 
	`∑nic
("iput busy");

325 
ù
->
Êags
 |
I_BUSY
;

326 
	`ªÀa£
(&
iˇche
.
lock
);

327 
	`ôrunc
(
ù
);

328 
ù
->
ty≥
 = 0;

329 
	`iupd©e
(
ù
);

330 
	`acquúe
(&
iˇche
.
lock
);

331 
ù
->
Êags
 = 0;

332 
	`wakeup
(
ù
);

334 
ù
->
ªf
--;

335 
	`ªÀa£
(&
iˇche
.
lock
);

336 
	}
}

340 
	$iu∆ockput
(
öode
 *
ù
)

342 
	`iu∆ock
(
ù
);

343 
	`ùut
(
ù
);

344 
	}
}

356 
uöt


357 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
)

359 
uöt
 
addr
, *
a
;

360 
buf
 *
bp
;

362 if(
bn
 < 
NDIRECT
){

363 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

364 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

365  
addr
;

367 
bn
 -
NDIRECT
;

369 if(
bn
 < 
NINDIRECT
){

371 if((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

372 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

373 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

374 
a
 = (
uöt
*)
bp
->
d©a
;

375 if((
addr
 = 
a
[
bn
]) == 0){

376 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

377 
	`log_wrôe
(
bp
);

379 
	`bªl£
(
bp
);

380  
addr
;

383 
	`∑nic
("bmap: out ofÑange");

384 
	}
}

392 
	$ôrunc
(
öode
 *
ù
)

394 
i
, 
j
;

395 
buf
 *
bp
;

396 
uöt
 *
a
;

398 
i
 = 0; i < 
NDIRECT
; i++){

399 if(
ù
->
addrs
[
i
]){

400 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

401 
ù
->
addrs
[
i
] = 0;

405 if(
ù
->
addrs
[
NDIRECT
]){

406 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

407 
a
 = (
uöt
*)
bp
->
d©a
;

408 
j
 = 0; j < 
NINDIRECT
; j++){

409 if(
a
[
j
])

410 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

412 
	`bªl£
(
bp
);

413 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

414 
ù
->
addrs
[
NDIRECT
] = 0;

417 
ù
->
size
 = 0;

418 
	`iupd©e
(
ù
);

419 
	}
}

423 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

425 
°
->
dev
 = 
ù
->dev;

426 
°
->
öo
 = 
ù
->
öum
;

427 
°
->
ty≥
 = 
ù
->type;

428 
°
->
∆ök
 = 
ù
->nlink;

429 
°
->
size
 = 
ù
->size;

430 
	}
}

435 
	$ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

437 
uöt
 
tŸ
, 
m
;

438 
buf
 *
bp
;

440 if(
ù
->
ty≥
 =
T_DEV
){

441 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

443  
devsw
[
ù
->
maj‹
].
	`ªad
(ù, 
d°
, 
n
);

446 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

448 if(
off
 + 
n
 > 
ù
->
size
)

449 
n
 = 
ù
->
size
 - 
off
;

451 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

452 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

453 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

454 
	`memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

455 
	`bªl£
(
bp
);

457  
n
;

458 
	}
}

463 
	$wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

465 
uöt
 
tŸ
, 
m
;

466 
buf
 *
bp
;

468 if(
ù
->
ty≥
 =
T_DEV
){

469 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

471  
devsw
[
ù
->
maj‹
].
	`wrôe
(ù, 
§c
, 
n
);

474 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

476 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

479 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

480 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

481 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

482 
	`memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

483 
	`log_wrôe
(
bp
);

484 
	`bªl£
(
bp
);

487 if(
n
 > 0 && 
off
 > 
ù
->
size
){

488 
ù
->
size
 = 
off
;

489 
	`iupd©e
(
ù
);

491  
n
;

492 
	}
}

498 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

500  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

501 
	}
}

505 
öode
*

506 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

508 
uöt
 
off
, 
öum
;

509 
dúít
 
de
;

511 if(
dp
->
ty≥
 !
T_DIR
)

512 
	`∑nic
("dirlookupÇot DIR");

514 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

515 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

516 
	`∑nic
("dirlinkÑead");

517 if(
de
.
öum
 == 0)

519 if(
	`«mecmp
(
«me
, 
de
.name) == 0){

521 if(
poff
)

522 *
poff
 = 
off
;

523 
öum
 = 
de
.inum;

524  
	`igë
(
dp
->
dev
, 
öum
);

529 
	}
}

533 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

535 
off
;

536 
dúít
 
de
;

537 
öode
 *
ù
;

540 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

541 
	`ùut
(
ù
);

546 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

547 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

548 
	`∑nic
("dirlinkÑead");

549 if(
de
.
öum
 == 0)

553 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

554 
de
.
öum
 = inum;

555 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

556 
	`∑nic
("dirlink");

559 
	}
}

577 
	$skùñem
(*
∑th
, *
«me
)

579 *
s
;

580 
Àn
;

582 *
∑th
 == '/')

583 
∑th
++;

584 if(*
∑th
 == 0)

586 
s
 = 
∑th
;

587 *
∑th
 != '/' && *path != 0)

588 
∑th
++;

589 
Àn
 = 
∑th
 - 
s
;

590 if(
Àn
 >
DIRSIZ
)

591 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

593 
	`memmove
(
«me
, 
s
, 
Àn
);

594 
«me
[
Àn
] = 0;

596 *
∑th
 == '/')

597 
∑th
++;

598  
∑th
;

599 
	}
}

604 
öode
*

605 
	$«mex
(*
∑th
, 
«meù¨ít
, *
«me
)

607 
öode
 *
ù
, *
√xt
;

609 if(*
∑th
 == '/')

610 
ù
 = 
	`igë
(
ROOTDEV
, 
ROOTINO
);

612 
ù
 = 
	`idup
(
¥oc
->
cwd
);

614 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

615 
	`ûock
(
ù
);

616 if(
ù
->
ty≥
 !
T_DIR
){

617 
	`iu∆ockput
(
ù
);

620 if(
«meù¨ít
 && *
∑th
 == '\0'){

622 
	`iu∆ock
(
ù
);

623  
ù
;

625 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

626 
	`iu∆ockput
(
ù
);

629 
	`iu∆ockput
(
ù
);

630 
ù
 = 
√xt
;

632 if(
«meù¨ít
){

633 
	`ùut
(
ù
);

636  
ù
;

637 
	}
}

639 
öode
*

640 
	$«mei
(*
∑th
)

642 
«me
[
DIRSIZ
];

643  
	`«mex
(
∑th
, 0, 
«me
);

644 
	}
}

646 
öode
*

647 
	$«meù¨ít
(*
∑th
, *
«me
)

649  
	`«mex
(
∑th
, 1, 
«me
);

650 
	}
}

	@fs.h

11 
	#ROOTINO
 1

12 
	#BSIZE
 512

13 

	)

15 
	ssu≥rblock
 {

16 
uöt
 
	msize
;

17 
uöt
 
	mnblocks
;

18 
uöt
 
	mnöodes
;

19 
uöt
 
	m∆og
;

22 
	#NDIRECT
 12

	)

23 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

24 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

27 
	sdöode
 {

28 
	mty≥
;

29 
	mmaj‹
;

30 
	mmö‹
;

31 
	m∆ök
;

32 
uöt
 
	msize
;

33 
uöt
 
	maddrs
[
NDIRECT
+1];

37 
	#IPB
 (
BSIZE
 / (
döode
))

	)

40 
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

43 
	#BPB
 (
BSIZE
*8)

	)

46 
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

49 
	#DIRSIZ
 14

	)

51 
	sdúít
 {

52 
ush‹t
 
	möum
;

53 
	m«me
[
DIRSIZ
];

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m)) > 0){

18 
m
 +
n
;

19 
p
 = 
buf
;

20 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

21 *
q
 = 0;

22 if(
	`m©ch
(
∑âîn
, 
p
)){

23 *
q
 = '\n';

24 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

26 
p
 = 
q
+1;

28 if(
p
 =
buf
)

29 
m
 = 0;

30 if(
m
 > 0){

31 
m
 -
p
 - 
buf
;

32 
	`memmove
(
buf
, 
p
, 
m
);

35 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
fd
, 
i
;

41 *
∑âîn
;

43 if(
¨gc
 <= 1){

44 
	`¥ötf
(2, "usage: grepÖattern [file ...]\n");

45 
	`exô
();

47 
∑âîn
 = 
¨gv
[1];

49 if(
¨gc
 <= 2){

50 
	`gªp
(
∑âîn
, 0);

51 
	`exô
();

54 
i
 = 2; i < 
¨gc
; i++){

55 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

56 
	`¥ötf
(1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

57 
	`exô
();

59 
	`gªp
(
∑âîn
, 
fd
);

60 
	`˛o£
(
fd
);

62 
	`exô
();

63 
	}
}

68 
m©chhîe
(*, *);

69 
m©ch°¨
(, *, *);

72 
	$m©ch
(*
ª
, *
ãxt
)

74 if(
ª
[0] == '^')

75  
	`m©chhîe
(
ª
+1, 
ãxt
);

77 if(
	`m©chhîe
(
ª
, 
ãxt
))

79 }*
ãxt
++ != '\0');

81 
	}
}

84 
	$m©chhîe
(*
ª
, *
ãxt
)

86 if(
ª
[0] == '\0')

88 if(
ª
[1] == '*')

89  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

90 if(
ª
[0] == '$' &&Ñe[1] == '\0')

91  *
ãxt
 == '\0';

92 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

93  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

95 
	}
}

98 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

101 if(
	`m©chhîe
(
ª
, 
ãxt
))

103 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

105 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
	#IDE_BSY
 0x80

	)

15 
	#IDE_DRDY
 0x40

	)

16 
	#IDE_DF
 0x20

	)

17 
	#IDE_ERR
 0x01

	)

19 
	#IDE_CMD_READ
 0x20

	)

20 
	#IDE_CMD_WRITE
 0x30

	)

26 
•ölock
 
	gidñock
;

27 
buf
 *
	gidequeue
;

29 
	ghavedisk1
;

30 
ide°¨t
(
buf
*);

34 
	$idewaô
(
checkîr
)

36 
r
;

38 ((
r
 = 
	`öb
(0x1f7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

40 if(
checkîr
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

43 
	}
}

46 
	$ideöô
()

48 
i
;

50 
	`öôlock
(&
idñock
, "ide");

51 
	`pi˚«bÀ
(
IRQ_IDE
);

52 
	`iﬂpi˚«bÀ
(
IRQ_IDE
, 
n˝u
 - 1);

53 
	`idewaô
(0);

56 
	`outb
(0x1f6, 0xe0 | (1<<4));

57 
i
=0; i<1000; i++){

58 if(
	`öb
(0x1f7) != 0){

59 
havedisk1
 = 1;

65 
	`outb
(0x1f6, 0xe0 | (0<<4));

66 
	}
}

70 
	$ide°¨t
(
buf
 *
b
)

72 if(
b
 == 0)

73 
	`∑nic
("idestart");

75 
	`idewaô
(0);

76 
	`outb
(0x3f6, 0);

77 
	`outb
(0x1f2, 1);

78 
	`outb
(0x1f3, 
b
->
£˘‹
 & 0xff);

79 
	`outb
(0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

80 
	`outb
(0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

81 
	`outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((b->
£˘‹
>>24)&0x0f));

82 if(
b
->
Êags
 & 
B_DIRTY
){

83 
	`outb
(0x1f7, 
IDE_CMD_WRITE
);

84 
	`out¶
(0x1f0, 
b
->
d©a
, 512/4);

86 
	`outb
(0x1f7, 
IDE_CMD_READ
);

88 
	}
}

92 
	$ideöå
()

94 
buf
 *
b
;

97 
	`acquúe
(&
idñock
);

98 if((
b
 = 
idequeue
) == 0){

99 
	`ªÀa£
(&
idñock
);

103 
idequeue
 = 
b
->
q√xt
;

106 if(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`idewaô
(1) >= 0)

107 
	`ö¶
(0x1f0, 
b
->
d©a
, 512/4);

110 
b
->
Êags
 |
B_VALID
;

111 
b
->
Êags
 &~
B_DIRTY
;

112 
	`wakeup
(
b
);

115 if(
idequeue
 != 0)

116 
	`ide°¨t
(
idequeue
);

118 
	`ªÀa£
(&
idñock
);

119 
	}
}

126 
	$idîw
(
buf
 *
b
)

128 
buf
 **
µ
;

130 if(!(
b
->
Êags
 & 
B_BUSY
))

131 
	`∑nic
("iderw: bufÇot busy");

132 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

133 
	`∑nic
("iderw:ÇothingÅo do");

134 if(
b
->
dev
 !0 && !
havedisk1
)

135 
	`∑nic
("iderw: ide disk 1ÇotÖresent");

137 
	`acquúe
(&
idñock
);

140 
b
->
q√xt
 = 0;

141 
µ
=&
idequeue
; *µ;Öp=&(*µ)->
q√xt
)

143 *
µ
 = 
b
;

146 if(
idequeue
 =
b
)

147 
	`ide°¨t
(
b
);

150 (
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) != B_VALID){

151 
	`¶ìp
(
b
, &
idñock
);

154 
	`ªÀa£
(&
idñock
);

155 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
(1, "init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
(1, "init: fork failed\n");

27 
	`exô
();

29 if(
pid
 == 0){

30 
	`exec
("sh", 
¨gv
);

31 
	`¥ötf
(1, "init:Éxec sh failed\n");

32 
	`exô
();

34 (
wpid
=
	`waô
()Ë>0 && wpid !
pid
)

35 
	`¥ötf
(1, "zombie!\n");

37 
	}
}

	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic
 {

29 
uöt
 
	mªg
;

30 
uöt
 
	m∑d
[3];

31 
uöt
 
	md©a
;

34 
uöt


35 
	$iﬂpi¸ód
(
ªg
)

37 
iﬂpic
->
ªg
 =Ñeg;

38  
iﬂpic
->
d©a
;

39 
	}
}

42 
	$iﬂpicwrôe
(
ªg
, 
uöt
 
d©a
)

44 
iﬂpic
->
ªg
 =Ñeg;

45 
iﬂpic
->
d©a
 = data;

46 
	}
}

49 
	$iﬂpicöô
()

51 
i
, 
id
, 
maxöå
;

53 if(!
ismp
)

56 
iﬂpic
 = (vﬁ©ûêiﬂpic*)
IOAPIC
;

57 
maxöå
 = (
	`iﬂpi¸ód
(
REG_VER
) >> 16) & 0xFF;

58 
id
 = 
	`iﬂpi¸ód
(
REG_ID
) >> 24;

59 if(
id
 !
iﬂpicid
)

60 
	`˝rötf
("ioapicinit: id isn'tÉqualÅo ioapicid;Çotá MP\n");

64 
i
 = 0; i <
maxöå
; i++){

65 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
T_IRQ0
 + i));

66 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
+1, 0);

68 
	}
}

71 
	$iﬂpi˚«bÀ
(
úq
, 
˝unum
)

73 if(!
ismp
)

79 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
, 
T_IRQ0
 + irq);

80 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

81 
	}
}

	@kalloc.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
‰ìønge
(*
v°¨t
, *
víd
);

13 
íd
[];

15 
	srun
 {

16 
run
 *
	m√xt
;

20 
•ölock
 
	mlock
;

21 
	mu£_lock
;

22 
	mpgƒ
;

23 
run
 *
	m‰ìli°
;

24 } 
	gkmem
;

32 
	$köô1
(*
v°¨t
, *
víd
)

34 
	`öôlock
(&
kmem
.
lock
, "kmem");

35 
kmem
.
u£_lock
 = 0;

36 
	`‰ìønge
(
v°¨t
, 
víd
);

37 
kmem
.
pgƒ
 = 0;

38 
	}
}

41 
	$köô2
(*
v°¨t
, *
víd
)

43 
pgƒ
 = 
kmem
.pgnr;

44 
	`‰ìønge
(
v°¨t
, 
víd
);

45 
kmem
.
u£_lock
 = 1;

46 
kmem
.
pgƒ
 =Ögnr;

47 
	}
}

50 
	$‰ìønge
(*
v°¨t
, *
víd
)

52 *
p
;

53 
p
 = (*)
	`PGROUNDUP
((
uöt
)
v°¨t
);

54 ; 
p
 + 
PGSIZE
 <(*)
víd
;Ö += PGSIZE)

55 
	`k‰ì
(
p
);

56 
	}
}

64 
	$k‰ì
(*
v
)

66 
run
 *
r
;

68 if((
uöt
)
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
(vË>
PHYSTOP
)

69 
	`∑nic
("kfree");

72 
	`mem£t
(
v
, 1, 
PGSIZE
);

74 if(
kmem
.
u£_lock
)

75 
	`acquúe
(&
kmem
.
lock
);

76 
r
 = (
run
*)
v
;

77 
r
->
√xt
 = 
kmem
.
‰ìli°
;

78 
kmem
.
‰ìli°
 = 
r
;

79 
kmem
.
pgƒ
--;

80 if(
kmem
.
u£_lock
)

81 
	`ªÀa£
(&
kmem
.
lock
);

82 
	}
}

88 
	$kÆloc
()

90 
run
 *
r
;

92 if(
kmem
.
u£_lock
)

93 
	`acquúe
(&
kmem
.
lock
);

94 
r
 = 
kmem
.
‰ìli°
;

95 if(
r
) {

96 
kmem
.
‰ìli°
 = 
r
->
√xt
;

97 
kmem
.
pgƒ
++;

99 if(
kmem
.
u£_lock
)

100 
	`ªÀa£
(&
kmem
.
lock
);

101  (*)
r
;

102 
	}
}

105 
	$pgu£d
()

107 
pgƒ
;

109 if(
kmem
.
u£_lock
)

110 
	`acquúe
(&
kmem
.
lock
);

111 
pgƒ
 = 
kmem
.pgnr;

112 if(
kmem
.
u£_lock
)

113 
	`ªÀa£
(&
kmem
.
lock
);

115  
pgƒ
;

116 
	}
}

	@kalloc_bitmap.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
	#BYTESIZE
 8

	)

13 
	#WORDSIZE
 32

	)

14 
	#BYTEROUNDUP
(
sz
Ë(((sz)+
BYTESIZE
-1Ë& ~(BYTESIZE-1))

	)

15 
	#BYTEROUNDDOWN
(
sz
Ë(((sz)Ë& ~(
BYTESIZE
-1))

	)

16 
	#BYTESHIFT
 3

	)

18 
	#WORDROUNDUP
(
sz
Ë(((sz)+
WORDSIZE
-1Ë& ~(WORDSIZE-1))

	)

20 
öôbôm≠
(*
v°¨t
, *
víd
);

21 
íd
[];

23 
	sbôm≠
 {

24 
	mnb
;

25 * 
	m°¨t
;

26 
	mbôm≠s
[];

30 
•ölock
 
	mlock
;

31 
	mu£_lock
;

32 
bôm≠
* 
	mbm≠
;

33 } 
	gkmem
;

41 
	$köô1
(*
v°¨t
, *
víd
)

43 
	`öôlock
(&
kmem
.
lock
, "kmem");

44 
kmem
.
u£_lock
 = 0;

46 
	`öôbôm≠
(
v°¨t
, 
víd
);

47 
	}
}

50 
	$köô2
(*
v°¨t
, *
víd
)

52 
	`öôbôm≠
(
v°¨t
, 
víd
);

53 
kmem
.
u£_lock
 = 1;

54 
	}
}

57 
	$öôbôm≠
(*
v°¨t
, *
víd
)

59 
kmem
.
bm≠
 = 
v°¨t
;

61 *
begö
, *
íd
;

62 
begö
 = (*)
	`PGROUNDUP
((
uöt
)
v°¨t
);

63 
íd
 = (*)
	`PGROUNDDOWN
((
uöt
)
víd
);

65 
kmem
.
bm≠
->
nb
 = (()
íd
 - ()
begö
Ë>> 
PGSHIFT
;

67 
byãs
 = 
	`BYTEROUNDUP
(
kmem
.
bm≠
->
nb
Ë>> 
BYTESHIFT
;

68 
sz
 = 
byãs
 + () + (*);

70 (()
begö
 - ()
v°¨t
Ë< 
sz
) {

71 
begö
 +
PGSIZE
;

72 
kmem
.
bm≠
->
nb
--;

75 
byãs
 = 
	`BYTEROUNDUP
(
kmem
.
bm≠
->
nb
Ë>> 
BYTESHIFT
;

76 
kmem
.
bm≠
->
°¨t
 = 
begö
;

78 
	`mem£t
(
kmem
.
bm≠
->
bôm≠s
, 0, 
byãs
);

79 
	}
}

87 
	$k‰ì
(*
v
)

89 if((
uöt
)
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
(vË>
PHYSTOP
)

90 
	`∑nic
("kfree");

93 
	`mem£t
(
v
, 1, 
PGSIZE
);

95 if(
kmem
.
u£_lock
)

96 
	`acquúe
(&
kmem
.
lock
);

98 
bô
 = (*)
v
 - (*)
kmem
.
bm≠
->
°¨t
;

99 
byã
 = 
	`BYTEROUNDDOWN
(
bô
Ë>> 
BYTESHIFT
;

100 
bô
 -(
byã
 << 
BYTESHIFT
);

102 
mask
 = 
BYTESIZE
 - 
bô
 - 1;

104 *(
kmem
.
bm≠
->
bôm≠s
 + 
byã
Ë&()(~(1 << 
mask
));

106 if(
kmem
.
u£_lock
)

107 
	`ªÀa£
(&
kmem
.
lock
);

108 
	}
}

114 
	$kÆloc
()

116 *
°¨t
;

117 
i
, 
j
;

118 * 
byã
;

120 if(
kmem
.
u£_lock
)

121 
	`acquúe
(&
kmem
.
lock
);

123 
i
 = 0; i < 
kmem
.
bm≠
->
nb
;) {

124 
j
 = 
BYTESIZE
 - 1; j >0; j--, 
i
++) {

125 
byã
 = 
kmem
.
bm≠
->
bôm≠s
 + 
	`BYTEROUNDDOWN
(
i
);

126 i‡((*
byã
 & (1 << 
j
)) == 0) {

127 *
byã
 |1 << 
j
;

128 
°¨t
 = (*)(()
kmem
.
bm≠
->start

129 + ()(
i
 << 
PGSHIFT
));

130 
__UNLOCK
;

135 
__UNLOCK
:

136 if(
kmem
.
u£_lock
)

137 
	`ªÀa£
(&
kmem
.
lock
);

138  
°¨t
;

139 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbdgëc
()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
(
KBSTATP
);

16 if((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
(
KBDATAP
);

20 if(
d©a
 == 0xE0){

21 
shi·
 |
E0ESC
;

23 } if(
d©a
 & 0x80){

25 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

26 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 } if(
shi·
 & 
E0ESC
){

30 
d©a
 |= 0x80;

31 
shi·
 &~
E0ESC
;

34 
shi·
 |
shi·code
[
d©a
];

35 
shi·
 ^
toggÀcode
[
d©a
];

36 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 if(
shi·
 & 
CAPSLOCK
){

38 if('a' <
c
 && c <= 'z')

39 
c
 += 'A' - 'a';

40 if('A' <
c
 && c <= 'Z')

41 
c
 += 'a' - 'A';

43  
c
;

44 
	}
}

47 
	$kbdöå
()

49 
	`c⁄sﬁeöå
(
kbdgëc
);

50 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] =

36 [0x1D] 
CTL
,

37 [0x2A] 
SHIFT
,

38 [0x36] 
SHIFT
,

39 [0x38] 
ALT
,

40 [0x9D] 
CTL
,

41 [0xB8] 
ALT


44 
uch¨
 
	gtoggÀcode
[256] =

46 [0x3A] 
CAPSLOCK
,

47 [0x45] 
NUMLOCK
,

48 [0x46] 
SCROLLLOCK


51 
uch¨
 
	gn‹mÆm≠
[256] =

53 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 
uch¨
 
	gshi·m≠
[256] =

75 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


95 
uch¨
 
	g˘lm≠
[256] =

97 
NO
, NO, NO, NO, NO, NO, NO, NO,

98 
NO
, NO, NO, NO, NO, NO, NO, NO,

99 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

100 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

101 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

102 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

103 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

105 [0xB5] 
C
('/'),

106 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

107 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

108 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

109 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

110 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 1){

11 
	`¥ötf
(2, "usage: killÖid...\n");

12 
	`exô
();

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
();

17 
	}
}

	@ksm.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"•ölock.h
"

4 
	~"ksm.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

14 
	#NAME_MAX
 32

15 
	#NRKSM
 32

16 
	#NRPG
 1024

17 

	)

22 
	sksm_pg_t
 {

23 * 
	maddr
;

24 
	m√xt
;

28 
•ölock
 
	mlock
;

29 
	mfú°_‰ì
;

30 
ksm_pg_t
 
	mpg
[
NRPG
];

31 }
	gksmpgèbÀ
;

33 
	sksmöfo_globÆ_t
 {

34 
uöt
 
	mtŸÆ_shrg_ƒ
;

35 
uöt
 
	mtŸÆ_shpg_ƒ
;

36 }
	gksmöfo_globÆ
;

39 
	sksm_t
 {

40 
	mksm_«me
[
NAME_MAX
+1];

41 
ksmöfo_t
 
	mksmöfo
;

44 
	mfú°_pg_id
;

45 
	mid
;

46 
	m√xt_‰ì
;

50 
•ölock
 
	mlock
;

51 
	mfú°_‰ì
;

52 
ksm_t
 
	mksm
[
NRKSM
];

53 } 
	gksmèbÀ
;

56 
	$ksmöô
()

58 
i
 = 0;

60 
	`öôlock
(&
ksmèbÀ
.
lock
, "ksm");

61 
	`acquúe
(&
ksmèbÀ
.
lock
);

63 
ksmhd_t
* 
p
;

64 
ksmèbÀ
.
fú°_‰ì
 = 0;

65 
p
 = 
ksmèbÀ
.
ksm
;Ö < &ksmèbÀ.ksm[
NRKSM
];Ö++) {

66 
	`mem£t
(
p
->
ksm_«me
, 0, 
NAME_MAX
 + 1);

67 
	`mem£t
((*)&(
p
->
ksmöfo
), 0, (
ksmöfo_t
));

68 
p
->
id
 = 
i
;

69 
p
->
√xt_‰ì
 = ++
i
;

72 
p
->
fú°_pg_id
 = -1;

74 
ksmèbÀ
.
ksm
[
NRKSM
-1].
√xt_‰ì
 = -1;

76 
ksmöfo_globÆ
.
tŸÆ_shrg_ƒ
 = 0;

77 
ksmöfo_globÆ
.
tŸÆ_shpg_ƒ
 = 0;

79 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

81 
	`öôlock
(&
ksmpgèbÀ
.
lock
, "ksmpgtable");

82 
	`acquúe
(&
ksmpgèbÀ
.
lock
);

83 
ksm_pg_t
 *
pg
;

84 
i
 = 0; i < 
NRPG
; i++) {

85 
pg
 = &
ksmpgèbÀ
.pg[
i
];

86 
pg
->
addr
 = 0;

87 
pg
->
√xt
 = 
i
+1;

89 
ksmpgèbÀ
.
pg
[
i
-1].
√xt
 = -1;

90 
ksmpgèbÀ
.
fú°_‰ì
 = 0;

91 
	`ªÀa£
(&
ksmpgèbÀ
.
lock
);

92 
	}
}

95 
	$ksmgë
(* 
«me
, 
uöt
 
size
)

97 
ksmhd_t
 *
p
;

98 *
mem
;

99 
uöt
 
a
, 
pgsz
;

102 
	`acquúe
(&
ksmèbÀ
.
lock
);

104 
p
 = 
ksmèbÀ
.
ksm
;Ö < &ksmèbÀ.ksm[
NRKSM
];Ö++) {

105 i‡(
	`°∫cmp
(
p
->
ksm_«me
, 
«me
, 
NAME_MAX
) == 0)

106 
found
;

109 i‡(
ksmèbÀ
.
fú°_‰ì
 == -1)

112 
p
 = &
ksmèbÀ
.
ksm
[ksmèbÀ.
fú°_‰ì
];

113 
ksmèbÀ
.
fú°_‰ì
 = 
p
->
√xt_‰ì
;

114 
p
->
ksmöfo
.
˝id
 = 
¥oc
->
pid
;

116 
found
:

117 
p
->
ksmöfo
.
ksmsz
 = 
size
;

119 
pgsz
 = 
	`PGROUNDUP
(
p
->
ksmöfo
.
ksmsz
);

121 
	`acquúe
(&
ksmpgèbÀ
.
lock
);

123 
a
 = 0;á < 
pgsz
;á +
PGSIZE
) {

124 
mem
 = 
	`kÆloc
();

125 i‡(
mem
 == 0) {

126 
	`˝rötf
("Nÿíough s∑˚ f‹ %d sizêo‡sh¨ed mem‹y!\n", 
size
);

140 
cuºít
;

141 
cuºít
 = 
p
->
fú°_pg_id
;

142 
cuºít
 != -1) {

143 
	`k‰ì
(
cuºít
->
addr
);

144 
cuºít
 = cuºít->
√xt
;

146 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

149 
	`mem£t
(
mem
, 0, 
PGSIZE
);

151 
ksmöfo_globÆ
.
tŸÆ_shpg_ƒ
++;

157 
pgid
 = 
ksmpgèbÀ
.
fú°_‰ì
;

158 
ksm_pg_t
 *
pg
 = 
ksmpgèbÀ
.pg[
pgid
];

159 
pg
->
addr
 = 
mem
;

160 
pg
->
√xt
 = 
fú°_pg_id
;

161 
fú°_pg_id
 = 
pgid
;

164 
ksmöfo_globÆ
.
tŸÆ_shrg_ƒ
++;

166 
	`ªÀa£
(&
ksmpgèbÀ
.
lock
);

167 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

169 
id
 = 
¥oc
->
ksmhdèbÀ
.
fú°_‰ì
;

170 
¥oc
->
ksmhdèbÀ
.
ksm
[
id
].
ksmhd
 = 
p
->id + 1;

171 
¥oc
->
ksmhdèbÀ
.
fú°_‰ì
 =Öroc->ksmhdèbÀ.
ksm
[
id
].
√xt
;

172 
¥oc
->
ksmhdèbÀ
.
ksm
[
id
].
√xt
 =Öroc->ksmhdèbÀ.
fú°_id
;

173 
¥oc
->
ksmhdèbÀ
.
fú°_id
 = 
id
;

175  
p
->
id
+1;

176 
	}
}

178 
ksmhd_t
 *

179 
	$ksmhd_föd
(
hd
) {

180 
cuºít
;

181 
cuºít
 = 
¥oc
->
ksmhdèbÀ
.
fú°_id
;

182 
ksmhd_t
 *
ksmhd
;

183 
cuºít
 != -1) {

184 
ksmhd
 = &
¥oc
->
ksmhdèbÀ
.
ksm
[
cuºít
];

185 i‡(
ksmhd
->ksmhd =
hd
) {

186  
ksmhd
;

188 
cuºít
 = 
ksmhd
->
√xt
;

191 
	}
}

194 
	$ksm©èch
(
hd
, 
Êag
)

196 i‡(
hd
 < 0 || hd >
NRKSM
)

199 
	`acquúe
(&
ksmèbÀ
.
lock
);

200 
ksmhd_t
 *
p
 = &
ksmèbÀ
.
ksm
[
hd
-1];

201 
run
* 
√xt
;

202 
uöt
 
pgsz
;

203 * 
addr
;

204 
≥rm
;

206 
Êag
) {

207 
KSM_READ
:

208 
≥rm
 = 
PTE_W
 | 
PTE_U
;

210 
KSM_RDWR
:

211 
≥rm
 = 
PTE_U
;

214 
	`˝rötf
 ( "Unknown flag of ksmattach!\n" );

218 
pgsz
 = 
	`PGROUNDUP
(
p
->
ksmöfo
.
ksmsz
);

220 
ksmhd_t
 *
ksmhd
 = 
	`ksmhd_föd
(
hd
);

221 i‡(
ksmhd
 == 0)

224 
addr
 = (*)
	`PGROUNDUP
(
¥oc
->
sz
);

225 
ksmhd
->
addr
 =áddr;

227 
¥oc
->
sz
 +
pgsz
;

236 
ksm_pg_t
 *
ksmpg
;

237 
cuºít
 = 
p
->
fú°_pg_id
;

238 
cuºít
 != -1) {

239 
ksmpg
 = &
ksmpgèbÀ
.
pg
[
cuºít
];

240 
	`m≠∑ges
(
¥oc
->
pgdú
, 
addr
, 
PGSIZE
, 
	`v2p
(
ksmpg
->addr), 
≥rm
);

241 
addr
 +
PGSIZE
;

242 
cuºít
 = 
ksmpg
->
√xt
;

246 
p
->
ksmöfo
.
©èched_ƒ
++;

249 
	`acquúe
(&
tick¶ock
);

250 
p
->
ksmöfo
.
©ime
 = 
ticks
;

251 
	`ªÀa£
(&
tick¶ock
);

253 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

256 
	}
}

259 
	$ksmdëach
(
hd
)

261 i‡(
hd
 < 0 || hd >
NRKSM
)

264 
	`acquúe
(&
ksmèbÀ
.
lock
);

265 
ksmhd_t
 *
p
 = &
ksmèbÀ
.
ksm
[
hd
-1];

266 
run
* 
√xt
;

267 
uöt
 
pgsz
;

268 * 
addr
;

270 
pgsz
 = 
	`PGROUNDUP
(
p
->
ksmöfo
.
ksmsz
);

272 
ksmhd_t
 *
ksmhd
 = 
	`ksmhd_föd
(
hd
);

273 i‡(
ksmhd
 == 0)

275 
addr
 = 
ksmhd
->addr;

284 
ksm_pg_t
 *
ksmpg
;

285 
cuºít
 = 
p
->
fú°_pg_id
;

286 
cuºít
 != -1) {

287 
ksmpg
 = &
ksmpgèbÀ
.
pg
[
cuºít
];

288 
	`unm≠∑ges
(
¥oc
->
pgdú
, 
addr
, 
PGSIZE
, 
	`v2p
(
ksmpg
->addr));

289 
addr
 +
PGSIZE
;

290 
cuºít
 = 
ksmpg
->
√xt
;

294 
p
->
ksmöfo
.
©èched_ƒ
--;

297 
	`acquúe
(&
tick¶ock
);

298 
p
->
ksmöfo
.
dtime
 = 
ticks
;

299 
	`ªÀa£
(&
tick¶ock
);

301 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

304 
	}
}

307 
	$ksmöfo
(
hd
, 
ksmöfo_t
* 
öfo
)

309 
ksmhd_t
 *
p
;

311 i‡(
hd
 < 0 || hd >
NRKSM
)

314 i‡(
hd
 > 0) {

315 
p
 = &
ksmèbÀ
.
ksm
[
hd
-1];

316 
	`memmove
(
öfo
, &
p
->
ksmöfo
, (
ksmöfo_t
));

318 
öfo
->
tŸÆ_shrg_ƒ
 = 
ksmöfo_globÆ
.total_shrg_nr;

319 
öfo
->
tŸÆ_shpg_ƒ
 = 
ksmöfo_globÆ
.total_shpg_nr;

322 
	}
}

325 
	$ksmdñëe
(
hd
)

327 i‡(
hd
 < 0 || hd >
NRKSM
)

330 
ksmhd_t
 *
p
;

331 
uöt
 
pgƒ
;

333 
	`acquúe
(&
ksmèbÀ
.
lock
);

335 
p
 = &
ksmèbÀ
.
ksm
[
hd
-1];

336 
pgƒ
 = 
	`PGROUNDUP
(
p
->
ksmöfo
.
ksmsz
Ë>> 
PGSHIFT
;

339 
ksm_pg_t
 *
ksmpg
;

340 
cuºít
 = 
p
->
fú°_pg_id
;

341 
cuºít
 != -1) {

342 
ksmpg
 = &
ksmpgèbÀ
.
pg
[
cuºít
];

343 
	`k‰ì
(
ksmpg
->
addr
);

344 
cuºít
 = 
ksmpg
->
√xt
;

345 
ksmöfo_globÆ
.
tŸÆ_shpg_ƒ
--;

347 
p
->
fú°_pg_id
 = -1;

360 
ksmöfo_globÆ
.
tŸÆ_shpg_ƒ
 -
pgƒ
;

361 
ksmöfo_globÆ
.
tŸÆ_shrg_ƒ
--;

363 
p
->
√xt_‰ì
 = 
ksmèbÀ
.
fú°_‰ì
;

364 
ksmèbÀ
.
fú°_‰ì
 = 
p
->
id
;

366 
	`ªÀa£
(&
ksmèbÀ
.
lock
);

369 
	}
}

	@ksm.h

2 
	#KSM_RDWR
 0x00

	)

3 
	#KSM_READ
 0x01

	)

6 
	sksmöfo_t
 {

7 
uöt
 
	mksmsz
;

8 
	m˝id
;

9 
	mmpid
;

10 
uöt
 
	m©èched_ƒ
;

11 
uöt
 
	m©ime
;

12 
uöt
 
	mdtime
;

13 
uöt
 
	mtŸÆ_shrg_ƒ
;

14 
uöt
 
	mtŸÆ_shpg_ƒ
;

	@ksmreadme.c

1 
In
 
‹dî
 
to
 
im∂emít
 
a
 
sy°em
 
	gˇŒ
, 
we
 
√ed
Åÿ
fﬁlow
 
the
 
°ïs
 
	gbñow
:

3 1: 
Put
 
the
 
de˛¨©i⁄s
 
u£r•a˚
 
sy°em
 
ˇŒs
 
ö
 
u£r
.
h
.

4 2: 
Put
 
the
 
deföôi⁄s
 thê
sy°em
 
ˇŒs
: 
add
 
	$SYSCALL
(
«me
Ë
ö
 
usys
.
S
.

5 3: 
Put
 
the
 
sy°em
 
ˇŒs
 
numbî
 
ö
 
sysˇŒ
.
h
.

6 4: 
Put
 
the
 
sy°em
 
ˇŒ
 
ve˘‹
 
ödex
 
ö
 
sysˇŒ
 
èbÀ
 i¿sysˇŒ.
c
.

7 5: 
Im∂emít
 
the
 
sy°em
 
ˇŒs
 
ö
 
kî√l
 
	`mode
 (
deföôi⁄s
 
could
 
be
 i¿
sysfûe
.
c
). (
May
 
√ed
 
to
 
put
Åhê
de˛¨©i⁄s
 i¿
defs
.
h
)

	@ksmtest.c

1 
	~"ty≥s.h
"

2 
	~"u£r.h
"

3 
	~"ksm.h
"

5 
	#PGSIZE
 4096

6 

	)

8 
	#KSM_RDWR
 0x00

	)

9 
	#KSM_READ
 0x01

	)

12 
	$ksmöfo_dump
(
hd
, 
ksmöfo_t
 *
öfo
)

14 
	`¥ötf
(1, "KSM inf‹m©i⁄ (h™dÀr=%dËdumpög:\n", 
hd
 );

15 
	`¥ötf
(1, " --ksmsz = \t\t%d\n", 
öfo
->
ksmsz
 );

16 
	`¥ötf
(1, " --˝id = \t\t%d\n", 
öfo
->
˝id
 );

17 
	`¥ötf
(1, " --mpid = \t\t%d\n", 
öfo
->
mpid
 );

18 
	`¥ötf
(1, " --©èched_ƒ = \t%d\n", 
öfo
->
©èched_ƒ
 );

19 
	`¥ötf
(1, " --©imê\t\t%d\n", 
öfo
->
©ime
 );

20 
	`¥ötf
(1, " --dtimê\t\t%d\n", 
öfo
->
dtime
 );

21 
	`¥ötf
(1, " --tŸÆ_shrg_ƒ = \t%d\n", 
öfo
->
tŸÆ_shrg_ƒ
 );

22 
	`¥ötf
(1, " --tŸÆ_shpg_ƒ = \t%d\n", 
öfo
->
tŸÆ_shpg_ƒ
 );

23 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
hd
, 
ªt
;

30 
ksmöfo_t
 
öfo
;

32 
	`¥ötf
(1, "\n======================\n");

33 
	`¥ötf
(1, " BASIC TEST \n");

34 
	`¥ötf
(1, "======================\n");

36 
	`¥ötf
(1, "Bef‹ê¸ótög ksm,Öage†u£dÇum: %d\n", 
	`pgu£d
());

37 
	`¥ötf
(1, "Now creating ksm with 1Öage size.\n");

38 
hd
 = 
	`ksmgë
("shm1", 
PGSIZE
);

40 i‡(
hd
 > 0) {

41 
	`¥ötf
(1, "------SUCCESS: ksmgë suc˚ss, h™dÀ∏%d\n", 
hd
 );

43 
	`¥ötf
(1, "------FAILED: ksmget failed!\n" );

46 
	`¥ötf
(1, "A·î cª©ög ksm,Öage†u£dÇum: %d\n", 
	`pgu£d
());

48 
ªt
 = 
	`ksm©èch
(
hd
, 
KSM_RDWR
);

50 i‡(
ªt
 == 0) {

51 
	`¥ötf
(1, "ksmattach success!\n" );

53 
	`¥ötf
(1, "ksmattach fail!\n" );

56 
	`mem£t
((*)&
öfo
, 0, (
ksmöfo_t
));

57 
ªt
 = 
	`ksmöfo
(
hd
, &
öfo
);

58 i‡(
ªt
 == 0) {

59 
	`¥ötf
(1, "------SUCCESS: ksminfo success!\n" );

61 
	`¥ötf
(1, "------FAILED: ksminfo fail!\n" );

64 
	`ksmöfo_dump
(
hd
, &
öfo
);

66 
	`¥ötf
(1, "\n======================\n");

67 
	`¥ötf
(1, " TEST GLOBAL INFO \n");

68 
	`¥ötf
(1, "======================\n");

70 
	`mem£t
((*)&
öfo
, 0, (
ksmöfo_t
));

71 
ªt
 = 
	`ksmöfo
(0, &
öfo
);

72 
	`ksmöfo_dump
(
hd
, &
öfo
);

74 i‡(
ªt
 == 0) {

75 
	`¥ötf
(1, "------SUCCESS: ksminfo global success!\n" );

77 
	`¥ötf
(1, "------FAILED: ksminfo global fail!\n" );

81 
	`¥ötf
(1, "\n======================\n");

82 
	`¥ötf
(1, " TEST DETACH \n");

83 
	`¥ötf
(1, "======================\n");

84 
ªt
 = 
	`ksmöfo
(
hd
, &
öfo
);

85 i‡(
ªt
 >0) {

86 
	`¥ötf
(1, "ksminfo success!\n" );

88 
	`¥ötf
(1, "ksminfo fail!\n" );

90 
ﬁd™r
, 
√w™r
;

91 
ﬁd™r
 = 
öfo
.
©èched_ƒ
;

92 
	`¥ötf
(1, "Bef‹êdëachög,Çum o‡©èchedÖro˚s£s: %d\n", 
ﬁd™r
);

94 
ªt
 = 
	`ksmdëach
(
hd
);

95 i‡(
ªt
 == 0) {

96 
	`¥ötf
(1, "ksmdetach success!\n" );

98 
	`¥ötf
(1, "ksmdetach fail!\n" );

101 
	`mem£t
((*)&
öfo
, 0, (
ksmöfo_t
));

102 
ªt
 = 
	`ksmöfo
(
hd
, &
öfo
);

103 
√w™r
 = 
öfo
.
©èched_ƒ
;

104 
	`¥ötf
(1, "A·î dëachög,Çum o‡©èchedÖro˚s£s: %d\n", 
√w™r
);

106 i‡(
ﬁd™r
 - 
√w™r
 != 1) {

107 
	`¥ötf
(1, "------FAILED:Çum ofáttachedÖrocesses isÇot updated!\n");

109 
	`¥ötf
(1, "------SUCCESS:Çum ofáttachedÖrocesses isÇot updated!\n");

112 
	`¥ötf
(1, "\n======================\n");

113 
	`¥ötf
(1, " TEST DELETE \n");

114 
	`¥ötf
(1, "======================\n");

116 
ªt
 = 
	`ksmdñëe
(1);

117 i‡(
ªt
 == 0) {

118 
	`¥ötf
(1, "ksmdelete success!\n" );

120 
	`¥ötf
(1, "ksmdelete fail!\n" );

123 
	`¥ötf
(1, "Thí wêcheck whëhîÅhê¶Ÿ wôh h™dÀr=%d i†ªcyÀdágaö.\n", 
hd
 );

124 
hdﬁd
 = 
hd
;

125 
hd
 = 
	`ksmgë
("shm3", 
PGSIZE
);

126 
	`¥ötf
(1, "KSMGET f‹ shm3: hd = %d\n", 
hd
 );

129 i‡(
hd
 =
hdﬁd
) {

130 
	`¥ötf
(1, "------SUCCESS: Thê¶Ÿ wôh h™dÀr=%d i†ªcyÀd!\n", 
hd
 );

132 
	`¥ötf
(1, "------FAILED: Thê¶Ÿ wôh h™dÀr=%d i†NOTÑecyÀd!\n", 
hd
 );

135 
	`¥ötf
(1, "\n======================\n");

136 
	`¥ötf
(1, " TEST WITH LARGE MEM \n");

137 
	`¥ötf
(1, "======================\n");

139 
ﬁdpgƒ
, 
√wpgƒ
;

141 
ﬁdpgƒ
 = 
	`pgu£d
();

142 
	`¥ötf
(1, "Bef‹êgëtögÜ¨gêmem,Çum o‡∑gêu£d: %d\n", 
ﬁdpgƒ
);

143 
hd
 = 
	`ksmgë
("shm2", 400000000);

145 i‡(
hd
 > 0) {

146 
	`¥ötf
(1, "------FAILED: ksmget can get memory out of bound.\n");

148 
	`¥ötf
(1, "------SUCCESS: ksmget cannot get memory out of bound.\n");

151 
√wpgƒ
 = 
	`pgu£d
();

152 
	`¥ötf
(1, "A·î gëtögÜ¨gêmem,Çum o‡∑gêu£d: %d\n", 
√wpgƒ
);

154 i‡(
ﬁdpgƒ
 !
√wpgƒ
) {

155 
	`¥ötf
(1, "------FAILED: ksmget cannotÑecycleÖages in failedállocation.\n");

157 
	`¥ötf
(1, "------SUCCESS: ksmget canÑecycleÖages in failedállocation.\n");

160 
	`exô
();

161 
	}
}

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"memœyout.h
"

7 
	~"å≠s.h
"

8 
	~"mmu.h
"

9 
	~"x86.h
"

12 
	#ID
 (0x0020/4)

13 
	#VER
 (0x0030/4)

14 
	#TPR
 (0x0080/4)

15 
	#EOI
 (0x00B0/4)

16 
	#SVR
 (0x00F0/4)

17 
	#ENABLE
 0x00000100

18 
	#ESR
 (0x0280/4)

19 
	#ICRLO
 (0x0300/4)

20 
	#INIT
 0x00000500

21 
	#STARTUP
 0x00000600

22 
	#DELIVS
 0x00001000

23 
	#ASSERT
 0x00004000

24 
	#DEASSERT
 0x00000000

	)

25 
	#LEVEL
 0x00008000

26 
	#BCAST
 0x00080000

27 
	#BUSY
 0x00001000

	)

28 
	#FIXED
 0x00000000

	)

29 
	#ICRHI
 (0x0310/4)

30 
	#TIMER
 (0x0320/4)

31 
	#X1
 0x0000000B

32 
	#PERIODIC
 0x00020000

33 
	#PCINT
 (0x0340/4)

34 
	#LINT0
 (0x0350/4)

35 
	#LINT1
 (0x0360/4)

36 
	#ERROR
 (0x0370/4)

37 
	#MASKED
 0x00010000

38 
	#TICR
 (0x0380/4)

39 
	#TCCR
 (0x0390/4)

40 
	#TDCR
 (0x03E0/4)

41 

	)

42 vﬁ©ûê
uöt
 *
	gœpic
;

45 
	$œpicw
(
ödex
, 
vÆue
)

47 
œpic
[
ödex
] = 
vÆue
;

48 
œpic
[
ID
];

49 
	}
}

53 
	$œpicöô
()

55 if(!
œpic
)

59 
	`œpicw
(
SVR
, 
ENABLE
 | (
T_IRQ0
 + 
IRQ_SPURIOUS
));

65 
	`œpicw
(
TDCR
, 
X1
);

66 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
T_IRQ0
 + 
IRQ_TIMER
));

67 
	`œpicw
(
TICR
, 10000000);

70 
	`œpicw
(
LINT0
, 
MASKED
);

71 
	`œpicw
(
LINT1
, 
MASKED
);

75 if(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

76 
	`œpicw
(
PCINT
, 
MASKED
);

79 
	`œpicw
(
ERROR
, 
T_IRQ0
 + 
IRQ_ERROR
);

82 
	`œpicw
(
ESR
, 0);

83 
	`œpicw
(
ESR
, 0);

86 
	`œpicw
(
EOI
, 0);

89 
	`œpicw
(
ICRHI
, 0);

90 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

91 
œpic
[
ICRLO
] & 
DELIVS
)

95 
	`œpicw
(
TPR
, 0);

96 
	}
}

99 
	$˝unum
()

106 if(
	`ªadeÊags
()&
FL_IF
){

107 
n
;

108 if(
n
++ == 0)

109 
	`˝rötf
("cpu called from %x with interruptsÉnabled\n",

110 
	`__buûtö_ªtu∫_addªss
(0));

113 if(
œpic
)

114  
œpic
[
ID
]>>24;

116 
	}
}

120 
	$œpi˚oi
()

122 if(
œpic
)

123 
	`œpicw
(
EOI
, 0);

124 
	}
}

129 
	$mi¸odñay
(
us
)

131 
	}
}

133 
	#IO_RTC
 0x70

	)

138 
	$œpic°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

140 
i
;

141 
ush‹t
 *
wrv
;

146 
	`outb
(
IO_RTC
, 0xF);

147 
	`outb
(
IO_RTC
+1, 0x0A);

148 
wrv
 = (
ush‹t
*)
	`P2V
((0x40<<4 | 0x67));

149 
wrv
[0] = 0;

150 
wrv
[1] = 
addr
 >> 4;

154 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

155 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

156 
	`mi¸odñay
(200);

157 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

158 
	`mi¸odñay
(100);

165 
i
 = 0; i < 2; i++){

166 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

167 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

168 
	`mi¸odñay
(200);

170 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`¥ötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
();

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`¥ötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
();

15 
	}
}

	@log.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"•ölock.h
"

5 
	~"fs.h
"

6 
	~"buf.h
"

36 
	sloghódî
 {

37 
	mn
;

38 
	m£˘‹
[
LOGSIZE
];

41 
	slog
 {

42 
•ölock
 
	mlock
;

43 
	m°¨t
;

44 
	msize
;

45 
	mbusy
;

46 
	mdev
;

47 
loghódî
 
	mlh
;

49 
log
 
	glog
;

51 
ªcovî_‰om_log
();

54 
	$öôlog
()

56 i‡((
loghódî
Ë>
BSIZE
)

57 
	`∑nic
("initlog:Åoo bigÜogheader");

59 
su≥rblock
 
sb
;

60 
	`öôlock
(&
log
.
lock
, "log");

61 
	`ªadsb
(
ROOTDEV
, &
sb
);

62 
log
.
°¨t
 = 
sb
.
size
 - sb.
∆og
;

63 
log
.
size
 = 
sb
.
∆og
;

64 
log
.
dev
 = 
ROOTDEV
;

65 
	`ªcovî_‰om_log
();

66 
	}
}

70 
	$ö°Æl_å™s
()

72 
èû
;

74 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

75 
buf
 *
lbuf
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

76 
buf
 *
dbuf
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
£˘‹
[
èû
]);

77 
	`memmove
(
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

78 
	`bwrôe
(
dbuf
);

79 
	`bªl£
(
lbuf
);

80 
	`bªl£
(
dbuf
);

82 
	}
}

86 
	$ªad_hód
()

88 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

89 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

90 
i
;

91 
log
.
lh
.
n
 =Üh->n;

92 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

93 
log
.
lh
.
£˘‹
[
i
] =Üh->sector[i];

95 
	`bªl£
(
buf
);

96 
	}
}

102 
	$wrôe_hód
()

104 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

105 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

106 
i
;

107 
hb
->
n
 = 
log
.
lh
.n;

108 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

109 
hb
->
£˘‹
[
i
] = 
log
.
lh
.sector[i];

111 
	`bwrôe
(
buf
);

112 
	`bªl£
(
buf
);

113 
	}
}

116 
	$ªcovî_‰om_log
()

118 
	`ªad_hód
();

119 
	`ö°Æl_å™s
();

120 
log
.
lh
.
n
 = 0;

121 
	`wrôe_hód
();

122 
	}
}

125 
	$begö_å™s
()

127 
	`acquúe
(&
log
.
lock
);

128 
log
.
busy
) {

129 
	`¶ìp
(&
log
, &log.
lock
);

131 
log
.
busy
 = 1;

132 
	`ªÀa£
(&
log
.
lock
);

133 
	}
}

136 
	$commô_å™s
()

138 i‡(
log
.
lh
.
n
 > 0) {

139 
	`wrôe_hód
();

140 
	`ö°Æl_å™s
();

141 
log
.
lh
.
n
 = 0;

142 
	`wrôe_hód
();

145 
	`acquúe
(&
log
.
lock
);

146 
log
.
busy
 = 0;

147 
	`wakeup
(&
log
);

148 
	`ªÀa£
(&
log
.
lock
);

149 
	}
}

160 
	$log_wrôe
(
buf
 *
b
)

162 
i
;

164 i‡(
log
.
lh
.
n
 >
LOGSIZE
 ||Üog.lh.¿>log.
size
 - 1)

165 
	`∑nic
("too bigáÅransaction");

166 i‡(!
log
.
busy
)

167 
	`∑nic
("write outside ofÅrans");

169 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

170 i‡(
log
.
lh
.
£˘‹
[
i
] =
b
->sector)

173 
log
.
lh
.
£˘‹
[
i
] = 
b
->sector;

174 
buf
 *
lbuf
 = 
	`bªad
(
b
->
dev
, 
log
.
°¨t
+
i
+1);

175 
	`memmove
(
lbuf
->
d©a
, 
b
->d©a, 
BSIZE
);

176 
	`bwrôe
(
lbuf
);

177 
	`bªl£
(
lbuf
);

178 i‡(
i
 =
log
.
lh
.
n
)

179 
log
.
lh
.
n
++;

180 
b
->
Êags
 |
B_DIRTY
;

181 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`¥ötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`¥ötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
(1, "ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
(1, "ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

78 if(
¨gc
 < 2){

79 
	`ls
(".");

80 
	`exô
();

82 
i
=1; i<
¨gc
; i++)

83 
	`ls
(
¨gv
[
i
]);

84 
	`exô
();

85 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

9 
°¨tŸhîs
();

10 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
pde_t
 *
kpgdú
;

12 
íd
[];

18 
	$maö
()

20 
	`köô1
(
íd
, 
	`P2V
(4*1024*1024));

21 
	`kvmÆloc
();

22 
	`mpöô
();

23 
	`œpicöô
();

24 
	`£göô
();

25 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
˝u
->
id
);

26 
	`picöô
();

27 
	`iﬂpicöô
();

28 
	`c⁄sﬁeöô
();

29 
	`u¨töô
();

30 
	`pöô
();

31 
	`tvöô
();

32 
	`böô
();

33 
	`fûeöô
();

34 
	`iöô
();

35 
	`ideöô
();

36 if(!
ismp
)

37 
	`timîöô
();

38 
	`°¨tŸhîs
();

39 
	`köô2
(
	`P2V
(4*1024*1024), P2V(
PHYSTOP
));

40 
	`ksmöô
();

41 
	`£möô
();

42 
	`u£röô
();

44 
	`mpmaö
();

45 
	}
}

49 
	$m≥¡î
()

51 
	`swôchkvm
();

52 
	`£göô
();

53 
	`œpicöô
();

54 
	`mpmaö
();

55 
	}
}

59 
	$mpmaö
()

61 
	`˝rötf
("˝u%d: sèπög\n", 
˝u
->
id
);

62 
	`idtöô
();

63 
	`xchg
(&
˝u
->
°¨ãd
, 1);

64 
	`scheduÀr
();

65 
	}
}

67 
pde_t
 
	gíåypgdú
[];

71 
	$°¨tŸhîs
()

73 
uch¨
 
_bö¨y_íåyŸhî_°¨t
[], 
_bö¨y_íåyŸhî_size
[];

74 
uch¨
 *
code
;

75 
˝u
 *
c
;

76 *
°ack
;

81 
code
 = 
	`p2v
(0x7000);

82 
	`memmove
(
code
, 
_bö¨y_íåyŸhî_°¨t
, (
uöt
)
_bö¨y_íåyŸhî_size
);

84 
c
 = 
˝us
; c < cpus+
n˝u
; c++){

85 if(
c
 =
˝us
+
	`˝unum
())

91 
°ack
 = 
	`kÆloc
();

92 *(**)(
code
-4Ë
°ack
 + 
KSTACKSIZE
;

93 *(**)(
code
-8Ë
m≥¡î
;

94 *(**)(
code
-12Ë(*Ë
	`v2p
(
íåypgdú
);

96 
	`œpic°¨èp
(
c
->
id
, 
	`v2p
(
code
));

99 
c
->
°¨ãd
 == 0)

102 
	}
}

108 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

109 
pde_t
 
íåypgdú
[
NPDENTRIES
] = {

111 [0] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

113 [
KERNBASE
>>
PDXSHIFT
] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

114 
	}
};

	@memide.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
uch¨
 
_bö¨y_fs_img_°¨t
[], 
_bö¨y_fs_img_size
[];

16 
	gdisksize
;

17 
uch¨
 *
	gmemdisk
;

20 
	$ideöô
()

22 
memdisk
 = 
_bö¨y_fs_img_°¨t
;

23 
disksize
 = (
uöt
)
_bö¨y_fs_img_size
/512;

24 
	}
}

28 
	$ideöå
()

31 
	}
}

37 
	$idîw
(
buf
 *
b
)

39 
uch¨
 *
p
;

41 if(!(
b
->
Êags
 & 
B_BUSY
))

42 
	`∑nic
("iderw: bufÇot busy");

43 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

44 
	`∑nic
("iderw:ÇothingÅo do");

45 if(
b
->
dev
 != 1)

46 
	`∑nic
("iderw:ÑequestÇot for disk 1");

47 if(
b
->
£˘‹
 >
disksize
)

48 
	`∑nic
("iderw: sector out ofÑange");

50 
p
 = 
memdisk
 + 
b
->
£˘‹
*512;

52 if(
b
->
Êags
 & 
B_DIRTY
){

53 
b
->
Êags
 &~
B_DIRTY
;

54 
	`memmove
(
p
, 
b
->
d©a
, 512);

56 
	`memmove
(
b
->
d©a
, 
p
, 512);

57 
b
->
Êags
 |
B_VALID
;

58 
	}
}

	@memlayout.h

3 
	#EXTMEM
 0x100000

4 
	#PHYSTOP
 0xE000000

5 
	#DEVSPACE
 0xFE000000

6 

	)

8 
	#KERNBASE
 0x80000000

9 
	#KERNLINK
 (
KERNBASE
+
EXTMEM
)

10 

	)

11 #i‚de‡
__ASSEMBLER__


13 
ölöe
 
uöt
 
	$v2p
(*
a
Ë{  ((
uöt
Ë◊)Ë- 
KERNBASE
; 
	}
}

14 
ölöe
 *
	$p2v
(
uöt
 
a
Ë{  (*Ë(◊Ë+ 
KERNBASE
); 
	}
}

18 
	#V2P
(
a
Ë(((
uöt
Ë◊)Ë- 
KERNBASE
)

	)

19 
	#P2V
(
a
Ë(((*Ë◊)Ë+ 
KERNBASE
)

	)

21 
	#V2P_WO
(
x
Ë((xË- 
KERNBASE
)

22 
	#P2V_WO
(
x
Ë((xË+ 
KERNBASE
)

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage: mkdir files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"ty≥s.h
"

	)

10 
	~"fs.h
"

11 
	~"°©.h
"

12 
	~"∑øm.h
"

14 
	#°©ic_as£π
(
a
, 
b
Ëdÿ{ 0Ë0: ◊): ; } 0)

	)

16 
	gnblocks
 = 985;

17 
	g∆og
 = 
LOGSIZE
;

18 
	gnöodes
 = 200;

19 
	gsize
 = 1024;

21 
	gfsfd
;

22 
su≥rblock
 
	gsb
;

23 
	gzî€s
[512];

24 
uöt
 
	g‰ìblock
;

25 
uöt
 
	gu£dblocks
;

26 
uöt
 
	gbôblocks
;

27 
uöt
 
	g‰ìöode
 = 1;

29 
bÆloc
();

30 
w£˘
(
uöt
, *);

31 
wöode
(
uöt
, 
döode
*);

32 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

33 
r£˘
(
uöt
 
£c
, *
buf
);

34 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

35 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

38 
ush‹t


39 
	$xsh‹t
(
ush‹t
 
x
)

41 
ush‹t
 
y
;

42 
uch¨
 *
a
 = (uch¨*)&
y
;

43 
a
[0] = 
x
;

44 
a
[1] = 
x
 >> 8;

45  
y
;

46 
	}
}

48 
uöt


49 
	$xöt
(
uöt
 
x
)

51 
uöt
 
y
;

52 
uch¨
 *
a
 = (uch¨*)&
y
;

53 
a
[0] = 
x
;

54 
a
[1] = 
x
 >> 8;

55 
a
[2] = 
x
 >> 16;

56 
a
[3] = 
x
 >> 24;

57  
y
;

58 
	}
}

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
i
, 
cc
, 
fd
;

64 
uöt
 
roŸöo
, 
öum
, 
off
;

65 
dúít
 
de
;

66 
buf
[512];

67 
döode
 
dö
;

70 
	`°©ic_as£π
(() == 4, "Integers must be 4 bytes!");

72 if(
¨gc
 < 2){

73 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

74 
	`exô
(1);

77 
	`as£π
((512 % (
döode
)) == 0);

78 
	`as£π
((512 % (
dúít
)) == 0);

80 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

81 if(
fsfd
 < 0){

82 
	`≥º‹
(
¨gv
[1]);

83 
	`exô
(1);

86 
sb
.
size
 = 
	`xöt
(size);

87 
sb
.
nblocks
 = 
	`xöt
(nblocks);

88 
sb
.
nöodes
 = 
	`xöt
(ninodes);

89 
sb
.
∆og
 = 
	`xöt
(nlog);

91 
bôblocks
 = 
size
/(512*8) + 1;

92 
u£dblocks
 = 
nöodes
 / 
IPB
 + 3 + 
bôblocks
;

93 
‰ìblock
 = 
u£dblocks
;

95 
	`¥ötf
("u£d %d (bô %dÇöodê%zuË‰ì %uÜog %uÅŸÆ %d\n", 
u£dblocks
,

96 
bôblocks
, 
nöodes
/
IPB
 + 1, 
‰ìblock
, 
∆og
, 
nblocks
+
u£dblocks
+nlog);

98 
	`as£π
(
nblocks
 + 
u£dblocks
 + 
∆og
 =
size
);

100 
i
 = 0; i < 
nblocks
 + 
u£dblocks
 + 
∆og
; i++)

101 
	`w£˘
(
i
, 
zî€s
);

103 
	`mem£t
(
buf
, 0, (buf));

104 
	`memmove
(
buf
, &
sb
, (sb));

105 
	`w£˘
(1, 
buf
);

107 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

108 
	`as£π
(
roŸöo
 =
ROOTINO
);

110 
	`bzîo
(&
de
, (de));

111 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

112 
	`°r˝y
(
de
.
«me
, ".");

113 
	`üµíd
(
roŸöo
, &
de
, (de));

115 
	`bzîo
(&
de
, (de));

116 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

117 
	`°r˝y
(
de
.
«me
, "..");

118 
	`üµíd
(
roŸöo
, &
de
, (de));

120 
i
 = 2; i < 
¨gc
; i++){

121 
	`as£π
(
	`ödex
(
¨gv
[
i
], '/') == 0);

123 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

124 
	`≥º‹
(
¨gv
[
i
]);

125 
	`exô
(1);

132 if(
¨gv
[
i
][0] == '_')

133 ++
¨gv
[
i
];

135 
öum
 = 
	`üŒoc
(
T_FILE
);

137 
	`bzîo
(&
de
, (de));

138 
de
.
öum
 = 
	`xsh‹t
(inum);

139 
	`°∫˝y
(
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

140 
	`üµíd
(
roŸöo
, &
de
, (de));

142 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

143 
	`üµíd
(
öum
, 
buf
, 
cc
);

145 
	`˛o£
(
fd
);

149 
	`röode
(
roŸöo
, &
dö
);

150 
off
 = 
	`xöt
(
dö
.
size
);

151 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

152 
dö
.
size
 = 
	`xöt
(
off
);

153 
	`wöode
(
roŸöo
, &
dö
);

155 
	`bÆloc
(
u£dblocks
);

157 
	`exô
(0);

158 
	}
}

161 
	$w£˘
(
uöt
 
£c
, *
buf
)

163 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

164 
	`≥º‹
("lseek");

165 
	`exô
(1);

167 if(
	`wrôe
(
fsfd
, 
buf
, 512) != 512){

168 
	`≥º‹
("write");

169 
	`exô
(1);

171 
	}
}

173 
uöt


174 
	$i2b
(
uöt
 
öum
)

176  (
öum
 / 
IPB
) + 2;

177 
	}
}

180 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

182 
buf
[512];

183 
uöt
 
bn
;

184 
döode
 *
dù
;

186 
bn
 = 
	`i2b
(
öum
);

187 
	`r£˘
(
bn
, 
buf
);

188 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

189 *
dù
 = *
ù
;

190 
	`w£˘
(
bn
, 
buf
);

191 
	}
}

194 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

196 
buf
[512];

197 
uöt
 
bn
;

198 
döode
 *
dù
;

200 
bn
 = 
	`i2b
(
öum
);

201 
	`r£˘
(
bn
, 
buf
);

202 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

203 *
ù
 = *
dù
;

204 
	}
}

207 
	$r£˘
(
uöt
 
£c
, *
buf
)

209 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

210 
	`≥º‹
("lseek");

211 
	`exô
(1);

213 if(
	`ªad
(
fsfd
, 
buf
, 512) != 512){

214 
	`≥º‹
("read");

215 
	`exô
(1);

217 
	}
}

219 
uöt


220 
	$üŒoc
(
ush‹t
 
ty≥
)

222 
uöt
 
öum
 = 
‰ìöode
++;

223 
döode
 
dö
;

225 
	`bzîo
(&
dö
, (din));

226 
dö
.
ty≥
 = 
	`xsh‹t
(type);

227 
dö
.
∆ök
 = 
	`xsh‹t
(1);

228 
dö
.
size
 = 
	`xöt
(0);

229 
	`wöode
(
öum
, &
dö
);

230  
öum
;

231 
	}
}

234 
	$bÆloc
(
u£d
)

236 
uch¨
 
buf
[512];

237 
i
;

239 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

240 
	`as£π
(
u£d
 < 512*8);

241 
	`bzîo
(
buf
, 512);

242 
i
 = 0; i < 
u£d
; i++){

243 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

245 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %zu\n", 
nöodes
/
IPB
 + 3);

246 
	`w£˘
(
nöodes
 / 
IPB
 + 3, 
buf
);

247 
	}
}

249 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

252 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

254 *
p
 = (*)
xp
;

255 
uöt
 
fbn
, 
off
, 
n1
;

256 
döode
 
dö
;

257 
buf
[512];

258 
uöt
 
ödúe˘
[
NINDIRECT
];

259 
uöt
 
x
;

261 
	`röode
(
öum
, &
dö
);

263 
off
 = 
	`xöt
(
dö
.
size
);

264 
n
 > 0){

265 
fbn
 = 
off
 / 512;

266 
	`as£π
(
fbn
 < 
MAXFILE
);

267 if(
fbn
 < 
NDIRECT
){

268 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0){

269 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

270 
u£dblocks
++;

272 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

274 if(
	`xöt
(
dö
.
addrs
[
NDIRECT
]) == 0){

276 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

277 
u£dblocks
++;

280 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

281 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0){

282 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

283 
u£dblocks
++;

284 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

286 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

288 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 512 - 
off
);

289 
	`r£˘
(
x
, 
buf
);

290 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 512), 
n1
);

291 
	`w£˘
(
x
, 
buf
);

292 
n
 -
n1
;

293 
off
 +
n1
;

294 
p
 +
n1
;

296 
dö
.
size
 = 
	`xöt
(
off
);

297 
	`wöode
(
öum
, &
dö
);

298 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#CR0_PE
 0x00000001

29 
	#CR0_MP
 0x00000002

30 
	#CR0_EM
 0x00000004

31 
	#CR0_TS
 0x00000008

32 
	#CR0_ET
 0x00000010

33 
	#CR0_NE
 0x00000020

34 
	#CR0_WP
 0x00010000

35 
	#CR0_AM
 0x00040000

36 
	#CR0_NW
 0x20000000

37 
	#CR0_CD
 0x40000000

38 
	#CR0_PG
 0x80000000

39 

	)

40 
	#CR4_PSE
 0x00000010

41 

	)

42 
	#SEG_KCODE
 1

43 
	#SEG_KDATA
 2

44 
	#SEG_KCPU
 3

45 
	#SEG_UCODE
 4

46 
	#SEG_UDATA
 5

47 
	#SEG_TSS
 6

48 

	)

50 #i‚de‡
__ASSEMBLER__


52 
	s£gdesc
 {

53 
uöt
 
	mlim_15_0
 : 16;

54 
uöt
 
	mba£_15_0
 : 16;

55 
uöt
 
	mba£_23_16
 : 8;

56 
uöt
 
	mty≥
 : 4;

57 
uöt
 
	ms
 : 1;

58 
uöt
 
	md∂
 : 2;

59 
uöt
 
	mp
 : 1;

60 
uöt
 
	mlim_19_16
 : 4;

61 
uöt
 
	mavl
 : 1;

62 
uöt
 
	mrsv1
 : 1;

63 
uöt
 
	mdb
 : 1;

64 
uöt
 
	mg
 : 1;

65 
uöt
 
	mba£_31_24
 : 8;

69 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

70 { ((
lim
Ë>> 12Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

71 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

72 (
uöt
)(
lim
Ë>> 28, 0, 0, 1, 1, (uöt)(
ba£
Ë>> 24 }

	)

73 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

74 { (
lim
Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

75 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

76 (
uöt
)(
lim
Ë>> 16, 0, 0, 1, 0, (uöt)(
ba£
Ë>> 24 }

	)

79 
	#DPL_USER
 0x3

80 

	)

82 
	#STA_X
 0x8

83 
	#STA_E
 0x4

84 
	#STA_C
 0x4

85 
	#STA_W
 0x2

86 
	#STA_R
 0x2

87 
	#STA_A
 0x1

88 

	)

90 
	#STS_T16A
 0x1

91 
	#STS_LDT
 0x2

92 
	#STS_T16B
 0x3

93 
	#STS_CG16
 0x4

94 
	#STS_TG
 0x5

95 
	#STS_IG16
 0x6

96 
	#STS_TG16
 0x7

97 
	#STS_T32A
 0x9

98 
	#STS_T32B
 0xB

99 
	#STS_CG32
 0xC

100 
	#STS_IG32
 0xE

101 
	#STS_TG32
 0xF

102 

	)

112 
	#PDX
(
va
Ë(((
uöt
)(vaË>> 
PDXSHIFT
Ë& 0x3FF)

	)

115 
	#PTX
(
va
Ë(((
uöt
)(vaË>> 
PTXSHIFT
Ë& 0x3FF)

	)

118 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöt
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

121 
	#NPDENTRIES
 1024

122 
	#NPTENTRIES
 1024

123 
	#PGSIZE
 4096

124 

	)

125 
	#PGSHIFT
 12

126 
	#PTXSHIFT
 12

127 
	#PDXSHIFT
 22

128 

	)

129 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

130 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

133 
	#PTE_P
 0x001

134 
	#PTE_W
 0x002

135 
	#PTE_U
 0x004

136 
	#PTE_PWT
 0x008

137 
	#PTE_PCD
 0x010

138 
	#PTE_A
 0x020

139 
	#PTE_D
 0x040

140 
	#PTE_PS
 0x080

141 
	#PTE_MBZ
 0x180

142 

	)

144 
	#PTE_ADDR
(
±e
Ë((
uöt
)’ãË& ~0xFFF)

	)

146 #i‚de‡
__ASSEMBLER__


147 
uöt
 
	t±e_t
;

150 
	sèsk°©e
 {

151 
uöt
 
	mlök
;

152 
uöt
 
	me•0
;

153 
ush‹t
 
	mss0
;

154 
ush‹t
 
	m∑ddög1
;

155 
uöt
 *
	me•1
;

156 
ush‹t
 
	mss1
;

157 
ush‹t
 
	m∑ddög2
;

158 
uöt
 *
	me•2
;

159 
ush‹t
 
	mss2
;

160 
ush‹t
 
	m∑ddög3
;

161 *
	m¸3
;

162 
uöt
 *
	meù
;

163 
uöt
 
	meÊags
;

164 
uöt
 
	móx
;

165 
uöt
 
	mecx
;

166 
uöt
 
	medx
;

167 
uöt
 
	mebx
;

168 
uöt
 *
	me•
;

169 
uöt
 *
	mebp
;

170 
uöt
 
	mesi
;

171 
uöt
 
	medi
;

172 
ush‹t
 
	mes
;

173 
ush‹t
 
	m∑ddög4
;

174 
ush‹t
 
	mcs
;

175 
ush‹t
 
	m∑ddög5
;

176 
ush‹t
 
	mss
;

177 
ush‹t
 
	m∑ddög6
;

178 
ush‹t
 
	mds
;

179 
ush‹t
 
	m∑ddög7
;

180 
ush‹t
 
	mfs
;

181 
ush‹t
 
	m∑ddög8
;

182 
ush‹t
 
	mgs
;

183 
ush‹t
 
	m∑ddög9
;

184 
ush‹t
 
	mldt
;

185 
ush‹t
 
	m∑ddög10
;

186 
ush‹t
 
	mt
;

187 
ush‹t
 
	miomb
;

192 
	sg©edesc
 {

193 
uöt
 
	moff_15_0
 : 16;

194 
uöt
 
	mcs
 : 16;

195 
uöt
 
	m¨gs
 : 5;

196 
uöt
 
	mrsv1
 : 3;

197 
uöt
 
	mty≥
 : 4;

198 
uöt
 
	ms
 : 1;

199 
uöt
 
	md∂
 : 2;

200 
uöt
 
	mp
 : 1;

201 
uöt
 
	moff_31_16
 : 16;

212 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

214 (
g©e
).
off_15_0
 = (
uöt
)(
off
) & 0xffff; \

215 (
g©e
).
cs
 = (
£l
); \

216 (
g©e
).
¨gs
 = 0; \

217 (
g©e
).
rsv1
 = 0; \

218 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

219 (
g©e
).
s
 = 0; \

220 (
g©e
).
d∂
 = (
d
); \

221 (
g©e
).
p
 = 1; \

222 (
g©e
).
off_31_16
 = (
uöt
)(
off
) >> 16; \

223 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mp.h
"

10 
	~"x86.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

14 
˝u
 
	g˝us
[
NCPU
];

15 
˝u
 *
	gb˝u
;

16 
	gismp
;

17 
	gn˝u
;

18 
uch¨
 
	giﬂpicid
;

21 
	$mpb˝u
()

23  
b˝u
-
˝us
;

24 
	}
}

26 
uch¨


27 
	$sum
(
uch¨
 *
addr
, 
Àn
)

29 
i
, 
sum
;

31 
sum
 = 0;

32 
i
=0; i<
Àn
; i++)

33 
sum
 +
addr
[
i
];

34  
sum
;

35 
	}
}

38 
mp
*

39 
	$mp£¨ch1
(
uöt
 
a
, 
Àn
)

41 
uch¨
 *
e
, *
p
, *
addr
;

43 
addr
 = 
	`p2v
(
a
);

44 
e
 = 
addr
+
Àn
;

45 
p
 = 
addr
;Ö < 
e
;Ö +(
mp
))

46 if(
	`memcmp
(
p
, "_MP_", 4Ë=0 && 
	`sum
’, (
mp
)) == 0)

47  (
mp
*)
p
;

49 
	}
}

56 
mp
*

57 
	$mp£¨ch
()

59 
uch¨
 *
bda
;

60 
uöt
 
p
;

61 
mp
 *mp;

63 
bda
 = (
uch¨
 *Ë
	`P2V
(0x400);

64 if((
p
 = ((
bda
[0x0F]<<8)| bda[0x0E]) << 4)){

65 if((
mp
 = 
	`mp£¨ch1
(
p
, 1024)))

66  
mp
;

68 
p
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

69 if((
mp
 = 
	`mp£¨ch1
(
p
-1024, 1024)))

70  
mp
;

72  
	`mp£¨ch1
(0xF0000, 0x10000);

73 
	}
}

80 
mpc⁄f
*

81 
	$mpc⁄fig
(
mp
 **
pmp
)

83 
mpc⁄f
 *
c⁄f
;

84 
mp
 *mp;

86 if((
mp
 = 
	`mp£¨ch
()Ë=0 || mp->
phyßddr
 == 0)

88 
c⁄f
 = (
mpc⁄f
*Ë
	`p2v
((
uöt
Ë
mp
->
phyßddr
);

89 if(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0)

91 if(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

93 if(
	`sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

95 *
pmp
 = 
mp
;

96  
c⁄f
;

97 
	}
}

100 
	$mpöô
()

102 
uch¨
 *
p
, *
e
;

103 
mp
 *mp;

104 
mpc⁄f
 *
c⁄f
;

105 
mµroc
 *
¥oc
;

106 
mpiﬂpic
 *
iﬂpic
;

108 
b˝u
 = &
˝us
[0];

109 if((
c⁄f
 = 
	`mpc⁄fig
(&
mp
)) == 0)

111 
ismp
 = 1;

112 
œpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

113 
p
=(
uch¨
*)(
c⁄f
+1), 
e
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

114 *
p
){

115 
MPPROC
:

116 
¥oc
 = (
mµroc
*)
p
;

117 if(
n˝u
 !
¥oc
->
≠icid
){

118 
	`˝rötf
("mpöô:Ç˝u=%dápicid=%d\n", 
n˝u
, 
¥oc
->
≠icid
);

119 
ismp
 = 0;

121 if(
¥oc
->
Êags
 & 
MPBOOT
)

122 
b˝u
 = &
˝us
[
n˝u
];

123 
˝us
[
n˝u
].
id
 =Çcpu;

124 
n˝u
++;

125 
p
 +(
mµroc
);

127 
MPIOAPIC
:

128 
iﬂpic
 = (
mpiﬂpic
*)
p
;

129 
iﬂpicid
 = 
iﬂpic
->
≠i˙o
;

130 
p
 +(
mpiﬂpic
);

132 
MPBUS
:

133 
MPIOINTR
:

134 
MPLINTR
:

135 
p
 += 8;

138 
	`˝rötf
("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

139 
ismp
 = 0;

142 if(!
ismp
){

144 
n˝u
 = 1;

145 
œpic
 = 0;

146 
iﬂpicid
 = 0;

150 if(
mp
->
im¸p
){

153 
	`outb
(0x22, 0x70);

154 
	`outb
(0x23, 
	`öb
(0x23) | 1);

156 
	}
}

	@mp.h

3 
	smp
 {

4 
uch¨
 
	msig«tuª
[4];

5 *
	mphyßddr
;

6 
uch¨
 
	mÀngth
;

7 
uch¨
 
	m•e¸ev
;

8 
uch¨
 
	mchecksum
;

9 
uch¨
 
	mty≥
;

10 
uch¨
 
	mim¸p
;

11 
uch¨
 
	mª£rved
[3];

14 
	smpc⁄f
 {

15 
uch¨
 
	msig«tuª
[4];

16 
ush‹t
 
	mÀngth
;

17 
uch¨
 
	mvîsi⁄
;

18 
uch¨
 
	mchecksum
;

19 
uch¨
 
	m¥odu˘
[20];

20 
uöt
 *
	m€mèbÀ
;

21 
ush‹t
 
	m€mÀngth
;

22 
ush‹t
 
	míåy
;

23 
uöt
 *
	mœpiˇddr
;

24 
ush‹t
 
	mxÀngth
;

25 
uch¨
 
	mxchecksum
;

26 
uch¨
 
	mª£rved
;

29 
	smµroc
 {

30 
uch¨
 
	mty≥
;

31 
uch¨
 
	m≠icid
;

32 
uch¨
 
	mvîsi⁄
;

33 
uch¨
 
	mÊags
;

34 
	#MPBOOT
 0x02

35 
uch¨
 
sig«tuª
[4];

36 
uöt
 
„©uª
;

37 
uch¨
 
ª£rved
[8];

	)

40 
	smpiﬂpic
 {

41 
uch¨
 
	mty≥
;

42 
uch¨
 
	m≠i˙o
;

43 
uch¨
 
	mvîsi⁄
;

44 
uch¨
 
	mÊags
;

45 
uöt
 *
	maddr
;

49 
	#MPPROC
 0x00

50 
	#MPBUS
 0x01

51 
	#MPIOAPIC
 0x02

52 
	#MPIOINTR
 0x03

53 
	#MPLINTR
 0x04

54 

	)

	@param.h

1 
	#NPROC
 64

2 
	#KSTACKSIZE
 4096

3 
	#NCPU
 8

4 
	#NOFILE
 16

5 
	#NFILE
 100

6 
	#NBUF
 10

7 
	#NINODE
 50

8 
	#NDEV
 10

9 
	#ROOTDEV
 1

10 
	#MAXARG
 32

11 
	#LOGSIZE
 10

12 

	)

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 
	$pic£tmask
(
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
(
IO_PIC1
+1, 
mask
);

22 
	`outb
(
IO_PIC2
+1, 
mask
 >> 8);

23 
	}
}

26 
	$pi˚«bÀ
(
úq
)

28 
	`pic£tmask
(
úqmask
 & ~(1<<
úq
));

29 
	}
}

33 
	$picöô
()

36 
	`outb
(
IO_PIC1
+1, 0xFF);

37 
	`outb
(
IO_PIC2
+1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
+1, 
T_IRQ0
);

52 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
+1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
+1, 
T_IRQ0
 + 8);

67 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
+1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 if(
úqmask
 != 0xFFFF)

83 
	`pic£tmask
(
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fs.h
"

7 
	~"fûe.h
"

8 
	~"•ölock.h
"

10 
	#PIPESIZE
 512

	)

12 
	spùe
 {

13 
•ölock
 
	mlock
;

14 
	md©a
[
PIPESIZE
];

15 
uöt
 
	mƒód
;

16 
uöt
 
	mnwrôe
;

17 
	mªad›í
;

18 
	mwrôe›í
;

22 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

24 
pùe
 *
p
;

26 
p
 = 0;

27 *
f0
 = *
f1
 = 0;

28 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

29 
bad
;

30 if((
p
 = (
pùe
*)
	`kÆloc
()) == 0)

31 
bad
;

32 
p
->
ªad›í
 = 1;

33 
p
->
wrôe›í
 = 1;

34 
p
->
nwrôe
 = 0;

35 
p
->
ƒód
 = 0;

36 
	`öôlock
(&
p
->
lock
, "pipe");

37 (*
f0
)->
ty≥
 = 
FD_PIPE
;

38 (*
f0
)->
ªadabÀ
 = 1;

39 (*
f0
)->
wrôabÀ
 = 0;

40 (*
f0
)->
pùe
 = 
p
;

41 (*
f1
)->
ty≥
 = 
FD_PIPE
;

42 (*
f1
)->
ªadabÀ
 = 0;

43 (*
f1
)->
wrôabÀ
 = 1;

44 (*
f1
)->
pùe
 = 
p
;

48 
bad
:

49 if(
p
)

50 
	`k‰ì
((*)
p
);

51 if(*
f0
)

52 
	`fûe˛o£
(*
f0
);

53 if(*
f1
)

54 
	`fûe˛o£
(*
f1
);

56 
	}
}

59 
	$pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

61 
	`acquúe
(&
p
->
lock
);

62 if(
wrôabÀ
){

63 
p
->
wrôe›í
 = 0;

64 
	`wakeup
(&
p
->
ƒód
);

66 
p
->
ªad›í
 = 0;

67 
	`wakeup
(&
p
->
nwrôe
);

69 if(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0){

70 
	`ªÀa£
(&
p
->
lock
);

71 
	`k‰ì
((*)
p
);

73 
	`ªÀa£
(&
p
->
lock
);

74 
	}
}

78 
	$pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 
i
;

82 
	`acquúe
(&
p
->
lock
);

83 
i
 = 0; i < 
n
; i++){

84 
p
->
nwrôe
 =p->
ƒód
 + 
PIPESIZE
){

85 if(
p
->
ªad›í
 =0 || 
¥oc
->
kûÀd
){

86 
	`ªÀa£
(&
p
->
lock
);

89 
	`wakeup
(&
p
->
ƒód
);

90 
	`¶ìp
(&
p
->
nwrôe
, &p->
lock
);

92 
p
->
d©a
[p->
nwrôe
++ % 
PIPESIZE
] = 
addr
[
i
];

94 
	`wakeup
(&
p
->
ƒód
);

95 
	`ªÀa£
(&
p
->
lock
);

96  
n
;

97 
	}
}

100 
	$pùîód
(
pùe
 *
p
, *
addr
, 
n
)

102 
i
;

104 
	`acquúe
(&
p
->
lock
);

105 
p
->
ƒód
 =p->
nwrôe
 &&Ö->
wrôe›í
){

106 if(
¥oc
->
kûÀd
){

107 
	`ªÀa£
(&
p
->
lock
);

110 
	`¶ìp
(&
p
->
ƒód
, &p->
lock
);

112 
i
 = 0; i < 
n
; i++){

113 if(
p
->
ƒód
 =p->
nwrôe
)

115 
addr
[
i
] = 
p
->
d©a
[p->
ƒód
++ % 
PIPESIZE
];

117 
	`wakeup
(&
p
->
nwrôe
);

118 
	`ªÀa£
(&
p
->
lock
);

119  
i
;

120 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
(
fd
, 
c
)

8 
	`wrôe
(
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 if(
sgn
 && 
xx
 < 0){

21 
√g
 = 1;

22 
x
 = -
xx
;

24 
x
 = 
xx
;

27 
i
 = 0;

29 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

30 }(
x
 /
ba£
) != 0);

31 if(
√g
)

32 
buf
[
i
++] = '-';

34 --
i
 >= 0)

35 
	`putc
(
fd
, 
buf
[
i
]);

36 
	}
}

40 
	$¥ötf
(
fd
, *
fmt
, ...)

42 *
s
;

43 
c
, 
i
, 
°©e
;

44 
uöt
 *
≠
;

46 
°©e
 = 0;

47 
≠
 = (
uöt
*)(*)&
fmt
 + 1;

48 
i
 = 0; 
fmt
[i]; i++){

49 
c
 = 
fmt
[
i
] & 0xff;

50 if(
°©e
 == 0){

51 if(
c
 == '%'){

52 
°©e
 = '%';

54 
	`putc
(
fd
, 
c
);

56 } if(
°©e
 == '%'){

57 if(
c
 == 'd'){

58 
	`¥ötöt
(
fd
, *
≠
, 10, 1);

59 
≠
++;

60 } if(
c
 == 'x' || c == 'p'){

61 
	`¥ötöt
(
fd
, *
≠
, 16, 0);

62 
≠
++;

63 } if(
c
 == 's'){

64 
s
 = (*)*
≠
;

65 
≠
++;

66 if(
s
 == 0)

67 
s
 = "(null)";

68 *
s
 != 0){

69 
	`putc
(
fd
, *
s
);

70 
s
++;

72 } if(
c
 == 'c'){

73 
	`putc
(
fd
, *
≠
);

74 
≠
++;

75 } if(
c
 == '%'){

76 
	`putc
(
fd
, 
c
);

79 
	`putc
(
fd
, '%');

80 
	`putc
(
fd
, 
c
);

82 
°©e
 = 0;

85 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"x86.h
"

7 
	~"¥oc.h
"

8 
	~"•ölock.h
"

11 
•ölock
 
	mlock
;

12 
¥oc
 
	m¥oc
[
NPROC
];

13 } 
	g±abÀ
;

15 
¥oc
 *
	göô¥oc
;

17 
	g√xçid
 = 1;

18 
f‹kªt
();

19 
å≠ªt
();

21 
wakeup1
(*
ch™
);

24 
	$pöô
()

26 
	`öôlock
(&
±abÀ
.
lock
, "ptable");

27 
	}
}

34 
¥oc
*

35 
	$Ælo˝roc
()

37 
¥oc
 *
p
;

38 *
•
;

40 
	`acquúe
(&
±abÀ
.
lock
);

41 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

42 if(
p
->
°©e
 =
UNUSED
)

43 
found
;

44 
	`ªÀa£
(&
±abÀ
.
lock
);

47 
found
:

48 
p
->
°©e
 = 
EMBRYO
;

49 
p
->
pid
 = 
√xçid
++;

50 
	`ªÀa£
(&
±abÀ
.
lock
);

53 if((
p
->
k°ack
 = 
	`kÆloc
()) == 0){

54 
p
->
°©e
 = 
UNUSED
;

57 
•
 = 
p
->
k°ack
 + 
KSTACKSIZE
;

60 
•
 - *
p
->
tf
;

61 
p
->
tf
 = (
å≠‰ame
*)
•
;

65 
•
 -= 4;

66 *(
uöt
*)
•
 = (uöt)
å≠ªt
;

68 
•
 - *
p
->
c⁄ãxt
;

69 
p
->
c⁄ãxt
 = (c⁄ãxt*)
•
;

70 
	`mem£t
(
p
->
c⁄ãxt
, 0,  *p->context);

71 
p
->
c⁄ãxt
->
eù
 = (
uöt
)
f‹kªt
;

73  
p
;

74 
	}
}

79 
	$u£röô
()

81 
¥oc
 *
p
;

82 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

84 
p
 = 
	`Ælo˝roc
();

85 
öô¥oc
 = 
p
;

86 if((
p
->
pgdú
 = 
	`£tupkvm
()) == 0)

87 
	`∑nic
("userinit: out of memory?");

88 
	`öôuvm
(
p
->
pgdú
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

89 
p
->
sz
 = 
PGSIZE
;

90 
	`mem£t
(
p
->
tf
, 0, (*p->tf));

91 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

92 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

93 
p
->
tf
->
es
 =Ö->tf->
ds
;

94 
p
->
tf
->
ss
 =Ö->tf->
ds
;

95 
p
->
tf
->
eÊags
 = 
FL_IF
;

96 
p
->
tf
->
e•
 = 
PGSIZE
;

97 
p
->
tf
->
eù
 = 0;

99 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

100 
p
->
cwd
 = 
	`«mei
("/");

102 
i
;

103 
pksm_t
 *
ksm
;

104 
i
 = 0; i < 
NRKSM
; i++) {

105 
ksm
 = &
p
->
ksmhdèbÀ
.ksm[
i
];

106 
ksm
->
addr
 = 0;

107 
ksm
->
ksmhd
 = 0;

108 
ksm
->
¥ev
 = 
i
-1;

109 
ksm
->
√xt
 = 
i
+1;

111 
p
->
ksmhdèbÀ
.
ksm
[
i
-1].
√xt
 = -1;

112 
p
->
ksmhdèbÀ
.
fú°_‰ì
 = 0;

113 
p
->
ksmhdèbÀ
.
fú°_id
 = -1;

115 
p
->
°©e
 = 
RUNNABLE
;

116 
	}
}

121 
	$grow¥oc
(
n
)

123 
uöt
 
sz
;

125 
sz
 = 
¥oc
->sz;

126 if(
n
 > 0){

127 if((
sz
 = 
	`Ælocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

129 } if(
n
 < 0){

130 if((
sz
 = 
	`dóŒocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

133 
¥oc
->
sz
 = sz;

134 
	`swôchuvm
(
¥oc
);

136 
	}
}

142 
	$f‹k
()

144 
i
, 
pid
;

145 
¥oc
 *
≈
;

148 if((
≈
 = 
	`Ælo˝roc
()) == 0)

152 if((
≈
->
pgdú
 = 
	`c›yuvm
(
¥oc
->pgdú,Öroc->
sz
)) == 0){

153 
	`k‰ì
(
≈
->
k°ack
);

154 
≈
->
k°ack
 = 0;

155 
≈
->
°©e
 = 
UNUSED
;

158 
≈
->
sz
 = 
¥oc
->sz;

159 
≈
->
∑ª¡
 = 
¥oc
;

160 *
≈
->
tf
 = *
¥oc
->tf;

163 
≈
->
tf
->
óx
 = 0;

165 
i
 = 0; i < 
NOFILE
; i++)

166 if(
¥oc
->
ofûe
[
i
])

167 
≈
->
ofûe
[
i
] = 
	`fûedup
(
¥oc
->ofile[i]);

168 
≈
->
cwd
 = 
	`idup
(
¥oc
->cwd);

170 
	`ß„°r˝y
((*)&
≈
->
ksmèbÀ
, (*)&
¥oc
->ksmtable,

171 (
pksmèbÀ_t
));

173 
pid
 = 
≈
->pid;

174 
≈
->
°©e
 = 
RUNNABLE
;

175 
	`ß„°r˝y
(
≈
->
«me
, 
¥oc
->name, (proc->name));

176  
pid
;

177 
	}
}

183 
	$exô
()

185 
¥oc
 *
p
;

186 
fd
;

188 if(
¥oc
 =
öô¥oc
)

189 
	`∑nic
("initÉxiting");

192 
fd
 = 0; fd < 
NOFILE
; fd++){

193 if(
¥oc
->
ofûe
[
fd
]){

194 
	`fûe˛o£
(
¥oc
->
ofûe
[
fd
]);

195 
¥oc
->
ofûe
[
fd
] = 0;

199 
	`ùut
(
¥oc
->
cwd
);

200 
¥oc
->
cwd
 = 0;

202 
	`acquúe
(&
±abÀ
.
lock
);

205 
	`wakeup1
(
¥oc
->
∑ª¡
);

208 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

209 if(
p
->
∑ª¡
 =
¥oc
){

210 
p
->
∑ª¡
 = 
öô¥oc
;

211 if(
p
->
°©e
 =
ZOMBIE
)

212 
	`wakeup1
(
öô¥oc
);

217 
¥oc
->
°©e
 = 
ZOMBIE
;

218 
	`sched
();

219 
	`∑nic
("zombieÉxit");

220 
	}
}

225 
	$waô
()

227 
¥oc
 *
p
;

228 
havekids
, 
pid
;

230 
	`acquúe
(&
±abÀ
.
lock
);

233 
havekids
 = 0;

234 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

235 if(
p
->
∑ª¡
 !
¥oc
)

237 
havekids
 = 1;

238 if(
p
->
°©e
 =
ZOMBIE
){

240 
pid
 = 
p
->pid;

241 
	`k‰ì
(
p
->
k°ack
);

242 
p
->
k°ack
 = 0;

243 
	`‰ìvm
(
p
->
pgdú
);

244 
p
->
°©e
 = 
UNUSED
;

245 
p
->
pid
 = 0;

246 
p
->
∑ª¡
 = 0;

247 
p
->
«me
[0] = 0;

248 
p
->
kûÀd
 = 0;

249 
	`ªÀa£
(&
±abÀ
.
lock
);

250  
pid
;

255 if(!
havekids
 || 
¥oc
->
kûÀd
){

256 
	`ªÀa£
(&
±abÀ
.
lock
);

261 
	`¶ìp
(
¥oc
, &
±abÀ
.
lock
);

263 
	}
}

274 
	$scheduÀr
()

276 
¥oc
 *
p
;

280 
	`°i
();

283 
	`acquúe
(&
±abÀ
.
lock
);

284 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

285 if(
p
->
°©e
 !
RUNNABLE
)

291 
¥oc
 = 
p
;

292 
	`swôchuvm
(
p
);

293 
p
->
°©e
 = 
RUNNING
;

294 
	`swtch
(&
˝u
->
scheduÀr
, 
¥oc
->
c⁄ãxt
);

295 
	`swôchkvm
();

299 
¥oc
 = 0;

301 
	`ªÀa£
(&
±abÀ
.
lock
);

304 
	}
}

309 
	$sched
()

311 
öã«
;

313 if(!
	`hﬁdög
(&
±abÀ
.
lock
))

314 
	`∑nic
("schedÖtable.lock");

315 if(
˝u
->
n˛i
 != 1)

316 
	`∑nic
("schedÜocks");

317 if(
¥oc
->
°©e
 =
RUNNING
)

318 
	`∑nic
("schedÑunning");

319 if(
	`ªadeÊags
()&
FL_IF
)

320 
	`∑nic
("sched interruptible");

321 
öã«
 = 
˝u
->intena;

322 
	`swtch
(&
¥oc
->
c⁄ãxt
, 
˝u
->
scheduÀr
);

323 
˝u
->
öã«
 = intena;

324 
	}
}

328 
	$yõld
()

330 
	`acquúe
(&
±abÀ
.
lock
);

331 
¥oc
->
°©e
 = 
RUNNABLE
;

332 
	`sched
();

333 
	`ªÀa£
(&
±abÀ
.
lock
);

334 
	}
}

339 
	$f‹kªt
()

341 
fú°
 = 1;

343 
	`ªÀa£
(&
±abÀ
.
lock
);

345 i‡(
fú°
) {

349 
fú°
 = 0;

350 
	`öôlog
();

354 
	}
}

359 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

361 if(
¥oc
 == 0)

362 
	`∑nic
("sleep");

364 if(
lk
 == 0)

365 
	`∑nic
("sleep withoutÜk");

373 if(
lk
 !&
±abÀ
.
lock
){

374 
	`acquúe
(&
±abÀ
.
lock
);

375 
	`ªÀa£
(
lk
);

379 
¥oc
->
ch™
 = chan;

380 
¥oc
->
°©e
 = 
SLEEPING
;

381 
	`sched
();

384 
¥oc
->
ch™
 = 0;

387 if(
lk
 !&
±abÀ
.
lock
){

388 
	`ªÀa£
(&
±abÀ
.
lock
);

389 
	`acquúe
(
lk
);

391 
	}
}

397 
	$wakeup1
(*
ch™
)

399 
¥oc
 *
p
;

401 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

402 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

403 
p
->
°©e
 = 
RUNNABLE
;

404 
	}
}

408 
	$wakeup
(*
ch™
)

410 
	`acquúe
(&
±abÀ
.
lock
);

411 
	`wakeup1
(
ch™
);

412 
	`ªÀa£
(&
±abÀ
.
lock
);

413 
	}
}

419 
	$kûl
(
pid
)

421 
¥oc
 *
p
;

423 
	`acquúe
(&
±abÀ
.
lock
);

424 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

425 if(
p
->
pid
 ==Öid){

426 
p
->
kûÀd
 = 1;

428 if(
p
->
°©e
 =
SLEEPING
)

429 
p
->
°©e
 = 
RUNNABLE
;

430 
	`ªÀa£
(&
±abÀ
.
lock
);

434 
	`ªÀa£
(&
±abÀ
.
lock
);

436 
	}
}

443 
	$¥ocdump
()

445 *
°©es
[] = {

446 [
UNUSED
] "unused",

447 [
EMBRYO
] "embryo",

448 [
SLEEPING
] "sleep ",

449 [
RUNNABLE
] "runble",

450 [
RUNNING
] "run ",

451 [
ZOMBIE
] "zombie"

453 
i
;

454 
¥oc
 *
p
;

455 *
°©e
;

456 
uöt
 
pc
[10];

458 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

459 if(
p
->
°©e
 =
UNUSED
)

461 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

462 
°©e
 = 
°©es
[
p
->state];

464 
°©e
 = "???";

465 
	`˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

466 if(
p
->
°©e
 =
SLEEPING
){

467 
	`gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
->
ebp
+2, 
pc
);

468 
i
=0; i<10 && 
pc
[i] != 0; i++)

469 
	`˝rötf
(" %p", 
pc
[
i
]);

471 
	`˝rötf
("\n");

473 
	}
}

	@proc.h

2 
	#NSEGS
 7

	)

4 
	#NRKSM
 32

	)

7 
	s˝u
 {

8 
uch¨
 
	mid
;

9 
c⁄ãxt
 *
	mscheduÀr
;

10 
èsk°©e
 
	mts
;

11 
£gdesc
 
	mgdt
[
NSEGS
];

12 vﬁ©ûê
uöt
 
	m°¨ãd
;

13 
	mn˛i
;

14 
	möã«
;

17 
˝u
 *
	m˝u
;

18 
¥oc
 *
	m¥oc
;

21 
˝u
 
˝us
[
NCPU
];

22 
n˝u
;

32 
˝u
 *˝u 
asm
("%gs:0");

33 
¥oc
 *¥o¯
asm
("%gs:4");

46 
	sc⁄ãxt
 {

47 
uöt
 
	medi
;

48 
uöt
 
	mesi
;

49 
uöt
 
	mebx
;

50 
uöt
 
	mebp
;

51 
uöt
 
	meù
;

54 
	e¥oc°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

57 
	sksmhd_t
 {

58 * 
	maddr
;

59 
	mksmhd
;

60 
	m¥ev
;

61 
	m√xt
;

65 
	sksmhdèbÀ_t
 {

66 
	mfú°_‰ì
;

67 
	mfú°_id
;

68 
ksmhd_t
 
	mksm
[
NRKSM
];

72 
	s¥oc
 {

73 
uöt
 
	msz
;

74 
pde_t
* 
	mpgdú
;

75 *
	mk°ack
;

76 
¥oc°©e
 
	m°©e
;

77 vﬁ©ûê
	mpid
;

78 
¥oc
 *
	m∑ª¡
;

79 
å≠‰ame
 *
	mtf
;

80 
c⁄ãxt
 *
	mc⁄ãxt
;

81 *
	mch™
;

82 
	mkûÀd
;

83 
fûe
 *
	mofûe
[
NOFILE
];

84 
öode
 *
	mcwd
;

85 
	m«me
[16];

86 
ksmèbÀ_t
 
	mksmhdèbÀ
;

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage:Ñm files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@sem.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"•ölock.h
"

6 
	#NAME_MAX
 32

7 
	#NRSEM
 32

8 

	)

9 
uöt
 
	t£mhd_id
;

11 
	s£m≠h‹e_t
 {

12 
	mvÆue
;

13 
	mcou¡î
;

15 
	m«me
;

16 
£mhd_id
 
	mid
;

17 
£mhd_id
 
	m√xt_‰ì
;

21 
•ölock
 
	mlock
;

22 
£mhd_id
 
	mfú°_‰ì
;

23 
£m≠h‹e_t
 
	m£m
[
NRSEM
];

24 } 
	g£mèbÀ
;

27 
	$£möô
()

29 
i
 = 0;

31 
	`öôlock
(&
£mèbÀ
.
lock
, "sem");

32 
	`acquúe
(&
£mèbÀ
.
lock
);

34 
£m≠h‹e_t
* 
p
;

35 
£mèbÀ
.
fú°_‰ì
 = 0;

36 
p
 = 
£mèbÀ
.
£m
;Ö < &£mèbÀ.£m[
NRSEM
];Ö++) {

38 
p
->
«me
 = -1;

39 
p
->
id
 = 
i
;

40 
p
->
√xt_‰ì
 = ++
i
;

42 
£mèbÀ
.
£m
[
NRSEM
-1].
√xt_‰ì
 = -1;

44 
	`ªÀa£
(&
£mèbÀ
.
lock
);

45 
	}
}

47 
	$£m_gë
(
uöt
 
«me
, 
vÆue
)

49 
£m≠h‹e_t
 *
p
;

51 
	`acquúe
(&
£mèbÀ
.
lock
);

53 
p
 = 
£mèbÀ
.
£m
;Ö < &£mèbÀ.£m[
NRSEM
];Ö++) {

55 i‡(
p
->
«me
 ==Çame)

56 
found
;

59 i‡(
£mèbÀ
.
fú°_‰ì
 == -1)

62 
p
->
«me
 =Çame;

63 
p
 = &
£mèbÀ
.
£m
[£mèbÀ.
fú°_‰ì
];

64 
£mèbÀ
.
fú°_‰ì
 = 
p
->
√xt_‰ì
;

66 
found
:

67 
p
->
cou¡î
 =Ö->
vÆue
 = value;

68 
	`ªÀa£
(&
£mèbÀ
.
lock
);

70  
p
->
id
 + 1;

71 
	}
}

73 
	$£m_sig«l
(
hd
)

75 
	`acquúe
(&
£mèbÀ
.
lock
);

77 
£m≠h‹e_t
* 
p
;

78 
p
 = &
£mèbÀ
.
£m
[
hd
 - 1];

79 
p
->
cou¡î
++;

80 
	`wakeup
(
p
);

82 
	`ªÀa£
(&
£mèbÀ
.
lock
);

85 
	}
}

87 
	$£m_waô
(
hd
)

89 i‡(
hd
 < 0 || hd > 
NRSEM
)

91 
	`acquúe
(&
£mèbÀ
.
lock
);

93 
£m≠h‹e_t
* 
p
;

94 
p
 = &
£mèbÀ
.
£m
[
hd
 - 1];

95 
p
->
cou¡î
 <= 0) {

96 
	`¶ìp
(
p
, &
£mèbÀ
.
lock
);

98 
p
->
cou¡î
--;

100 
	`ªÀa£
(&
£mèbÀ
.
lock
);

103 
	}
}

105 
	$£m_dñëe
(
hd
)

107 i‡(
hd
 < 0 || hd > 
NRSEM
)

110 
	`acquúe
(&
£mèbÀ
.
lock
);

112 
£m≠h‹e_t
* 
p
;

113 
p
 = &
£mèbÀ
.
£m
[
hd
 - 1];

115 
p
->
«me
 = -1;

116 
p
->
√xt_‰ì
 = 
£mèbÀ
.
fú°_‰ì
;

117 
£mèbÀ
.
fú°_‰ì
 = 
p
->
id
;

119 
	`ªÀa£
(&
£mèbÀ
.
lock
);

122 
	}
}

	@sem.h

	@semtest.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
pid
;

9 
£m
;

11 
	`¥ötf
(1,"\nU£dÖages: %d\n",
	`pgu£d
());

13 
£m
 = 
	`£m_gë
(100,0);

14 
pid
 = 
	`f‹k
();

16 i‡(
pid
 == 0){

17 
pid
 = 
	`f‹k
();

18 
	`¥ötf
(1,"\nBef‹êˇŒög waô o¿%d\n",
pid
);

19 i‡(
	`£m_waô
(
£m
) != 0)

20 
	`¥ötf
(1,"\nERROR on wait\n");

21 
	`¥ötf
(1,"\nAfter calling wait\n");

22 i‡(
pid
 != 0)

23 
	`waô
();

25 
	`¥ötf
(1,"\nBef‹êˇŒög sig«»1 o¿%d\n",
pid
);

26 if(
	`£m_sig«l
(
£m
) != 0)

27 
	`¥ötf
(1,"\nERROR on signal\n");

28 
	`¥ötf
(1,"\nAfter calling signal 1\n");

29 
	`¥ötf
(1,"\nBef‹êˇŒög sig«»2 o¿%d\n",
pid
);

30 if(
	`£m_sig«l
(
£m
) != 0)

31 
	`¥ötf
(1,"\nERROR on signal\n");

32 
	`¥ötf
(1,"\nAfter calling signal 2\n");

33 
	`waô
();

34 
	`£m_dñëe
(
£m
);

37 
	`exô
();

38 
	}
}

	@semtest2.c

1 
	~"ty≥s.h
"

2 
	~"u£r.h
"

3 
	~"£m.h
"

5 
	g£m_fuŒ
, 
	g£m_em±y
, 
	g£m_muãx
;

6 
	gbuf
[10];

9 
	$¥odu˚r
()

11 
i
 = 1;

12 
curs‹1
 = 0;

14 
	`£m_waô
(
£m_em±y
);

15 
	`£m_waô
(
£m_muãx
);

16 
	`¥ötf
(1, "¥odu˚∏wrôög index(%dË%d.\n", 
curs‹1
%10, 
i
);

17 
buf
[(
curs‹1
++)%10] = (
i
++)%10;

18 
	`£m_sig«l
(
£m_muãx
);

19 
	`£m_sig«l
(
£m_fuŒ
);

21 
	}
}

24 
	$comsumî
()

26 
j
=1;

27 
curs‹2
 = 0;

29 
	`£m_waô
(
£m_fuŒ
);

30 
	`£m_waô
(
£m_muãx
);

31 
buf
[
curs‹2
%10] = (
j
++)%10;

32 
	`¥ötf
(1, "\tcomsumerÑeading index(%d) %d.\n",

33 
curs‹2
%10, 
buf
[(cursor2++)%10]);

34 
	`£m_sig«l
(
£m_muãx
);

35 
	`£m_sig«l
(
£m_em±y
);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
	`mem£t
(
buf
, 0, (buf));

42 
£m_fuŒ
 = 
	`£m_gë
(1, 0);

43 
£m_em±y
 = 
	`£m_gë
(2, 10);

44 
£m_muãx
 = 
	`£m_gë
(3, 1);

46 
pid
;

48 
pid
 = 
	`f‹k
();

50 i‡(
pid
 == 0) {

51 
	`¥odu˚r
();

53 
	`comsumî
();

57 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
();

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
();

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
();

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
();

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
();

121 
	`waô
();

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
();

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`¥ötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

163 
buf
[
	`°æí
(buf)-1] = 0;

164 if(
	`chdú
(
buf
+3) < 0)

165 
	`¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

168 if(
	`f‹k1
() == 0)

169 
	`runcmd
(
	`∑r£cmd
(
buf
));

170 
	`waô
();

172 
	`exô
();

173 
	}
}

176 
	$∑nic
(*
s
)

178 
	`¥ötf
(2, "%s\n", 
s
);

179 
	`exô
();

180 
	}
}

183 
	$f‹k1
()

185 
pid
;

187 
pid
 = 
	`f‹k
();

188 if(
pid
 == -1)

189 
	`∑nic
("fork");

190  
pid
;

191 
	}
}

196 
cmd
*

197 
	$execcmd
()

199 
execcmd
 *
cmd
;

201 
cmd
 = 
	`mÆloc
((*cmd));

202 
	`mem£t
(
cmd
, 0, (*cmd));

203 
cmd
->
ty≥
 = 
EXEC
;

204  (
cmd
*)cmd;

205 
	}
}

207 
cmd
*

208 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

210 
ªdúcmd
 *
cmd
;

212 
cmd
 = 
	`mÆloc
((*cmd));

213 
	`mem£t
(
cmd
, 0, (*cmd));

214 
cmd
->
ty≥
 = 
REDIR
;

215 
cmd
->cmd = 
subcmd
;

216 
cmd
->
fûe
 = file;

217 
cmd
->
efûe
 =Éfile;

218 
cmd
->
mode
 = mode;

219 
cmd
->
fd
 = fd;

220  (
cmd
*)cmd;

221 
	}
}

223 
cmd
*

224 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

226 
pùecmd
 *
cmd
;

228 
cmd
 = 
	`mÆloc
((*cmd));

229 
	`mem£t
(
cmd
, 0, (*cmd));

230 
cmd
->
ty≥
 = 
PIPE
;

231 
cmd
->
À·
 =Üeft;

232 
cmd
->
right
 =Ñight;

233  (
cmd
*)cmd;

234 
	}
}

236 
cmd
*

237 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

239 
li°cmd
 *
cmd
;

241 
cmd
 = 
	`mÆloc
((*cmd));

242 
	`mem£t
(
cmd
, 0, (*cmd));

243 
cmd
->
ty≥
 = 
LIST
;

244 
cmd
->
À·
 =Üeft;

245 
cmd
->
right
 =Ñight;

246  (
cmd
*)cmd;

247 
	}
}

249 
cmd
*

250 
	$backcmd
(
cmd
 *
subcmd
)

252 
backcmd
 *
cmd
;

254 
cmd
 = 
	`mÆloc
((*cmd));

255 
	`mem£t
(
cmd
, 0, (*cmd));

256 
cmd
->
ty≥
 = 
BACK
;

257 
cmd
->cmd = 
subcmd
;

258  (
cmd
*)cmd;

259 
	}
}

263 
	gwhôe•a˚
[] = " \t\r\n\v";

264 
	gsymbﬁs
[] = "<|>&;()";

267 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

269 *
s
;

270 
ªt
;

272 
s
 = *
ps
;

273 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

274 
s
++;

275 if(
q
)

276 *
q
 = 
s
;

277 
ªt
 = *
s
;

278 *
s
){

287 
s
++;

290 
s
++;

291 if(*
s
 == '>'){

292 
ªt
 = '+';

293 
s
++;

297 
ªt
 = 'a';

298 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

299 
s
++;

302 if(
eq
)

303 *
eq
 = 
s
;

305 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

306 
s
++;

307 *
ps
 = 
s
;

308  
ªt
;

309 
	}
}

312 
	$≥ek
(**
ps
, *
es
, *
toks
)

314 *
s
;

316 
s
 = *
ps
;

317 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

318 
s
++;

319 *
ps
 = 
s
;

320  *
s
 && 
	`°rchr
(
toks
, *s);

321 
	}
}

323 
cmd
 *
∑r£löe
(**, *);

324 
cmd
 *
∑r£pùe
(**, *);

325 
cmd
 *
∑r£exec
(**, *);

326 
cmd
 *
nu…îmö©e
(cmd*);

328 
cmd
*

329 
	$∑r£cmd
(*
s
)

331 *
es
;

332 
cmd
 *cmd;

334 
es
 = 
s
 + 
	`°æí
(s);

335 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

336 
	`≥ek
(&
s
, 
es
, "");

337 if(
s
 !
es
){

338 
	`¥ötf
(2, "À·ovîs: %s\n", 
s
);

339 
	`∑nic
("syntax");

341 
	`nu…îmö©e
(
cmd
);

342  
cmd
;

343 
	}
}

345 
cmd
*

346 
	$∑r£löe
(**
ps
, *
es
)

348 
cmd
 *cmd;

350 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

351 
	`≥ek
(
ps
, 
es
, "&")){

352 
	`gëtokí
(
ps
, 
es
, 0, 0);

353 
cmd
 = 
	`backcmd
(cmd);

355 if(
	`≥ek
(
ps
, 
es
, ";")){

356 
	`gëtokí
(
ps
, 
es
, 0, 0);

357 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

359  
cmd
;

360 
	}
}

362 
cmd
*

363 
	$∑r£pùe
(**
ps
, *
es
)

365 
cmd
 *cmd;

367 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

368 if(
	`≥ek
(
ps
, 
es
, "|")){

369 
	`gëtokí
(
ps
, 
es
, 0, 0);

370 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

372  
cmd
;

373 
	}
}

375 
cmd
*

376 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

378 
tok
;

379 *
q
, *
eq
;

381 
	`≥ek
(
ps
, 
es
, "<>")){

382 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

383 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

384 
	`∑nic
("missing file forÑedirection");

385 
tok
){

387 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

390 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

393 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

397  
cmd
;

398 
	}
}

400 
cmd
*

401 
	$∑r£block
(**
ps
, *
es
)

403 
cmd
 *cmd;

405 if(!
	`≥ek
(
ps
, 
es
, "("))

406 
	`∑nic
("parseblock");

407 
	`gëtokí
(
ps
, 
es
, 0, 0);

408 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

409 if(!
	`≥ek
(
ps
, 
es
, ")"))

410 
	`∑nic
("syntax - missing )");

411 
	`gëtokí
(
ps
, 
es
, 0, 0);

412 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

413  
cmd
;

414 
	}
}

416 
cmd
*

417 
	$∑r£exec
(**
ps
, *
es
)

419 *
q
, *
eq
;

420 
tok
, 
¨gc
;

421 
execcmd
 *
cmd
;

422 
cmd
 *
ªt
;

424 if(
	`≥ek
(
ps
, 
es
, "("))

425  
	`∑r£block
(
ps
, 
es
);

427 
ªt
 = 
	`execcmd
();

428 
cmd
 = (
execcmd
*)
ªt
;

430 
¨gc
 = 0;

431 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

432 !
	`≥ek
(
ps
, 
es
, "|)&;")){

433 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

435 if(
tok
 != 'a')

436 
	`∑nic
("syntax");

437 
cmd
->
¨gv
[
¨gc
] = 
q
;

438 
cmd
->
órgv
[
¨gc
] = 
eq
;

439 
¨gc
++;

440 if(
¨gc
 >
MAXARGS
)

441 
	`∑nic
("too manyárgs");

442 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

444 
cmd
->
¨gv
[
¨gc
] = 0;

445 
cmd
->
órgv
[
¨gc
] = 0;

446  
ªt
;

447 
	}
}

450 
cmd
*

451 
	$nu…îmö©e
(
cmd
 *cmd)

453 
i
;

454 
backcmd
 *
bcmd
;

455 
execcmd
 *
ecmd
;

456 
li°cmd
 *
lcmd
;

457 
pùecmd
 *
pcmd
;

458 
ªdúcmd
 *
rcmd
;

460 if(
cmd
 == 0)

463 
cmd
->
ty≥
){

464 
EXEC
:

465 
ecmd
 = (
execcmd
*)
cmd
;

466 
i
=0; 
ecmd
->
¨gv
[i]; i++)

467 *
ecmd
->
órgv
[
i
] = 0;

470 
REDIR
:

471 
rcmd
 = (
ªdúcmd
*)
cmd
;

472 
	`nu…îmö©e
(
rcmd
->
cmd
);

473 *
rcmd
->
efûe
 = 0;

476 
PIPE
:

477 
pcmd
 = (
pùecmd
*)
cmd
;

478 
	`nu…îmö©e
(
pcmd
->
À·
);

479 
	`nu…îmö©e
(
pcmd
->
right
);

482 
LIST
:

483 
lcmd
 = (
li°cmd
*)
cmd
;

484 
	`nu…îmö©e
(
lcmd
->
À·
);

485 
	`nu…îmö©e
(
lcmd
->
right
);

488 
BACK
:

489 
bcmd
 = (
backcmd
*)
cmd
;

490 
	`nu…îmö©e
(
bcmd
->
cmd
);

493  
cmd
;

494 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

10 
	~"•ölock.h
"

13 
	$öôlock
(
•ölock
 *
lk
, *
«me
)

15 
lk
->
«me
 =Çame;

16 
lk
->
locked
 = 0;

17 
lk
->
˝u
 = 0;

18 
	}
}

25 
	$acquúe
(
•ölock
 *
lk
)

27 
	`push˛i
();

28 if(
	`hﬁdög
(
lk
))

29 
	`∑nic
("acquire");

34 
	`xchg
(&
lk
->
locked
, 1) != 0)

38 
lk
->
˝u
 = cpu;

39 
	`gëˇŒîpcs
(&
lk
,Ük->
pcs
);

40 
	}
}

44 
	$ªÀa£
(
•ölock
 *
lk
)

46 if(!
	`hﬁdög
(
lk
))

47 
	`∑nic
("release");

49 
lk
->
pcs
[0] = 0;

50 
lk
->
˝u
 = 0;

61 
	`xchg
(&
lk
->
locked
, 0);

63 
	`p›˛i
();

64 
	}
}

68 
	$gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
*)
v
 - 2;

74 
i
 = 0; i < 10; i++){

75 if(
ebp
 =0 ||Éb∞< (
uöt
*)
KERNBASE
 ||Ébp == (uint*)0xffffffff)

77 
pcs
[
i
] = 
ebp
[1];

78 
ebp
 = (
uöt
*)ebp[0];

80 ; 
i
 < 10; i++)

81 
pcs
[
i
] = 0;

82 
	}
}

86 
	$hﬁdög
(
•ölock
 *
lock
)

88  
lock
->
locked
 &&Üock->
˝u
 == cpu;

89 
	}
}

97 
	$push˛i
()

99 
eÊags
;

101 
eÊags
 = 
	`ªadeÊags
();

102 
	`˛i
();

103 if(
˝u
->
n˛i
++ == 0)

104 
˝u
->
öã«
 = 
eÊags
 & 
FL_IF
;

105 
	}
}

108 
	$p›˛i
()

110 if(
	`ªadeÊags
()&
FL_IF
)

111 
	`∑nic
("popcli - interruptible");

112 if(--
˝u
->
n˛i
 < 0)

113 
	`∑nic
("popcli");

114 if(
˝u
->
n˛i
 =0 && cpu->
öã«
)

115 
	`°i
();

116 
	}
}

	@spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
˝u
 *
	m˝u
;

8 
uöt
 
	mpcs
[10];

	@stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEV
 3

4 

	)

5 
	s°©
 {

6 
	mty≥
;

7 
	mdev
;

8 
uöt
 
	möo
;

9 
	m∆ök
;

10 
uöt
 
	msize
;

	@stressfs.c

10 
	~"ty≥s.h
"

11 
	~"°©.h
"

12 
	~"u£r.h
"

13 
	~"fs.h
"

14 
	~"f˙é.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
(1, "stressfs starting\n");

24 
	`mem£t
(
d©a
, 'a', (data));

26 
i
 = 0; i < 4; i++)

27 if(
	`f‹k
() > 0)

30 
	`¥ötf
(1, "wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
(
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
(
fd
, 
d©a
, (data));

37 
	`˛o£
(
fd
);

39 
	`¥ötf
(1, "read\n");

41 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
(
fd
, 
d©a
, (data));

44 
	`˛o£
(
fd
);

46 
	`waô
();

48 
	`exô
();

49 
	}
}

	@string.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

5 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

7 i‡(()
d°
%4 =0 && 
n
%4 == 0){

8 
c
 &= 0xFF;

9 
	`°o¶
(
d°
, (
c
<<24)|(c<<16)|(c<<8)|c, 
n
/4);

11 
	`°osb
(
d°
, 
c
, 
n
);

12  
d°
;

13 
	}
}

16 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 c⁄° 
uch¨
 *
s1
, *
s2
;

20 
s1
 = 
v1
;

21 
s2
 = 
v2
;

22 
n
-- > 0){

23 if(*
s1
 !*
s2
)

24  *
s1
 - *
s2
;

25 
s1
++, 
s2
++;

29 
	}
}

32 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 c⁄° *
s
;

35 *
d
;

37 
s
 = 
§c
;

38 
d
 = 
d°
;

39 if(
s
 < 
d
 && s + 
n
 > d){

40 
s
 +
n
;

41 
d
 +
n
;

42 
n
-- > 0)

43 *--
d
 = *--
s
;

45 
n
-- > 0)

46 *
d
++ = *
s
++;

48  
d°
;

49 
	}
}

53 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

55  
	`memmove
(
d°
, 
§c
, 
n
);

56 
	}
}

59 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

61 
n
 > 0 && *
p
 && *∞=*
q
)

62 
n
--, 
p
++, 
q
++;

63 if(
n
 == 0)

65  (
uch¨
)*
p
 - (uch¨)*
q
;

66 
	}
}

69 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

71 *
os
;

73 
os
 = 
s
;

74 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

76 
n
-- > 0)

77 *
s
++ = 0;

78  
os
;

79 
	}
}

83 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

85 *
os
;

87 
os
 = 
s
;

88 if(
n
 <= 0)

89  
os
;

90 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

92 *
s
 = 0;

93  
os
;

94 
	}
}

97 
	$°æí
(c⁄° *
s
)

99 
n
;

101 
n
 = 0; 
s
[n];Ç++)

103  
n
;

104 
	}
}

	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"sysˇŒ.h
"

18 
	$„tchöt
(
uöt
 
addr
, *
ù
)

20 if(
addr
 >
¥oc
->
sz
 ||áddr+4 >Öroc->sz)

22 *
ù
 = *(*)(
addr
);

24 
	}
}

30 
	$„tch°r
(
uöt
 
addr
, **
µ
)

32 *
s
, *
ï
;

34 if(
addr
 >
¥oc
->
sz
)

36 *
µ
 = (*)
addr
;

37 
ï
 = (*)
¥oc
->
sz
;

38 
s
 = *
µ
; s < 
ï
; s++)

39 if(*
s
 == 0)

40  
s
 - *
µ
;

42 
	}
}

46 
	$¨göt
(
n
, *
ù
)

48  
	`„tchöt
(
¥oc
->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

49 
	}
}

55 
	$¨g±r
(
n
, **
µ
, 
size
)

57 
i
;

59 if(
	`¨göt
(
n
, &
i
) < 0)

61 if((
uöt
)
i
 >
¥oc
->
sz
 || (uöt)i+
size
 >Öroc->sz)

63 *
µ
 = (*)
i
;

65 
	}
}

72 
	$¨g°r
(
n
, **
µ
)

74 
addr
;

75 if(
	`¨göt
(
n
, &
addr
) < 0)

77  
	`„tch°r
(
addr
, 
µ
);

78 
	}
}

80 
sys_chdú
();

81 
sys_˛o£
();

82 
sys_dup
();

83 
sys_exec
();

84 
sys_exô
();

85 
sys_f‹k
();

86 
sys_f°©
();

87 
sys_gëpid
();

88 
sys_kûl
();

89 
sys_lök
();

90 
sys_mkdú
();

91 
sys_mknod
();

92 
sys_›í
();

93 
sys_pùe
();

94 
sys_ªad
();

95 
sys_sbrk
();

96 
sys_¶ìp
();

97 
sys_u∆ök
();

98 
sys_waô
();

99 
sys_wrôe
();

100 
sys_u±ime
();

101 
sys_ã°
();

103 
sys_ksmgë
();

104 
sys_ksm©èch
();

105 
sys_ksmdëach
();

106 
sys_ksmöfo
();

107 
sys_ksmdñëe
();

109 
sys_pgu£d
();

111 
sys_£m_gë
();

112 
sys_£m_sig«l
();

113 
sys_£m_waô
();

114 
sys_£m_dñëe
();

116 (*
sysˇŒs
[])() = {

117 [
SYS_f‹k
] 
sys_f‹k
,

118 [
SYS_exô
] 
sys_exô
,

119 [
SYS_waô
] 
sys_waô
,

120 [
SYS_pùe
] 
sys_pùe
,

121 [
SYS_ªad
] 
sys_ªad
,

122 [
SYS_kûl
] 
sys_kûl
,

123 [
SYS_exec
] 
sys_exec
,

124 [
SYS_f°©
] 
sys_f°©
,

125 [
SYS_chdú
] 
sys_chdú
,

126 [
SYS_dup
] 
sys_dup
,

127 [
SYS_gëpid
] 
sys_gëpid
,

128 [
SYS_sbrk
] 
sys_sbrk
,

129 [
SYS_¶ìp
] 
sys_¶ìp
,

130 [
SYS_u±ime
] 
sys_u±ime
,

131 [
SYS_›í
] 
sys_›í
,

132 [
SYS_wrôe
] 
sys_wrôe
,

133 [
SYS_mknod
] 
sys_mknod
,

134 [
SYS_u∆ök
] 
sys_u∆ök
,

135 [
SYS_lök
] 
sys_lök
,

136 [
SYS_mkdú
] 
sys_mkdú
,

137 [
SYS_˛o£
] 
sys_˛o£
,

138 [
SYS_ã°
] 
sys_ã°
,

139 [
SYS_ksmgë
] 
sys_ksmgë
,

140 [
SYS_ksm©èch
] 
sys_ksm©èch
,

141 [
SYS_ksmdëach
] 
sys_ksmdëach
,

142 [
SYS_ksmöfo
] 
sys_ksmöfo
,

143 [
SYS_ksmdñëe
] 
sys_ksmdñëe
,

144 [
SYS_pgu£d
] 
sys_pgu£d
,

145 [
SYS_£m_gë
] 
sys_£m_gë
,

146 [
SYS_£m_sig«l
] 
sys_£m_sig«l
,

147 [
SYS_£m_waô
] 
sys_£m_waô
,

148 [
SYS_£m_dñëe
] 
sys_£m_dñëe
,

149 
	}
};

152 
	$sysˇŒ
()

154 
num
;

156 
num
 = 
¥oc
->
tf
->
óx
;

157 if(
num
 > 0 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num]) {

158 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

160 
	`˝rötf
("%d %s: unknown sys call %d\n",

161 
¥oc
->
pid
,Öroc->
«me
, 
num
);

162 
¥oc
->
tf
->
óx
 = -1;

164 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

16 
	#SYS_›í
 15

	)

17 
	#SYS_wrôe
 16

	)

18 
	#SYS_mknod
 17

	)

19 
	#SYS_u∆ök
 18

	)

20 
	#SYS_lök
 19

	)

21 
	#SYS_mkdú
 20

	)

22 
	#SYS_˛o£
 21

	)

23 
	#SYS_ã°
 22

	)

24 
	#SYS_ksmgë
 23

	)

25 
	#SYS_ksm©èch
 24

	)

26 
	#SYS_ksmdëach
 25

	)

27 
	#SYS_ksmöfo
 26

	)

28 
	#SYS_ksmdñëe
 27

	)

29 
	#SYS_pgu£d
 28

	)

30 
	#SYS_£m_gë
 29

	)

31 
	#SYS_£m_sig«l
 30

	)

32 
	#SYS_£m_waô
 31

	)

33 
	#SYS_£m_dñëe
 32

	)

	@sysfile.c

7 
	~"ty≥s.h
"

8 
	~"defs.h
"

9 
	~"∑øm.h
"

10 
	~"°©.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"fs.h
"

14 
	~"fûe.h
"

15 
	~"f˙é.h
"

20 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

22 
fd
;

23 
fûe
 *
f
;

25 if(
	`¨göt
(
n
, &
fd
) < 0)

27 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
¥oc
->
ofûe
[fd]) == 0)

29 if(
pfd
)

30 *
pfd
 = 
fd
;

31 if(
pf
)

32 *
pf
 = 
f
;

34 
	}
}

39 
	$fdÆloc
(
fûe
 *
f
)

41 
fd
;

43 
fd
 = 0; fd < 
NOFILE
; fd++){

44 if(
¥oc
->
ofûe
[
fd
] == 0){

45 
¥oc
->
ofûe
[
fd
] = 
f
;

46  
fd
;

50 
	}
}

53 
	$sys_dup
()

55 
fûe
 *
f
;

56 
fd
;

58 if(
	`¨gfd
(0, 0, &
f
) < 0)

60 if((
fd
=
	`fdÆloc
(
f
)) < 0)

62 
	`fûedup
(
f
);

63  
fd
;

64 
	}
}

67 
	$sys_ªad
()

69 
fûe
 *
f
;

70 
n
;

71 *
p
;

73 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

75  
	`fûîód
(
f
, 
p
, 
n
);

76 
	}
}

79 
	$sys_wrôe
()

81 
fûe
 *
f
;

82 
n
;

83 *
p
;

85 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

87  
	`fûewrôe
(
f
, 
p
, 
n
);

88 
	}
}

91 
	$sys_˛o£
()

93 
fd
;

94 
fûe
 *
f
;

96 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

98 
¥oc
->
ofûe
[
fd
] = 0;

99 
	`fûe˛o£
(
f
);

101 
	}
}

104 
	$sys_f°©
()

106 
fûe
 *
f
;

107 
°©
 *
°
;

109 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨g±r
(1, (*)&
°
, (*st)) < 0)

111  
	`fûe°©
(
f
, 
°
);

112 
	}
}

116 
	$sys_lök
()

118 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

119 
öode
 *
dp
, *
ù
;

121 if(
	`¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

123 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0)

126 
	`begö_å™s
();

128 
	`ûock
(
ù
);

129 if(
ù
->
ty≥
 =
T_DIR
){

130 
	`iu∆ockput
(
ù
);

131 
	`commô_å™s
();

135 
ù
->
∆ök
++;

136 
	`iupd©e
(
ù
);

137 
	`iu∆ock
(
ù
);

139 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

140 
bad
;

141 
	`ûock
(
dp
);

142 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0){

143 
	`iu∆ockput
(
dp
);

144 
bad
;

146 
	`iu∆ockput
(
dp
);

147 
	`ùut
(
ù
);

149 
	`commô_å™s
();

153 
bad
:

154 
	`ûock
(
ù
);

155 
ù
->
∆ök
--;

156 
	`iupd©e
(
ù
);

157 
	`iu∆ockput
(
ù
);

158 
	`commô_å™s
();

160 
	}
}

164 
	$isdúem±y
(
öode
 *
dp
)

166 
off
;

167 
dúít
 
de
;

169 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

170 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

171 
	`∑nic
("isdirempty:Ñeadi");

172 if(
de
.
öum
 != 0)

176 
	}
}

180 
	$sys_u∆ök
()

182 
öode
 *
ù
, *
dp
;

183 
dúít
 
de
;

184 
«me
[
DIRSIZ
], *
∑th
;

185 
uöt
 
off
;

187 if(
	`¨g°r
(0, &
∑th
) < 0)

189 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

192 
	`begö_å™s
();

194 
	`ûock
(
dp
);

197 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0)

198 
bad
;

200 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0)

201 
bad
;

202 
	`ûock
(
ù
);

204 if(
ù
->
∆ök
 < 1)

205 
	`∑nic
("unlink:Çlink < 1");

206 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

207 
	`iu∆ockput
(
ù
);

208 
bad
;

211 
	`mem£t
(&
de
, 0, (de));

212 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

213 
	`∑nic
("unlink: writei");

214 if(
ù
->
ty≥
 =
T_DIR
){

215 
dp
->
∆ök
--;

216 
	`iupd©e
(
dp
);

218 
	`iu∆ockput
(
dp
);

220 
ù
->
∆ök
--;

221 
	`iupd©e
(
ù
);

222 
	`iu∆ockput
(
ù
);

224 
	`commô_å™s
();

228 
bad
:

229 
	`iu∆ockput
(
dp
);

230 
	`commô_å™s
();

232 
	}
}

234 
öode
*

235 
	$¸óã
(*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

237 
uöt
 
off
;

238 
öode
 *
ù
, *
dp
;

239 
«me
[
DIRSIZ
];

241 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

243 
	`ûock
(
dp
);

245 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) != 0){

246 
	`iu∆ockput
(
dp
);

247 
	`ûock
(
ù
);

248 if(
ty≥
 =
T_FILE
 && 
ù
->type == T_FILE)

249  
ù
;

250 
	`iu∆ockput
(
ù
);

254 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0)

255 
	`∑nic
("create: ialloc");

257 
	`ûock
(
ù
);

258 
ù
->
maj‹
 = major;

259 
ù
->
mö‹
 = minor;

260 
ù
->
∆ök
 = 1;

261 
	`iupd©e
(
ù
);

263 if(
ty≥
 =
T_DIR
){

264 
dp
->
∆ök
++;

265 
	`iupd©e
(
dp
);

267 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

268 
	`∑nic
("create dots");

271 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0)

272 
	`∑nic
("create: dirlink");

274 
	`iu∆ockput
(
dp
);

276  
ù
;

277 
	}
}

280 
	$sys_›í
()

282 *
∑th
;

283 
fd
, 
omode
;

284 
fûe
 *
f
;

285 
öode
 *
ù
;

287 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

289 if(
omode
 & 
O_CREATE
){

290 
	`begö_å™s
();

291 
ù
 = 
	`¸óã
(
∑th
, 
T_FILE
, 0, 0);

292 
	`commô_å™s
();

293 if(
ù
 == 0)

296 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

298 
	`ûock
(
ù
);

299 if(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
){

300 
	`iu∆ockput
(
ù
);

305 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

306 if(
f
)

307 
	`fûe˛o£
(
f
);

308 
	`iu∆ockput
(
ù
);

311 
	`iu∆ock
(
ù
);

313 
f
->
ty≥
 = 
FD_INODE
;

314 
f
->
ù
 = ip;

315 
f
->
off
 = 0;

316 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

317 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

318  
fd
;

319 
	}
}

322 
	$sys_mkdú
()

324 *
∑th
;

325 
öode
 *
ù
;

327 
	`begö_å™s
();

328 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 
T_DIR
, 0, 0)) == 0){

329 
	`commô_å™s
();

332 
	`iu∆ockput
(
ù
);

333 
	`commô_å™s
();

335 
	}
}

338 
	$sys_mknod
()

340 
öode
 *
ù
;

341 *
∑th
;

342 
Àn
;

343 
maj‹
, 
mö‹
;

345 
	`begö_å™s
();

346 if((
Àn
=
	`¨g°r
(0, &
∑th
)) < 0 ||

347 
	`¨göt
(1, &
maj‹
) < 0 ||

348 
	`¨göt
(2, &
mö‹
) < 0 ||

349 (
ù
 = 
	`¸óã
(
∑th
, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0){

350 
	`commô_å™s
();

353 
	`iu∆ockput
(
ù
);

354 
	`commô_å™s
();

356 
	}
}

359 
	$sys_chdú
()

361 *
∑th
;

362 
öode
 *
ù
;

364 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0)

366 
	`ûock
(
ù
);

367 if(
ù
->
ty≥
 !
T_DIR
){

368 
	`iu∆ockput
(
ù
);

371 
	`iu∆ock
(
ù
);

372 
	`ùut
(
¥oc
->
cwd
);

373 
¥oc
->
cwd
 = 
ù
;

375 
	}
}

378 
	$sys_exec
()

380 *
∑th
, *
¨gv
[
MAXARG
];

381 
i
;

382 
uöt
 
u¨gv
, 
u¨g
;

384 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, (*)&
u¨gv
) < 0){

387 
	`mem£t
(
¨gv
, 0, (argv));

388 
i
=0;; i++){

389 if(
i
 >
	`NELEM
(
¨gv
))

391 if(
	`„tchöt
(
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

393 if(
u¨g
 == 0){

394 
¨gv
[
i
] = 0;

397 if(
	`„tch°r
(
u¨g
, &
¨gv
[
i
]) < 0)

400  
	`exec
(
∑th
, 
¨gv
);

401 
	}
}

404 
	$sys_pùe
()

406 *
fd
;

407 
fûe
 *
rf
, *
wf
;

408 
fd0
, 
fd1
;

410 if(
	`¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

412 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

414 
fd0
 = -1;

415 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

416 if(
fd0
 >= 0)

417 
¥oc
->
ofûe
[
fd0
] = 0;

418 
	`fûe˛o£
(
rf
);

419 
	`fûe˛o£
(
wf
);

422 
fd
[0] = 
fd0
;

423 
fd
[1] = 
fd1
;

425 
	}
}

428 
	$sys_ã°
()

430 
	`˝rötf
("sys_test\n");

432 
	}
}

436 
	$sys_ksmgë
()

438 *
«me
;

439 
uöt
 
size
;

441 if(
	`¨g°r
(0, &
«me
Ë< 0 || 
	`¨göt
(1, (*)&
size
) < 0){

445  
	`ksmgë
(
«me
, 
size
);

446 
	}
}

449 
	$sys_ksm©èch
()

451 
hd
, 
Êag
;

453 if(
	`¨göt
(0, &
hd
Ë< 0 ||árgöt(1, &
Êag
) < 0){

457  
	`ksm©èch
(
hd
, 
Êag
);

458 
	}
}

461 
	$sys_ksmdëach
()

463 
hd
;

465 if(
	`¨göt
(0, &
hd
) < 0){

469  
	`ksmdëach
(
hd
);

470 
	}
}

473 
	$sys_ksmöfo
()

475 
hd
;

476 
ksmöfo_t
* 
öfo
;

478 if(
	`¨göt
(0, &
hd
) < 0

479 || 
	`¨g±r
(1, (*)&
öfo
, (info)) < 0){

483  
	`ksmöfo
(
hd
, 
öfo
);

484 
	}
}

487 
	$sys_ksmdñëe
()

489 
hd
;

491 if(
	`¨göt
(0, &
hd
) < 0){

495  
	`ksmdñëe
(
hd
);

496 
	}
}

499 
	$sys_pgu£d
()

501  
	`pgu£d
();

502 
	}
}

505 
	$sys_£m_gë
()

507 
«me
, 
vÆue
;

509 if(
	`¨göt
(0, &
«me
Ë< 0 ||árgöt(1, &
vÆue
) < 0){

513  
	`£m_gë
(
«me
, 
vÆue
);

514 
	}
}

517 
	$sys_£m_sig«l
()

519 
hd
;

521 if(
	`¨göt
(0, &
hd
) < 0){

525  
	`£m_sig«l
(
hd
);

526 
	}
}

529 
	$sys_£m_waô
()

531 
hd
;

533 if(
	`¨göt
(0, &
hd
) < 0){

537  
	`£m_waô
(
hd
);

538 
	}
}

541 
	$sys_£m_dñëe
()

543 
hd
;

545 if(
	`¨göt
(0, &
hd
) < 0){

549  
	`£m_dñëe
(
hd
);

550 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

10 
	$sys_f‹k
()

12  
	`f‹k
();

13 
	}
}

16 
	$sys_exô
()

18 
	`exô
();

20 
	}
}

23 
	$sys_waô
()

25  
	`waô
();

26 
	}
}

29 
	$sys_kûl
()

31 
pid
;

33 if(
	`¨göt
(0, &
pid
) < 0)

35  
	`kûl
(
pid
);

36 
	}
}

39 
	$sys_gëpid
()

41  
¥oc
->
pid
;

42 
	}
}

45 
	$sys_sbrk
()

47 
addr
;

48 
n
;

50 if(
	`¨göt
(0, &
n
) < 0)

52 
addr
 = 
¥oc
->
sz
;

53 if(
	`grow¥oc
(
n
) < 0)

55  
addr
;

56 
	}
}

59 
	$sys_¶ìp
()

61 
n
;

62 
uöt
 
ticks0
;

64 if(
	`¨göt
(0, &
n
) < 0)

66 
	`acquúe
(&
tick¶ock
);

67 
ticks0
 = 
ticks
;

68 
ticks
 - 
ticks0
 < 
n
){

69 if(
¥oc
->
kûÀd
){

70 
	`ªÀa£
(&
tick¶ock
);

73 
	`¶ìp
(&
ticks
, &
tick¶ock
);

75 
	`ªÀa£
(&
tick¶ock
);

77 
	}
}

82 
	$sys_u±ime
()

84 
uöt
 
xticks
;

86 
	`acquúe
(&
tick¶ock
);

87 
xticks
 = 
ticks
;

88 
	`ªÀa£
(&
tick¶ock
);

89  
xticks
;

90 
	}
}

	@systest.c

1 
	~"ty≥s.h
"

2 
	~"u£r.h
"

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
	`ã°
();

8 
	`exô
();

9 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timîöô
()

28 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

30 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

31 
	`pi˚«bÀ
(
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

12 
g©edesc
 
	gidt
[256];

13 
uöt
 
ve˘‹s
[];

14 
•ölock
 
	gtick¶ock
;

15 
uöt
 
	gticks
;

18 
	$tvöô
()

20 
i
;

22 
i
 = 0; i < 256; i++)

23 
	`SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

24 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

26 
	`öôlock
(&
tick¶ock
, "time");

27 
	}
}

30 
	$idtöô
()

32 
	`lidt
(
idt
, (idt));

33 
	}
}

37 
	$å≠
(
å≠‰ame
 *
tf
)

39 if(
tf
->
å≠no
 =
T_SYSCALL
){

40 if(
¥oc
->
kûÀd
)

41 
	`exô
();

42 
¥oc
->
tf
 =Åf;

43 
	`sysˇŒ
();

44 if(
¥oc
->
kûÀd
)

45 
	`exô
();

49 
tf
->
å≠no
){

50 
T_IRQ0
 + 
IRQ_TIMER
:

51 if(
˝u
->
id
 == 0){

52 
	`acquúe
(&
tick¶ock
);

53 
ticks
++;

54 
	`wakeup
(&
ticks
);

55 
	`ªÀa£
(&
tick¶ock
);

57 
	`œpi˚oi
();

59 
T_IRQ0
 + 
IRQ_IDE
:

60 
	`ideöå
();

61 
	`œpi˚oi
();

63 
T_IRQ0
 + 
IRQ_IDE
+1:

66 
T_IRQ0
 + 
IRQ_KBD
:

67 
	`kbdöå
();

68 
	`œpi˚oi
();

70 
T_IRQ0
 + 
IRQ_COM1
:

71 
	`u¨töå
();

72 
	`œpi˚oi
();

74 
T_IRQ0
 + 7:

75 
T_IRQ0
 + 
IRQ_SPURIOUS
:

76 
	`˝rötf
("cpu%d: spurious interruptát %x:%x\n",

77 
˝u
->
id
, 
tf
->
cs
,Åf->
eù
);

78 
	`œpi˚oi
();

83 if(
¥oc
 =0 || (
tf
->
cs
&3) == 0){

85 
	`˝rötf
("unexpectedÅrap %d from cpu %dÉip %x (cr2=0x%x)\n",

86 
tf
->
å≠no
, 
˝u
->
id
,Åf->
eù
, 
	`r¸2
());

87 
	`∑nic
("trap");

90 
	`˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %d "

92 
¥oc
->
pid
,Öroc->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
->
id
,Åf->
eù
,

93 
	`r¸2
());

94 
¥oc
->
kûÀd
 = 1;

100 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

101 
	`exô
();

105 if(
¥oc
 &&Öroc->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
T_IRQ0
+
IRQ_TIMER
)

106 
	`yõld
();

109 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

110 
	`exô
();

111 
	}
}

	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 64

28 
	#T_DEFAULT
 500

29 

	)

30 
	#T_IRQ0
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_COM1
 4

	)

35 
	#IRQ_IDE
 14

	)

36 
	#IRQ_ERROR
 19

	)

37 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

4 
uöt
 
	tpde_t
;

	@uart.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"å≠s.h
"

7 
	~"•ölock.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

12 
	~"x86.h
"

14 
	#COM1
 0x3f8

	)

16 
	gu¨t
;

19 
	$u¨töô
()

21 *
p
;

24 
	`outb
(
COM1
+2, 0);

27 
	`outb
(
COM1
+3, 0x80);

28 
	`outb
(
COM1
+0, 115200/9600);

29 
	`outb
(
COM1
+1, 0);

30 
	`outb
(
COM1
+3, 0x03);

31 
	`outb
(
COM1
+4, 0);

32 
	`outb
(
COM1
+1, 0x01);

35 if(
	`öb
(
COM1
+5) == 0xFF)

37 
u¨t
 = 1;

41 
	`öb
(
COM1
+2);

42 
	`öb
(
COM1
+0);

43 
	`pi˚«bÀ
(
IRQ_COM1
);

44 
	`iﬂpi˚«bÀ
(
IRQ_COM1
, 0);

47 
p
="xv6...\n"; *p;Ö++)

48 
	`u¨çutc
(*
p
);

49 
	}
}

52 
	$u¨çutc
(
c
)

54 
i
;

56 if(!
u¨t
)

58 
i
 = 0; i < 128 && !(
	`öb
(
COM1
+5) & 0x20); i++)

59 
	`mi¸odñay
(10);

60 
	`outb
(
COM1
+0, 
c
);

61 
	}
}

64 
	$u¨tgëc
()

66 if(!
u¨t
)

68 if(!(
	`öb
(
COM1
+5) & 0x01))

70  
	`öb
(
COM1
+0);

71 
	}
}

74 
	$u¨töå
()

76 
	`c⁄sﬁeöå
(
u¨tgëc
);

77 
	}
}

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

5 
	~"x86.h
"

8 
	$°r˝y
(*
s
, *
t
)

10 *
os
;

12 
os
 = 
s
;

13 (*
s
++ = *
t
++) != 0)

15  
os
;

16 
	}
}

19 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

21 *
p
 && *∞=*
q
)

22 
p
++, 
q
++;

23  (
uch¨
)*
p
 - (uch¨)*
q
;

24 
	}
}

26 
uöt


27 
	$°æí
(*
s
)

29 
n
;

31 
n
 = 0; 
s
[n];Ç++)

33  
n
;

34 
	}
}

37 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

39 
	`°osb
(
d°
, 
c
, 
n
);

40  
d°
;

41 
	}
}

44 
	$°rchr
(c⁄° *
s
, 
c
)

46 ; *
s
; s++)

47 if(*
s
 =
c
)

48  (*)
s
;

50 
	}
}

53 
	$gës
(*
buf
, 
max
)

55 
i
, 
cc
;

56 
c
;

58 
i
=0; i+1 < 
max
; ){

59 
cc
 = 
	`ªad
(0, &
c
, 1);

60 if(
cc
 < 1)

62 
buf
[
i
++] = 
c
;

63 if(
c
 == '\n' || c == '\r')

66 
buf
[
i
] = '\0';

67  
buf
;

68 
	}
}

71 
	$°©
(*
n
, 
°©
 *
°
)

73 
fd
;

74 
r
;

76 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

77 if(
fd
 < 0)

79 
r
 = 
	`f°©
(
fd
, 
°
);

80 
	`˛o£
(
fd
);

81  
r
;

82 
	}
}

85 
	$©oi
(c⁄° *
s
)

87 
n
;

89 
n
 = 0;

90 '0' <*
s
 && *s <= '9')

91 
n
 =Ç*10 + *
s
++ - '0';

92  
n
;

93 
	}
}

96 
	$memmove
(*
vd°
, *
v§c
, 
n
)

98 *
d°
, *
§c
;

100 
d°
 = 
vd°
;

101 
§c
 = 
v§c
;

102 
n
-- > 0)

103 *
d°
++ = *
§c
++;

104  
vd°
;

105 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*)
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 4096)

53 
nu
 = 4096;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*)-1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*)(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user.h

1 
	g°©
;

2 
	gksmöfo_t
;

5 
f‹k
();

6 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

7 
	`waô
();

8 
	`pùe
(*);

9 
	`wrôe
(, *, );

10 
	`ªad
(, *, );

11 
	`˛o£
();

12 
	`kûl
();

13 
	`exec
(*, **);

14 
	`›í
(*, );

15 
	`mknod
(*, , );

16 
	`u∆ök
(*);

17 
	`f°©
(
fd
, 
°©
*);

18 
	`lök
(*, *);

19 
	`mkdú
(*);

20 
	`chdú
(*);

21 
	`dup
();

22 
	`gëpid
();

23 * 
	`sbrk
();

24 
	`¶ìp
();

25 
	`u±ime
();

26 
	`ã°
();

28 
	`ksmgë
(* 
«me
, 
uöt
 
size
);

29 
	`ksm©èch
(
hd
, 
Êag
);

30 
	`ksmdëach
(
hd
);

31 
	`ksmöfo
(
hd
, 
ksmöfo_t
* 
öfo
);

32 
	`ksmdñëe
(
hd
);

34 
	`£m_gë
(
uöt
 
«me
, 
vÆue
);

35 
	`£m_sig«l
(
hd
);

36 
	`£m_waô
(
hd
);

37 
	`£m_dñëe
(
hd
);

40 
	`°©
(*, 
°©
*);

41 * 
	`°r˝y
(*, *);

42 *
	`memmove
(*, *, );

43 * 
	`°rchr
(c⁄° *, 
c
);

44 
	`°rcmp
(const *, const *);

45 
	`¥ötf
(, *, ...);

46 * 
	`gës
(*, 
max
);

47 
uöt
 
	`°æí
(*);

48 * 
	`mem£t
(*, , 
uöt
);

49 * 
	`mÆloc
(
uöt
);

50 
	`‰ì
(*);

51 
	`©oi
(const *);

52 
	`pgu£d
();

	@usertests.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"°©.h
"

4 
	~"u£r.h
"

5 
	~"fs.h
"

6 
	~"f˙é.h
"

7 
	~"sysˇŒ.h
"

8 
	~"å≠s.h
"

9 
	~"memœyout.h
"

11 
	gbuf
[8192];

12 
	g«me
[3];

13 *
	gechﬂrgv
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

14 
	g°dout
 = 1;

19 
	$›íã°
()

21 
fd
;

23 
	`¥ötf
(
°dout
, "openÅest\n");

24 
fd
 = 
	`›í
("echo", 0);

25 if(
fd
 < 0){

26 
	`¥ötf
(
°dout
, "openÉcho failed!\n");

27 
	`exô
();

29 
	`˛o£
(
fd
);

30 
fd
 = 
	`›í
("doesnotexist", 0);

31 if(
fd
 >= 0){

32 
	`¥ötf
(
°dout
, "open doesnotexist succeeded!\n");

33 
	`exô
();

35 
	`¥ötf
(
°dout
, "openÅest ok\n");

36 
	}
}

39 
	$wrôëe°
()

41 
fd
;

42 
i
;

44 
	`¥ötf
(
°dout
, "small fileÅest\n");

45 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

46 if(
fd
 >= 0){

47 
	`¥ötf
(
°dout
, "creat small succeeded; ok\n");

49 
	`¥ötf
(
°dout
, "error: creat small failed!\n");

50 
	`exô
();

52 
i
 = 0; i < 100; i++){

53 if(
	`wrôe
(
fd
, "aaaaaaaaaa", 10) != 10){

54 
	`¥ötf
(
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

55 
	`exô
();

57 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 10) != 10){

58 
	`¥ötf
(
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

59 
	`exô
();

62 
	`¥ötf
(
°dout
, "writes ok\n");

63 
	`˛o£
(
fd
);

64 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

65 if(
fd
 >= 0){

66 
	`¥ötf
(
°dout
, "open small succeeded ok\n");

68 
	`¥ötf
(
°dout
, "error: open small failed!\n");

69 
	`exô
();

71 
i
 = 
	`ªad
(
fd
, 
buf
, 2000);

72 if(
i
 == 2000){

73 
	`¥ötf
(
°dout
, "read succeeded ok\n");

75 
	`¥ötf
(
°dout
, "read failed\n");

76 
	`exô
();

78 
	`˛o£
(
fd
);

80 if(
	`u∆ök
("small") < 0){

81 
	`¥ötf
(
°dout
, "unlink small failed\n");

82 
	`exô
();

84 
	`¥ötf
(
°dout
, "small fileÅest ok\n");

85 
	}
}

88 
	$wrôëe°1
()

90 
i
, 
fd
, 
n
;

92 
	`¥ötf
(
°dout
, "big filesÅest\n");

94 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

95 if(
fd
 < 0){

96 
	`¥ötf
(
°dout
, "error: creat big failed!\n");

97 
	`exô
();

100 
i
 = 0; i < 
MAXFILE
; i++){

101 ((*)
buf
)[0] = 
i
;

102 if(
	`wrôe
(
fd
, 
buf
, 512) != 512){

103 
	`¥ötf
(
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

104 
	`exô
();

108 
	`˛o£
(
fd
);

110 
fd
 = 
	`›í
("big", 
O_RDONLY
);

111 if(
fd
 < 0){

112 
	`¥ötf
(
°dout
, "error: open big failed!\n");

113 
	`exô
();

116 
n
 = 0;

118 
i
 = 
	`ªad
(
fd
, 
buf
, 512);

119 if(
i
 == 0){

120 if(
n
 =
MAXFILE
 - 1){

121 
	`¥ötf
(
°dout
, "ªad o∆y %d block†‰om big", 
n
);

122 
	`exô
();

125 } if(
i
 != 512){

126 
	`¥ötf
(
°dout
, "ªad faûed %d\n", 
i
);

127 
	`exô
();

129 if(((*)
buf
)[0] !
n
){

130 
	`¥ötf
(
°dout
, "read content of block %d is %d\n",

131 
n
, ((*)
buf
)[0]);

132 
	`exô
();

134 
n
++;

136 
	`˛o£
(
fd
);

137 if(
	`u∆ök
("big") < 0){

138 
	`¥ötf
(
°dout
, "unlink big failed\n");

139 
	`exô
();

141 
	`¥ötf
(
°dout
, "big files ok\n");

142 
	}
}

145 
	$¸óãã°
()

147 
i
, 
fd
;

149 
	`¥ötf
(
°dout
, "many creates, followed by unlinkÅest\n");

151 
«me
[0] = 'a';

152 
«me
[2] = '\0';

153 
i
 = 0; i < 52; i++){

154 
«me
[1] = '0' + 
i
;

155 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

156 
	`˛o£
(
fd
);

158 
«me
[0] = 'a';

159 
«me
[2] = '\0';

160 
i
 = 0; i < 52; i++){

161 
«me
[1] = '0' + 
i
;

162 
	`u∆ök
(
«me
);

164 
	`¥ötf
(
°dout
, "many creates, followed by unlink; ok\n");

165 
	}
}

167 
	$dúã°
()

169 
	`¥ötf
(
°dout
, "mkdirÅest\n");

171 if(
	`mkdú
("dir0") < 0){

172 
	`¥ötf
(
°dout
, "mkdir failed\n");

173 
	`exô
();

176 if(
	`chdú
("dir0") < 0){

177 
	`¥ötf
(
°dout
, "chdir dir0 failed\n");

178 
	`exô
();

181 if(
	`chdú
("..") < 0){

182 
	`¥ötf
(
°dout
, "chdir .. failed\n");

183 
	`exô
();

186 if(
	`u∆ök
("dir0") < 0){

187 
	`¥ötf
(
°dout
, "unlink dir0 failed\n");

188 
	`exô
();

190 
	`¥ötf
(
°dout
, "mkdirÅest\n");

191 
	}
}

194 
	$exe˘e°
()

196 
	`¥ötf
(
°dout
, "execÅest\n");

197 if(
	`exec
("echo", 
echﬂrgv
) < 0){

198 
	`¥ötf
(
°dout
, "execÉcho failed\n");

199 
	`exô
();

201 
	}
}

206 
	$pùe1
()

208 
fds
[2], 
pid
;

209 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

211 if(
	`pùe
(
fds
) != 0){

212 
	`¥ötf
(1, "pipe() failed\n");

213 
	`exô
();

215 
pid
 = 
	`f‹k
();

216 
£q
 = 0;

217 if(
pid
 == 0){

218 
	`˛o£
(
fds
[0]);

219 
n
 = 0;Ç < 5;Ç++){

220 
i
 = 0; i < 1033; i++)

221 
buf
[
i
] = 
£q
++;

222 if(
	`wrôe
(
fds
[1], 
buf
, 1033) != 1033){

223 
	`¥ötf
(1, "pipe1 oops 1\n");

224 
	`exô
();

227 
	`exô
();

228 } if(
pid
 > 0){

229 
	`˛o£
(
fds
[1]);

230 
tŸÆ
 = 0;

231 
cc
 = 1;

232 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

233 
i
 = 0; i < 
n
; i++){

234 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

235 
	`¥ötf
(1, "pipe1 oops 2\n");

239 
tŸÆ
 +
n
;

240 
cc
 = cc * 2;

241 if(
cc
 > (
buf
))

242 
cc
 = (
buf
);

244 if(
tŸÆ
 != 5 * 1033){

245 
	`¥ötf
(1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

246 
	`exô
();

248 
	`˛o£
(
fds
[0]);

249 
	`waô
();

251 
	`¥ötf
(1, "fork() failed\n");

252 
	`exô
();

254 
	`¥ötf
(1, "pipe1 ok\n");

255 
	}
}

259 
	$¥ìm±
()

261 
pid1
, 
pid2
, 
pid3
;

262 
pfds
[2];

264 
	`¥ötf
(1, "preempt: ");

265 
pid1
 = 
	`f‹k
();

266 if(
pid1
 == 0)

270 
pid2
 = 
	`f‹k
();

271 if(
pid2
 == 0)

275 
	`pùe
(
pfds
);

276 
pid3
 = 
	`f‹k
();

277 if(
pid3
 == 0){

278 
	`˛o£
(
pfds
[0]);

279 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

280 
	`¥ötf
(1, "preempt writeÉrror");

281 
	`˛o£
(
pfds
[1]);

286 
	`˛o£
(
pfds
[1]);

287 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

288 
	`¥ötf
(1, "preemptÑeadÉrror");

291 
	`˛o£
(
pfds
[0]);

292 
	`¥ötf
(1, "kill... ");

293 
	`kûl
(
pid1
);

294 
	`kûl
(
pid2
);

295 
	`kûl
(
pid3
);

296 
	`¥ötf
(1, "wait... ");

297 
	`waô
();

298 
	`waô
();

299 
	`waô
();

300 
	`¥ötf
(1, "preempt ok\n");

301 
	}
}

305 
	$exôwaô
()

307 
i
, 
pid
;

309 
i
 = 0; i < 100; i++){

310 
pid
 = 
	`f‹k
();

311 if(
pid
 < 0){

312 
	`¥ötf
(1, "fork failed\n");

315 if(
pid
){

316 if(
	`waô
(Ë!
pid
){

317 
	`¥ötf
(1, "wait wrongÖid\n");

321 
	`exô
();

324 
	`¥ötf
(1, "exitwait ok\n");

325 
	}
}

328 
	$mem
()

330 *
m1
, *
m2
;

331 
pid
, 
µid
;

333 
	`¥ötf
(1, "memÅest\n");

334 
µid
 = 
	`gëpid
();

335 if((
pid
 = 
	`f‹k
()) == 0){

336 
m1
 = 0;

337 (
m2
 = 
	`mÆloc
(10001)) != 0){

338 *(**)
m2
 = 
m1
;

339 
m1
 = 
m2
;

341 
m1
){

342 
m2
 = *(**)
m1
;

343 
	`‰ì
(
m1
);

344 
m1
 = 
m2
;

346 
m1
 = 
	`mÆloc
(1024*20);

347 if(
m1
 == 0){

348 
	`¥ötf
(1, "couldn'tállocate mem?!!\n");

349 
	`kûl
(
µid
);

350 
	`exô
();

352 
	`‰ì
(
m1
);

353 
	`¥ötf
(1, "mem ok\n");

354 
	`exô
();

356 
	`waô
();

358 
	}
}

365 
	$sh¨edfd
()

367 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

368 
buf
[10];

370 
	`¥ötf
(1, "sharedfdÅest\n");

372 
	`u∆ök
("sharedfd");

373 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

374 if(
fd
 < 0){

375 
	`¥ötf
(1, "fstests: cannot open sharedfd for writing");

378 
pid
 = 
	`f‹k
();

379 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

380 
i
 = 0; i < 1000; i++){

381 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

382 
	`¥ötf
(1, "fstests: write sharedfd failed\n");

386 if(
pid
 == 0)

387 
	`exô
();

389 
	`waô
();

390 
	`˛o£
(
fd
);

391 
fd
 = 
	`›í
("sharedfd", 0);

392 if(
fd
 < 0){

393 
	`¥ötf
(1, "fstests: cannot open sharedfd forÑeading\n");

396 
nc
 = 
≈
 = 0;

397 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

398 
i
 = 0; i < (
buf
); i++){

399 if(
buf
[
i
] == 'c')

400 
nc
++;

401 if(
buf
[
i
] == 'p')

402 
≈
++;

405 
	`˛o£
(
fd
);

406 
	`u∆ök
("sharedfd");

407 if(
nc
 =10000 && 
≈
 == 10000){

408 
	`¥ötf
(1, "sharedfd ok\n");

410 
	`¥ötf
(1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

411 
	`exô
();

413 
	}
}

418 
	$twofûes
()

420 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
;

421 *
‚ame
;

423 
	`¥ötf
(1, "twofilesÅest\n");

425 
	`u∆ök
("f1");

426 
	`u∆ök
("f2");

428 
pid
 = 
	`f‹k
();

429 if(
pid
 < 0){

430 
	`¥ötf
(1, "fork failed\n");

431 
	`exô
();

434 
‚ame
 = 
pid
 ? "f1" : "f2";

435 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

436 if(
fd
 < 0){

437 
	`¥ötf
(1, "create failed\n");

438 
	`exô
();

441 
	`mem£t
(
buf
, 
pid
?'p':'c', 512);

442 
i
 = 0; i < 12; i++){

443 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 500)) != 500){

444 
	`¥ötf
(1, "wrôêÁûed %d\n", 
n
);

445 
	`exô
();

448 
	`˛o£
(
fd
);

449 if(
pid
)

450 
	`waô
();

452 
	`exô
();

454 
i
 = 0; i < 2; i++){

455 
fd
 = 
	`›í
(
i
?"f1":"f2", 0);

456 
tŸÆ
 = 0;

457 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

458 
j
 = 0; j < 
n
; j++){

459 if(
buf
[
j
] !(
i
?'p':'c')){

460 
	`¥ötf
(1, "wrong char\n");

461 
	`exô
();

464 
tŸÆ
 +
n
;

466 
	`˛o£
(
fd
);

467 if(
tŸÆ
 != 12*500){

468 
	`¥ötf
(1, "wr⁄gÜígth %d\n", 
tŸÆ
);

469 
	`exô
();

473 
	`u∆ök
("f1");

474 
	`u∆ök
("f2");

476 
	`¥ötf
(1, "twofiles ok\n");

477 
	}
}

481 
	$¸óãdñëe
()

483 íum { 
N
 = 20 };

484 
pid
, 
i
, 
fd
;

485 
«me
[32];

487 
	`¥ötf
(1, "createdeleteÅest\n");

488 
pid
 = 
	`f‹k
();

489 if(
pid
 < 0){

490 
	`¥ötf
(1, "fork failed\n");

491 
	`exô
();

494 
«me
[0] = 
pid
 ? 'p' : 'c';

495 
«me
[2] = '\0';

496 
i
 = 0; i < 
N
; i++){

497 
«me
[1] = '0' + 
i
;

498 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

499 if(
fd
 < 0){

500 
	`¥ötf
(1, "create failed\n");

501 
	`exô
();

503 
	`˛o£
(
fd
);

504 if(
i
 > 0 && (i % 2 ) == 0){

505 
«me
[1] = '0' + (
i
 / 2);

506 if(
	`u∆ök
(
«me
) < 0){

507 
	`¥ötf
(1, "unlink failed\n");

508 
	`exô
();

513 if(
pid
==0)

514 
	`exô
();

516 
	`waô
();

518 
i
 = 0; i < 
N
; i++){

519 
«me
[0] = 'p';

520 
«me
[1] = '0' + 
i
;

521 
fd
 = 
	`›í
(
«me
, 0);

522 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

523 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

524 
	`exô
();

525 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

526 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

527 
	`exô
();

529 if(
fd
 >= 0)

530 
	`˛o£
(
fd
);

532 
«me
[0] = 'c';

533 
«me
[1] = '0' + 
i
;

534 
fd
 = 
	`›í
(
«me
, 0);

535 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

536 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

537 
	`exô
();

538 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

539 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

540 
	`exô
();

542 if(
fd
 >= 0)

543 
	`˛o£
(
fd
);

546 
i
 = 0; i < 
N
; i++){

547 
«me
[0] = 'p';

548 
«me
[1] = '0' + 
i
;

549 
	`u∆ök
(
«me
);

550 
«me
[0] = 'c';

551 
	`u∆ök
(
«me
);

554 
	`¥ötf
(1, "createdelete ok\n");

555 
	}
}

559 
	$u∆ökªad
()

561 
fd
, 
fd1
;

563 
	`¥ötf
(1, "unlinkreadÅest\n");

564 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

565 if(
fd
 < 0){

566 
	`¥ötf
(1, "create unlinkread failed\n");

567 
	`exô
();

569 
	`wrôe
(
fd
, "hello", 5);

570 
	`˛o£
(
fd
);

572 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

573 if(
fd
 < 0){

574 
	`¥ötf
(1, "open unlinkread failed\n");

575 
	`exô
();

577 if(
	`u∆ök
("unlinkread") != 0){

578 
	`¥ötf
(1, "unlink unlinkread failed\n");

579 
	`exô
();

582 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

583 
	`wrôe
(
fd1
, "yyy", 3);

584 
	`˛o£
(
fd1
);

586 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

587 
	`¥ötf
(1, "unlinkreadÑead failed");

588 
	`exô
();

590 if(
buf
[0] != 'h'){

591 
	`¥ötf
(1, "unlinkread wrong data\n");

592 
	`exô
();

594 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

595 
	`¥ötf
(1, "unlinkread write failed\n");

596 
	`exô
();

598 
	`˛o£
(
fd
);

599 
	`u∆ök
("unlinkread");

600 
	`¥ötf
(1, "unlinkread ok\n");

601 
	}
}

604 
	$lökã°
()

606 
fd
;

608 
	`¥ötf
(1, "linktest\n");

610 
	`u∆ök
("lf1");

611 
	`u∆ök
("lf2");

613 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

614 if(
fd
 < 0){

615 
	`¥ötf
(1, "createÜf1 failed\n");

616 
	`exô
();

618 if(
	`wrôe
(
fd
, "hello", 5) != 5){

619 
	`¥ötf
(1, "writeÜf1 failed\n");

620 
	`exô
();

622 
	`˛o£
(
fd
);

624 if(
	`lök
("lf1", "lf2") < 0){

625 
	`¥ötf
(1, "linkÜf1Üf2 failed\n");

626 
	`exô
();

628 
	`u∆ök
("lf1");

630 if(
	`›í
("lf1", 0) >= 0){

631 
	`¥ötf
(1, "unlinkedÜf1 but it is stillÅhere!\n");

632 
	`exô
();

635 
fd
 = 
	`›í
("lf2", 0);

636 if(
fd
 < 0){

637 
	`¥ötf
(1, "openÜf2 failed\n");

638 
	`exô
();

640 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

641 
	`¥ötf
(1, "readÜf2 failed\n");

642 
	`exô
();

644 
	`˛o£
(
fd
);

646 if(
	`lök
("lf2", "lf2") >= 0){

647 
	`¥ötf
(1, "linkÜf2Üf2 succeeded! oops\n");

648 
	`exô
();

651 
	`u∆ök
("lf2");

652 if(
	`lök
("lf2", "lf1") >= 0){

653 
	`¥ötf
(1, "linkÇon-existant succeeded! oops\n");

654 
	`exô
();

657 if(
	`lök
(".", "lf1") >= 0){

658 
	`¥ötf
(1, "link .Üf1 succeeded! oops\n");

659 
	`exô
();

662 
	`¥ötf
(1, "linktest ok\n");

663 
	}
}

667 
	$c⁄¸óã
()

669 
fûe
[3];

670 
i
, 
pid
, 
n
, 
fd
;

671 
Á
[40];

673 
ush‹t
 
öum
;

674 
«me
[14];

675 } 
de
;

677 
	`¥ötf
(1, "concreateÅest\n");

678 
fûe
[0] = 'C';

679 
fûe
[2] = '\0';

680 
i
 = 0; i < 40; i++){

681 
fûe
[1] = '0' + 
i
;

682 
	`u∆ök
(
fûe
);

683 
pid
 = 
	`f‹k
();

684 if(
pid
 && (
i
 % 3) == 1){

685 
	`lök
("C0", 
fûe
);

686 } if(
pid
 =0 && (
i
 % 5) == 1){

687 
	`lök
("C0", 
fûe
);

689 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

690 if(
fd
 < 0){

691 
	`¥ötf
(1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

692 
	`exô
();

694 
	`˛o£
(
fd
);

696 if(
pid
 == 0)

697 
	`exô
();

699 
	`waô
();

702 
	`mem£t
(
Á
, 0, (fa));

703 
fd
 = 
	`›í
(".", 0);

704 
n
 = 0;

705 
	`ªad
(
fd
, &
de
, (de)) > 0){

706 if(
de
.
öum
 == 0)

708 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

709 
i
 = 
de
.
«me
[1] - '0';

710 if(
i
 < 0 || i >(
Á
)){

711 
	`¥ötf
(1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

712 
	`exô
();

714 if(
Á
[
i
]){

715 
	`¥ötf
(1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

716 
	`exô
();

718 
Á
[
i
] = 1;

719 
n
++;

722 
	`˛o£
(
fd
);

724 if(
n
 != 40){

725 
	`¥ötf
(1, "concreateÇotÉnough files in directoryÜisting\n");

726 
	`exô
();

729 
i
 = 0; i < 40; i++){

730 
fûe
[1] = '0' + 
i
;

731 
pid
 = 
	`f‹k
();

732 if(
pid
 < 0){

733 
	`¥ötf
(1, "fork failed\n");

734 
	`exô
();

736 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

737 ((
i
 % 3Ë=1 && 
pid
 != 0)){

738 
	`˛o£
(
	`›í
(
fûe
, 0));

739 
	`˛o£
(
	`›í
(
fûe
, 0));

740 
	`˛o£
(
	`›í
(
fûe
, 0));

741 
	`˛o£
(
	`›í
(
fûe
, 0));

743 
	`u∆ök
(
fûe
);

744 
	`u∆ök
(
fûe
);

745 
	`u∆ök
(
fûe
);

746 
	`u∆ök
(
fûe
);

748 if(
pid
 == 0)

749 
	`exô
();

751 
	`waô
();

754 
	`¥ötf
(1, "concreate ok\n");

755 
	}
}

760 
	$löku∆ök
()

762 
pid
, 
i
;

764 
	`¥ötf
(1, "linkunlinkÅest\n");

766 
	`u∆ök
("x");

767 
pid
 = 
	`f‹k
();

768 if(
pid
 < 0){

769 
	`¥ötf
(1, "fork failed\n");

770 
	`exô
();

773 
x
 = (
pid
 ? 1 : 97);

774 
i
 = 0; i < 100; i++){

775 
x
 = x * 1103515245 + 12345;

776 if((
x
 % 3) == 0){

777 
	`˛o£
(
	`›í
("x", 
O_RDWR
 | 
O_CREATE
));

778 } if((
x
 % 3) == 1){

779 
	`lök
("cat", "x");

781 
	`u∆ök
("x");

785 if(
pid
)

786 
	`waô
();

788 
	`exô
();

790 
	`¥ötf
(1, "linkunlink ok\n");

791 
	}
}

795 
	$bigdú
()

797 
i
, 
fd
;

798 
«me
[10];

800 
	`¥ötf
(1, "bigdirÅest\n");

801 
	`u∆ök
("bd");

803 
fd
 = 
	`›í
("bd", 
O_CREATE
);

804 if(
fd
 < 0){

805 
	`¥ötf
(1, "bigdir create failed\n");

806 
	`exô
();

808 
	`˛o£
(
fd
);

810 
i
 = 0; i < 500; i++){

811 
«me
[0] = 'x';

812 
«me
[1] = '0' + (
i
 / 64);

813 
«me
[2] = '0' + (
i
 % 64);

814 
«me
[3] = '\0';

815 if(
	`lök
("bd", 
«me
) != 0){

816 
	`¥ötf
(1, "bigdirÜink failed\n");

817 
	`exô
();

821 
	`u∆ök
("bd");

822 
i
 = 0; i < 500; i++){

823 
«me
[0] = 'x';

824 
«me
[1] = '0' + (
i
 / 64);

825 
«me
[2] = '0' + (
i
 % 64);

826 
«me
[3] = '\0';

827 if(
	`u∆ök
(
«me
) != 0){

828 
	`¥ötf
(1, "bigdir unlink failed");

829 
	`exô
();

833 
	`¥ötf
(1, "bigdir ok\n");

834 
	}
}

837 
	$subdú
()

839 
fd
, 
cc
;

841 
	`¥ötf
(1, "subdirÅest\n");

843 
	`u∆ök
("ff");

844 if(
	`mkdú
("dd") != 0){

845 
	`¥ötf
(1, "subdir mkdir dd failed\n");

846 
	`exô
();

849 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

850 if(
fd
 < 0){

851 
	`¥ötf
(1, "create dd/ff failed\n");

852 
	`exô
();

854 
	`wrôe
(
fd
, "ff", 2);

855 
	`˛o£
(
fd
);

857 if(
	`u∆ök
("dd") >= 0){

858 
	`¥ötf
(1, "unlink dd (non-empty dir) succeeded!\n");

859 
	`exô
();

862 if(
	`mkdú
("/dd/dd") != 0){

863 
	`¥ötf
(1, "subdir mkdir dd/dd failed\n");

864 
	`exô
();

867 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

868 if(
fd
 < 0){

869 
	`¥ötf
(1, "create dd/dd/ff failed\n");

870 
	`exô
();

872 
	`wrôe
(
fd
, "FF", 2);

873 
	`˛o£
(
fd
);

875 
fd
 = 
	`›í
("dd/dd/../ff", 0);

876 if(
fd
 < 0){

877 
	`¥ötf
(1, "open dd/dd/../ff failed\n");

878 
	`exô
();

880 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

881 if(
cc
 !2 || 
buf
[0] != 'f'){

882 
	`¥ötf
(1, "dd/dd/../ff wrong content\n");

883 
	`exô
();

885 
	`˛o£
(
fd
);

887 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

888 
	`¥ötf
(1, "link dd/dd/ff dd/dd/ffff failed\n");

889 
	`exô
();

892 if(
	`u∆ök
("dd/dd/ff") != 0){

893 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

894 
	`exô
();

896 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

897 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded\n");

898 
	`exô
();

901 if(
	`chdú
("dd") != 0){

902 
	`¥ötf
(1, "chdir dd failed\n");

903 
	`exô
();

905 if(
	`chdú
("dd/../../dd") != 0){

906 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

907 
	`exô
();

909 if(
	`chdú
("dd/../../../dd") != 0){

910 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

911 
	`exô
();

913 if(
	`chdú
("./..") != 0){

914 
	`¥ötf
(1, "chdir ./.. failed\n");

915 
	`exô
();

918 
fd
 = 
	`›í
("dd/dd/ffff", 0);

919 if(
fd
 < 0){

920 
	`¥ötf
(1, "open dd/dd/ffff failed\n");

921 
	`exô
();

923 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

924 
	`¥ötf
(1, "read dd/dd/ffff wrongÜen\n");

925 
	`exô
();

927 
	`˛o£
(
fd
);

929 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

930 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded!\n");

931 
	`exô
();

934 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

935 
	`¥ötf
(1, "create dd/ff/ff succeeded!\n");

936 
	`exô
();

938 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

939 
	`¥ötf
(1, "create dd/xx/ff succeeded!\n");

940 
	`exô
();

942 if(
	`›í
("dd", 
O_CREATE
) >= 0){

943 
	`¥ötf
(1, "create dd succeeded!\n");

944 
	`exô
();

946 if(
	`›í
("dd", 
O_RDWR
) >= 0){

947 
	`¥ötf
(1, "open ddÑdwr succeeded!\n");

948 
	`exô
();

950 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

951 
	`¥ötf
(1, "open dd wronly succeeded!\n");

952 
	`exô
();

954 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

955 
	`¥ötf
(1, "link dd/ff/ff dd/dd/xx succeeded!\n");

956 
	`exô
();

958 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

959 
	`¥ötf
(1, "link dd/xx/ff dd/dd/xx succeeded!\n");

960 
	`exô
();

962 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

963 
	`¥ötf
(1, "link dd/ff dd/dd/ffff succeeded!\n");

964 
	`exô
();

966 if(
	`mkdú
("dd/ff/ff") == 0){

967 
	`¥ötf
(1, "mkdir dd/ff/ff succeeded!\n");

968 
	`exô
();

970 if(
	`mkdú
("dd/xx/ff") == 0){

971 
	`¥ötf
(1, "mkdir dd/xx/ff succeeded!\n");

972 
	`exô
();

974 if(
	`mkdú
("dd/dd/ffff") == 0){

975 
	`¥ötf
(1, "mkdir dd/dd/ffff succeeded!\n");

976 
	`exô
();

978 if(
	`u∆ök
("dd/xx/ff") == 0){

979 
	`¥ötf
(1, "unlink dd/xx/ff succeeded!\n");

980 
	`exô
();

982 if(
	`u∆ök
("dd/ff/ff") == 0){

983 
	`¥ötf
(1, "unlink dd/ff/ff succeeded!\n");

984 
	`exô
();

986 if(
	`chdú
("dd/ff") == 0){

987 
	`¥ötf
(1, "chdir dd/ff succeeded!\n");

988 
	`exô
();

990 if(
	`chdú
("dd/xx") == 0){

991 
	`¥ötf
(1, "chdir dd/xx succeeded!\n");

992 
	`exô
();

995 if(
	`u∆ök
("dd/dd/ffff") != 0){

996 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

997 
	`exô
();

999 if(
	`u∆ök
("dd/ff") != 0){

1000 
	`¥ötf
(1, "unlink dd/ff failed\n");

1001 
	`exô
();

1003 if(
	`u∆ök
("dd") == 0){

1004 
	`¥ötf
(1, "unlinkÇon-empty dd succeeded!\n");

1005 
	`exô
();

1007 if(
	`u∆ök
("dd/dd") < 0){

1008 
	`¥ötf
(1, "unlink dd/dd failed\n");

1009 
	`exô
();

1011 if(
	`u∆ök
("dd") < 0){

1012 
	`¥ötf
(1, "unlink dd failed\n");

1013 
	`exô
();

1016 
	`¥ötf
(1, "subdir ok\n");

1017 
	}
}

1021 
	$bigwrôe
()

1023 
fd
, 
sz
;

1025 
	`¥ötf
(1, "bigwriteÅest\n");

1027 
	`u∆ök
("bigwrite");

1028 
sz
 = 499; sz < 12*512; sz += 471){

1029 
fd
 = 
	`›í
("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1030 if(
fd
 < 0){

1031 
	`¥ötf
(1, "cannot create bigwrite\n");

1032 
	`exô
();

1034 
i
;

1035 
i
 = 0; i < 2; i++){

1036 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
sz
);

1037 if(
cc
 !
sz
){

1038 
	`¥ötf
(1, "wrôe(%dËªà%d\n", 
sz
, 
cc
);

1039 
	`exô
();

1042 
	`˛o£
(
fd
);

1043 
	`u∆ök
("bigwrite");

1046 
	`¥ötf
(1, "bigwrite ok\n");

1047 
	}
}

1050 
	$bigfûe
()

1052 
fd
, 
i
, 
tŸÆ
, 
cc
;

1054 
	`¥ötf
(1, "bigfileÅest\n");

1056 
	`u∆ök
("bigfile");

1057 
fd
 = 
	`›í
("bigfûe", 
O_CREATE
 | 
O_RDWR
);

1058 if(
fd
 < 0){

1059 
	`¥ötf
(1, "cannot create bigfile");

1060 
	`exô
();

1062 
i
 = 0; i < 20; i++){

1063 
	`mem£t
(
buf
, 
i
, 600);

1064 if(
	`wrôe
(
fd
, 
buf
, 600) != 600){

1065 
	`¥ötf
(1, "write bigfile failed\n");

1066 
	`exô
();

1069 
	`˛o£
(
fd
);

1071 
fd
 = 
	`›í
("bigfile", 0);

1072 if(
fd
 < 0){

1073 
	`¥ötf
(1, "cannot open bigfile\n");

1074 
	`exô
();

1076 
tŸÆ
 = 0;

1077 
i
 = 0; ; i++){

1078 
cc
 = 
	`ªad
(
fd
, 
buf
, 300);

1079 if(
cc
 < 0){

1080 
	`¥ötf
(1, "read bigfile failed\n");

1081 
	`exô
();

1083 if(
cc
 == 0)

1085 if(
cc
 != 300){

1086 
	`¥ötf
(1, "shortÑead bigfile\n");

1087 
	`exô
();

1089 if(
buf
[0] !
i
/2 || buf[299] != i/2){

1090 
	`¥ötf
(1, "read bigfile wrong data\n");

1091 
	`exô
();

1093 
tŸÆ
 +
cc
;

1095 
	`˛o£
(
fd
);

1096 if(
tŸÆ
 != 20*600){

1097 
	`¥ötf
(1, "read bigfile wrongÅotal\n");

1098 
	`exô
();

1100 
	`u∆ök
("bigfile");

1102 
	`¥ötf
(1, "bigfileÅest ok\n");

1103 
	}
}

1106 
	$fouπìn
()

1108 
fd
;

1111 
	`¥ötf
(1, "fourteenÅest\n");

1113 if(
	`mkdú
("12345678901234") != 0){

1114 
	`¥ötf
(1, "mkdir 12345678901234 failed\n");

1115 
	`exô
();

1117 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1118 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 failed\n");

1119 
	`exô
();

1121 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1122 if(
fd
 < 0){

1123 
	`¥ötf
(1, "create 123456789012345/123456789012345/123456789012345 failed\n");

1124 
	`exô
();

1126 
	`˛o£
(
fd
);

1127 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1128 if(
fd
 < 0){

1129 
	`¥ötf
(1, "open 12345678901234/12345678901234/12345678901234 failed\n");

1130 
	`exô
();

1132 
	`˛o£
(
fd
);

1134 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1135 
	`¥ötf
(1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1136 
	`exô
();

1138 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1139 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1140 
	`exô
();

1143 
	`¥ötf
(1, "fourteen ok\n");

1144 
	}
}

1147 
	$rmdŸ
()

1149 
	`¥ötf
(1, "rmdotÅest\n");

1150 if(
	`mkdú
("dots") != 0){

1151 
	`¥ötf
(1, "mkdir dots failed\n");

1152 
	`exô
();

1154 if(
	`chdú
("dots") != 0){

1155 
	`¥ötf
(1, "chdir dots failed\n");

1156 
	`exô
();

1158 if(
	`u∆ök
(".") == 0){

1159 
	`¥ötf
(1, "rm . worked!\n");

1160 
	`exô
();

1162 if(
	`u∆ök
("..") == 0){

1163 
	`¥ötf
(1, "rm .. worked!\n");

1164 
	`exô
();

1166 if(
	`chdú
("/") != 0){

1167 
	`¥ötf
(1, "chdir / failed\n");

1168 
	`exô
();

1170 if(
	`u∆ök
("dots/.") == 0){

1171 
	`¥ötf
(1, "unlink dots/. worked!\n");

1172 
	`exô
();

1174 if(
	`u∆ök
("dots/..") == 0){

1175 
	`¥ötf
(1, "unlink dots/.. worked!\n");

1176 
	`exô
();

1178 if(
	`u∆ök
("dots") != 0){

1179 
	`¥ötf
(1, "unlink dots failed!\n");

1180 
	`exô
();

1182 
	`¥ötf
(1, "rmdot ok\n");

1183 
	}
}

1186 
	$dúfûe
()

1188 
fd
;

1190 
	`¥ötf
(1, "dir vs file\n");

1192 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1193 if(
fd
 < 0){

1194 
	`¥ötf
(1, "create dirfile failed\n");

1195 
	`exô
();

1197 
	`˛o£
(
fd
);

1198 if(
	`chdú
("dirfile") == 0){

1199 
	`¥ötf
(1, "chdir dirfile succeeded!\n");

1200 
	`exô
();

1202 
fd
 = 
	`›í
("dirfile/xx", 0);

1203 if(
fd
 >= 0){

1204 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1205 
	`exô
();

1207 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1208 if(
fd
 >= 0){

1209 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1210 
	`exô
();

1212 if(
	`mkdú
("dirfile/xx") == 0){

1213 
	`¥ötf
(1, "mkdir dirfile/xx succeeded!\n");

1214 
	`exô
();

1216 if(
	`u∆ök
("dirfile/xx") == 0){

1217 
	`¥ötf
(1, "unlink dirfile/xx succeeded!\n");

1218 
	`exô
();

1220 if(
	`lök
("README", "dirfile/xx") == 0){

1221 
	`¥ötf
(1, "linkÅo dirfile/xx succeeded!\n");

1222 
	`exô
();

1224 if(
	`u∆ök
("dirfile") != 0){

1225 
	`¥ötf
(1, "unlink dirfile failed!\n");

1226 
	`exô
();

1229 
fd
 = 
	`›í
(".", 
O_RDWR
);

1230 if(
fd
 >= 0){

1231 
	`¥ötf
(1, "open . for writing succeeded!\n");

1232 
	`exô
();

1234 
fd
 = 
	`›í
(".", 0);

1235 if(
	`wrôe
(
fd
, "x", 1) > 0){

1236 
	`¥ötf
(1, "write . succeeded!\n");

1237 
	`exô
();

1239 
	`˛o£
(
fd
);

1241 
	`¥ötf
(1, "dir vs file OK\n");

1242 
	}
}

1246 
	$úef
()

1248 
i
, 
fd
;

1250 
	`¥ötf
(1, "empty fileÇame\n");

1253 
i
 = 0; i < 50 + 1; i++){

1254 if(
	`mkdú
("irefd") != 0){

1255 
	`¥ötf
(1, "mkdir irefd failed\n");

1256 
	`exô
();

1258 if(
	`chdú
("irefd") != 0){

1259 
	`¥ötf
(1, "chdir irefd failed\n");

1260 
	`exô
();

1263 
	`mkdú
("");

1264 
	`lök
("README", "");

1265 
fd
 = 
	`›í
("", 
O_CREATE
);

1266 if(
fd
 >= 0)

1267 
	`˛o£
(
fd
);

1268 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1269 if(
fd
 >= 0)

1270 
	`˛o£
(
fd
);

1271 
	`u∆ök
("xx");

1274 
	`chdú
("/");

1275 
	`¥ötf
(1, "empty fileÇame OK\n");

1276 
	}
}

1282 
	$f‹kã°
()

1284 
n
, 
pid
;

1286 
	`¥ötf
(1, "forkÅest\n");

1288 
n
=0;Ç<1000;Ç++){

1289 
pid
 = 
	`f‹k
();

1290 if(
pid
 < 0)

1292 if(
pid
 == 0)

1293 
	`exô
();

1296 if(
n
 == 1000){

1297 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

1298 
	`exô
();

1301 ; 
n
 > 0;Ç--){

1302 if(
	`waô
() < 0){

1303 
	`¥ötf
(1, "wait stoppedÉarly\n");

1304 
	`exô
();

1308 if(
	`waô
() != -1){

1309 
	`¥ötf
(1, "wait gotÅoo many\n");

1310 
	`exô
();

1313 
	`¥ötf
(1, "forkÅest OK\n");

1314 
	}
}

1317 
	$sbrkã°
()

1319 
fds
[2], 
pid
, 
pids
[10], 
µid
;

1320 *
a
, *
b
, *
c
, *
œ°addr
, *
ﬁdbrk
, *
p
, 
s¸©ch
;

1321 
uöt
 
amt
;

1323 
	`¥ötf
(
°dout
, "sbrkÅest\n");

1324 
ﬁdbrk
 = 
	`sbrk
(0);

1327 
a
 = 
	`sbrk
(0);

1328 
i
;

1329 
i
 = 0; i < 5000; i++){

1330 
b
 = 
	`sbrk
(1);

1331 if(
b
 !
a
){

1332 
	`¥ötf
(
°dout
, "sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1333 
	`exô
();

1335 *
b
 = 1;

1336 
a
 = 
b
 + 1;

1338 
pid
 = 
	`f‹k
();

1339 if(
pid
 < 0){

1340 
	`¥ötf
(
°dout
, "sbrkÅest fork failed\n");

1341 
	`exô
();

1343 
c
 = 
	`sbrk
(1);

1344 
c
 = 
	`sbrk
(1);

1345 if(
c
 !
a
 + 1){

1346 
	`¥ötf
(
°dout
, "sbrkÅest failedÖost-fork\n");

1347 
	`exô
();

1349 if(
pid
 == 0)

1350 
	`exô
();

1351 
	`waô
();

1354 
	#BIG
 (100*1024*1024)

	)

1355 
a
 = 
	`sbrk
(0);

1356 
amt
 = (
BIG
Ë- (
uöt
)
a
;

1357 
p
 = 
	`sbrk
(
amt
);

1358 i‡(
p
 !
a
) {

1359 
	`¥ötf
(
°dout
, "sbrkÅest failedÅo grow bigáddress space;ÉnoughÖhys mem?\n");

1360 
	`exô
();

1362 
œ°addr
 = (*Ë(
BIG
-1);

1363 *
œ°addr
 = 99;

1366 
a
 = 
	`sbrk
(0);

1367 
c
 = 
	`sbrk
(-4096);

1368 if(
c
 == (*)0xffffffff){

1369 
	`¥ötf
(
°dout
, "sbrk couldÇot deallocate\n");

1370 
	`exô
();

1372 
c
 = 
	`sbrk
(0);

1373 if(
c
 !
a
 - 4096){

1374 
	`¥ötf
(
°dout
, "sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
, 
c
);

1375 
	`exô
();

1379 
a
 = 
	`sbrk
(0);

1380 
c
 = 
	`sbrk
(4096);

1381 if(
c
 !
a
 || 
	`sbrk
(0) !=á + 4096){

1382 
	`¥ötf
(
°dout
, "sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1383 
	`exô
();

1385 if(*
œ°addr
 == 99){

1387 
	`¥ötf
(
°dout
, "sbrk de-allocation didn'tÑeally deallocate\n");

1388 
	`exô
();

1391 
a
 = 
	`sbrk
(0);

1392 
c
 = 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1393 if(
c
 !
a
){

1394 
	`¥ötf
(
°dout
, "sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1395 
	`exô
();

1399 
a
 = (*)(
KERNBASE
);á < (*) (KERNBASE+2000000);á += 50000){

1400 
µid
 = 
	`gëpid
();

1401 
pid
 = 
	`f‹k
();

1402 if(
pid
 < 0){

1403 
	`¥ötf
(
°dout
, "fork failed\n");

1404 
	`exô
();

1406 if(
pid
 == 0){

1407 
	`¥ötf
(
°dout
, "o›†couldÑód %x = %x\n", 
a
, *a);

1408 
	`kûl
(
µid
);

1409 
	`exô
();

1411 
	`waô
();

1416 if(
	`pùe
(
fds
) != 0){

1417 
	`¥ötf
(1, "pipe() failed\n");

1418 
	`exô
();

1420 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1421 if((
pids
[
i
] = 
	`f‹k
()) == 0){

1423 
	`sbrk
(
BIG
 - (
uöt
)sbrk(0));

1424 
	`wrôe
(
fds
[1], "x", 1);

1426 ;;Ë
	`¶ìp
(1000);

1428 if(
pids
[
i
] != -1)

1429 
	`ªad
(
fds
[0], &
s¸©ch
, 1);

1433 
c
 = 
	`sbrk
(4096);

1434 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1435 if(
pids
[
i
] == -1)

1437 
	`kûl
(
pids
[
i
]);

1438 
	`waô
();

1440 if(
c
 == (*)0xffffffff){

1441 
	`¥ötf
(
°dout
, "failed sbrkÜeaked memory\n");

1442 
	`exô
();

1445 if(
	`sbrk
(0Ë> 
ﬁdbrk
)

1446 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1448 
	`¥ötf
(
°dout
, "sbrkÅest OK\n");

1449 
	}
}

1452 
	$vÆid©eöt
(*
p
)

1454 
ªs
;

1455 
	`asm
("mov %%esp, %%ebx\n\t"

1459 "˜" (
ªs
) :

1460 "a" (
SYS_¶ìp
), "n" (
T_SYSCALL
), "c" (
p
) :

1462 
	}
}

1465 
	$vÆid©ëe°
()

1467 
hi
, 
pid
;

1468 
uöt
 
p
;

1470 
	`¥ötf
(
°dout
, "validateÅest\n");

1471 
hi
 = 1100*1024;

1473 
p
 = 0;Ö <(
uöt
)
hi
;Ö += 4096){

1474 if((
pid
 = 
	`f‹k
()) == 0){

1476 
	`vÆid©eöt
((*)
p
);

1477 
	`exô
();

1479 
	`¶ìp
(0);

1480 
	`¶ìp
(0);

1481 
	`kûl
(
pid
);

1482 
	`waô
();

1485 if(
	`lök
("nosuchfûe", (*)
p
) != -1){

1486 
	`¥ötf
(
°dout
, "link shouldÇot succeed\n");

1487 
	`exô
();

1491 
	`¥ötf
(
°dout
, "validate ok\n");

1492 
	}
}

1495 
	gunöô
[10000];

1497 
	$bs°e°
()

1499 
i
;

1501 
	`¥ötf
(
°dout
, "bssÅest\n");

1502 
i
 = 0; i < (
unöô
); i++){

1503 if(
unöô
[
i
] != '\0'){

1504 
	`¥ötf
(
°dout
, "bssÅest failed\n");

1505 
	`exô
();

1508 
	`¥ötf
(
°dout
, "bssÅest ok\n");

1509 
	}
}

1515 
	$big¨gã°
()

1517 
pid
, 
fd
;

1519 
	`u∆ök
("bigarg-ok");

1520 
pid
 = 
	`f‹k
();

1521 if(
pid
 == 0){

1522 *
¨gs
[
MAXARG
];

1523 
i
;

1524 
i
 = 0; i < 
MAXARG
-1; i++)

1525 
¨gs
[
i
] = "bigargsÅest: failed\n ";

1526 
¨gs
[
MAXARG
-1] = 0;

1527 
	`¥ötf
(
°dout
, "bigargÅest\n");

1528 
	`exec
("echo", 
¨gs
);

1529 
	`¥ötf
(
°dout
, "bigargÅest ok\n");

1530 
fd
 = 
	`›í
("big¨g-ok", 
O_CREATE
);

1531 
	`˛o£
(
fd
);

1532 
	`exô
();

1533 } if(
pid
 < 0){

1534 
	`¥ötf
(
°dout
, "bigargtest: fork failed\n");

1535 
	`exô
();

1537 
	`waô
();

1538 
fd
 = 
	`›í
("bigarg-ok", 0);

1539 if(
fd
 < 0){

1540 
	`¥ötf
(
°dout
, "bigargÅest failed!\n");

1541 
	`exô
();

1543 
	`˛o£
(
fd
);

1544 
	`u∆ök
("bigarg-ok");

1545 
	}
}

1550 
	$fsfuŒ
()

1552 
nfûes
;

1553 
fsblocks
 = 0;

1555 
	`¥ötf
(1, "fsfullÅest\n");

1557 
nfûes
 = 0; ;Çfiles++){

1558 
«me
[64];

1559 
«me
[0] = 'f';

1560 
«me
[1] = '0' + 
nfûes
 / 1000;

1561 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1562 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1563 
«me
[4] = '0' + (
nfûes
 % 10);

1564 
«me
[5] = '\0';

1565 
	`¥ötf
(1, "wrôög %s\n", 
«me
);

1566 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

1567 if(
fd
 < 0){

1568 
	`¥ötf
(1, "›í %†Áûed\n", 
«me
);

1571 
tŸÆ
 = 0;

1573 
cc
 = 
	`wrôe
(
fd
, 
buf
, 512);

1574 if(
cc
 < 512)

1576 
tŸÆ
 +
cc
;

1577 
fsblocks
++;

1579 
	`¥ötf
(1, "wrŸê%d byãs\n", 
tŸÆ
);

1580 
	`˛o£
(
fd
);

1581 if(
tŸÆ
 == 0)

1585 
nfûes
 >= 0){

1586 
«me
[64];

1587 
«me
[0] = 'f';

1588 
«me
[1] = '0' + 
nfûes
 / 1000;

1589 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1590 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1591 
«me
[4] = '0' + (
nfûes
 % 10);

1592 
«me
[5] = '\0';

1593 
	`u∆ök
(
«me
);

1594 
nfûes
--;

1597 
	`¥ötf
(1, "fsfullÅest finished\n");

1598 
	}
}

1600 
	gønd°©e
 = 1;

1602 
	$ønd
()

1604 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1605  
ønd°©e
;

1606 
	}
}

1609 
	$maö
(
¨gc
, *
¨gv
[])

1611 
	`¥ötf
(1, "usertests starting\n");

1613 if(
	`›í
("usertests.ran", 0) >= 0){

1614 
	`¥ötf
(1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1615 
	`exô
();

1617 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

1619 
	`big¨gã°
();

1620 
	`bigwrôe
();

1621 
	`big¨gã°
();

1622 
	`bs°e°
();

1623 
	`sbrkã°
();

1624 
	`vÆid©ëe°
();

1626 
	`›íã°
();

1627 
	`wrôëe°
();

1628 
	`wrôëe°1
();

1629 
	`¸óãã°
();

1631 
	`mem
();

1632 
	`pùe1
();

1633 
	`¥ìm±
();

1634 
	`exôwaô
();

1636 
	`rmdŸ
();

1637 
	`fouπìn
();

1638 
	`bigfûe
();

1639 
	`subdú
();

1640 
	`c⁄¸óã
();

1641 
	`löku∆ök
();

1642 
	`lökã°
();

1643 
	`u∆ökªad
();

1644 
	`¸óãdñëe
();

1645 
	`twofûes
();

1646 
	`sh¨edfd
();

1647 
	`dúfûe
();

1648 
	`úef
();

1649 
	`f‹kã°
();

1650 
	`bigdú
();

1652 
	`exe˘e°
();

1654 
	`exô
();

1655 
	}
}

	@vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"defs.h
"

4 
	~"x86.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"ñf.h
"

10 
d©a
[];

11 
pde_t
 *
	gkpgdú
;

12 
£gdesc
 
	ggdt
[
NSEGS
];

17 
	$£göô
()

19 
˝u
 *
c
;

25 
c
 = &
˝us
[
	`˝unum
()];

26 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 0);

27 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 0);

28 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 
DPL_USER
);

29 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 
DPL_USER
);

32 
c
->
gdt
[
SEG_KCPU
] = 
	`SEG
(
STA_W
, &c->
˝u
, 8, 0);

34 
	`lgdt
(
c
->
gdt
, (c->gdt));

35 
	`lﬂdgs
(
SEG_KCPU
 << 3);

38 
˝u
 = 
c
;

39 
¥oc
 = 0;

40 
	}
}

45 
±e_t
 *

46 
	$wÆkpgdú
(
pde_t
 *
pgdú
, c⁄° *
va
, 
Æloc
)

48 
pde_t
 *
pde
;

49 
±e_t
 *
pgèb
;

51 
pde
 = &
pgdú
[
	`PDX
(
va
)];

52 if(*
pde
 & 
PTE_P
){

53 
pgèb
 = (
±e_t
*)
	`p2v
(
	`PTE_ADDR
(*
pde
));

55 if(!
Æloc
 || (
pgèb
 = (
±e_t
*)
	`kÆloc
()) == 0)

58 
	`mem£t
(
pgèb
, 0, 
PGSIZE
);

62 *
pde
 = 
	`v2p
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

64  &
pgèb
[
	`PTX
(
va
)];

65 
	}
}

71 
	$m≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
)

73 *
a
, *
œ°
;

74 
±e_t
 *
±e
;

76 
a
 = (*)
	`PGROUNDDOWN
((
uöt
)
va
);

77 
œ°
 = (*)
	`PGROUNDDOWN
(((
uöt
)
va
Ë+ 
size
 - 1);

79 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
a
, 1)) == 0)

81 if(*
±e
 & 
PTE_P
)

82 
	`∑nic
("remap");

83 *
±e
 = 
∑
 | 
≥rm
 | 
PTE_P
;

84 if(
a
 =
œ°
)

86 
a
 +
PGSIZE
;

87 
∑
 +
PGSIZE
;

90 
	}
}

93 
	$unm≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
)

95 *
a
, *
œ°
;

96 
±e_t
 *
±e
;

98 
a
 = (*)
	`PGROUNDDOWN
((
uöt
)
va
);

99 
œ°
 = (*)
	`PGROUNDDOWN
(((
uöt
)
va
Ë+ 
size
 - 1);

101 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
a
, 1)) == 0)

103 *
±e
 = 
∑
;

104 if(
a
 =
œ°
)

106 
a
 +
PGSIZE
;

107 
∑
 +
PGSIZE
;

110 
	}
}

135 
	skm≠
 {

136 *
	mvút
;

137 
uöt
 
	mphys_°¨t
;

138 
uöt
 
	mphys_íd
;

139 
	m≥rm
;

140 } 
	gkm≠
[] = {

141 { (*)
KERNBASE
, 0, 
EXTMEM
, 
PTE_W
},

142 { (*)
KERNLINK
, 
V2P
(KERNLINK), V2P(
d©a
), 0},

143 { (*)
d©a
, 
V2P
(d©a), 
PHYSTOP
, 
PTE_W
},

144 { (*)
DEVSPACE
, DEVSPACE, 0, 
PTE_W
},

148 
pde_t
*

149 
	$£tupkvm
()

151 
pde_t
 *
pgdú
;

152 
km≠
 *
k
;

154 if((
pgdú
 = (
pde_t
*)
	`kÆloc
()) == 0)

156 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

157 i‡(
	`p2v
(
PHYSTOP
Ë> (*)
DEVSPACE
)

158 
	`∑nic
("PHYSTOPÅoo high");

159 
k
 = 
km≠
; k < &km≠[
	`NELEM
(kmap)]; k++)

160 if(
	`m≠∑ges
(
pgdú
, 
k
->
vút
, k->
phys_íd
 - k->
phys_°¨t
,

161 (
uöt
)
k
->
phys_°¨t
, k->
≥rm
) < 0)

163  
pgdú
;

164 
	}
}

169 
	$kvmÆloc
()

171 
kpgdú
 = 
	`£tupkvm
();

172 
	`swôchkvm
();

173 
	}
}

178 
	$swôchkvm
()

180 
	`l¸3
(
	`v2p
(
kpgdú
));

181 
	}
}

185 
	$swôchuvm
(
¥oc
 *
p
)

187 
	`push˛i
();

188 
˝u
->
gdt
[
SEG_TSS
] = 
	`SEG16
(
STS_T32A
, &˝u->
ts
, (cpu->ts)-1, 0);

189 
˝u
->
gdt
[
SEG_TSS
].
s
 = 0;

190 
˝u
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

191 
˝u
->
ts
.
e•0
 = (
uöt
)
¥oc
->
k°ack
 + 
KSTACKSIZE
;

192 
	`…r
(
SEG_TSS
 << 3);

193 if(
p
->
pgdú
 == 0)

194 
	`∑nic
("switchuvm:ÇoÖgdir");

195 
	`l¸3
(
	`v2p
(
p
->
pgdú
));

196 
	`p›˛i
();

197 
	}
}

202 
	$öôuvm
(
pde_t
 *
pgdú
, *
öô
, 
uöt
 
sz
)

204 *
mem
;

206 if(
sz
 >
PGSIZE
)

207 
	`∑nic
("inituvm: moreÅhanáÖage");

208 
mem
 = 
	`kÆloc
();

209 
	`mem£t
(
mem
, 0, 
PGSIZE
);

210 
	`m≠∑ges
(
pgdú
, 0, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

211 
	`memmove
(
mem
, 
öô
, 
sz
);

212 
	}
}

217 
	$lﬂduvm
(
pde_t
 *
pgdú
, *
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

219 
uöt
 
i
, 
∑
, 
n
;

220 
±e_t
 *
±e
;

222 if((
uöt
Ë
addr
 % 
PGSIZE
 != 0)

223 
	`∑nic
("loaduvm:áddr must beÖageáligned");

224 
i
 = 0; i < 
sz
; i +
PGSIZE
){

225 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
addr
+
i
, 0)) == 0)

226 
	`∑nic
("loaduvm:áddress shouldÉxist");

227 
∑
 = 
	`PTE_ADDR
(*
±e
);

228 if(
sz
 - 
i
 < 
PGSIZE
)

229 
n
 = 
sz
 - 
i
;

231 
n
 = 
PGSIZE
;

232 if(
	`ªadi
(
ù
, 
	`p2v
(
∑
), 
off£t
+
i
, 
n
) !=Ç)

236 
	}
}

241 
	$Ælocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

243 *
mem
;

244 
uöt
 
a
;

246 if(
√wsz
 >
KERNBASE
)

248 if(
√wsz
 < 
ﬁdsz
)

249  
ﬁdsz
;

251 
a
 = 
	`PGROUNDUP
(
ﬁdsz
);

252 ; 
a
 < 
√wsz
;á +
PGSIZE
){

253 
mem
 = 
	`kÆloc
();

254 if(
mem
 == 0){

255 
	`˝rötf
("allocuvm out of memory\n");

256 
	`dóŒocuvm
(
pgdú
, 
√wsz
, 
ﬁdsz
);

259 
	`mem£t
(
mem
, 0, 
PGSIZE
);

260 
	`m≠∑ges
(
pgdú
, (*)
a
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

262  
√wsz
;

263 
	}
}

270 
	$dóŒocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

272 
±e_t
 *
±e
;

273 
uöt
 
a
, 
∑
;

275 if(
√wsz
 >
ﬁdsz
)

276  
ﬁdsz
;

278 
a
 = 
	`PGROUNDUP
(
√wsz
);

279 ; 
a
 < 
ﬁdsz
;á +
PGSIZE
){

280 
±e
 = 
	`wÆkpgdú
(
pgdú
, (*)
a
, 0);

281 if(!
±e
)

282 
a
 +(
NPTENTRIES
 - 1Ë* 
PGSIZE
;

283 if((*
±e
 & 
PTE_P
) != 0){

284 
∑
 = 
	`PTE_ADDR
(*
±e
);

285 if(
∑
 == 0)

286 
	`∑nic
("kfree");

287 *
v
 = 
	`p2v
(
∑
);

288 
	`k‰ì
(
v
);

289 *
±e
 = 0;

292  
√wsz
;

293 
	}
}

298 
	$‰ìvm
(
pde_t
 *
pgdú
)

300 
uöt
 
i
;

302 if(
pgdú
 == 0)

303 
	`∑nic
("freevm:ÇoÖgdir");

304 
	`dóŒocuvm
(
pgdú
, 
KERNBASE
, 0);

305 
i
 = 0; i < 
NPDENTRIES
; i++){

306 if(
pgdú
[
i
] & 
PTE_P
){

307 * 
v
 = 
	`p2v
(
	`PTE_ADDR
(
pgdú
[
i
]));

308 
	`k‰ì
(
v
);

311 
	`k‰ì
((*)
pgdú
);

312 
	}
}

317 
	$˛óΩãu
(
pde_t
 *
pgdú
, *
uva
)

319 
±e_t
 *
±e
;

321 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

322 if(
±e
 == 0)

323 
	`∑nic
("clearpteu");

324 *
±e
 &~
PTE_U
;

325 
	}
}

329 
pde_t
*

330 
	$c›yuvm
(
pde_t
 *
pgdú
, 
uöt
 
sz
)

332 
pde_t
 *
d
;

333 
±e_t
 *
±e
;

334 
uöt
 
∑
, 
i
;

335 *
mem
;

337 if((
d
 = 
	`£tupkvm
()) == 0)

339 
i
 = 0; i < 
sz
; i +
PGSIZE
){

340 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, (*Ë
i
, 0)) == 0)

341 
	`∑nic
("copyuvm:Öte shouldÉxist");

342 if(!(*
±e
 & 
PTE_P
))

343 
	`∑nic
("copyuvm:ÖageÇotÖresent");

344 
∑
 = 
	`PTE_ADDR
(*
±e
);

345 if((
mem
 = 
	`kÆloc
()) == 0)

346 
bad
;

347 
	`memmove
(
mem
, (*)
	`p2v
(
∑
), 
PGSIZE
);

348 if(
	`m≠∑ges
(
d
, (*)
i
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
) < 0)

349 
bad
;

351  
d
;

353 
bad
:

354 
	`‰ìvm
(
d
);

356 
	}
}

361 
	$uva2ka
(
pde_t
 *
pgdú
, *
uva
)

363 
±e_t
 *
±e
;

365 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

366 if((*
±e
 & 
PTE_P
) == 0)

368 if((*
±e
 & 
PTE_U
) == 0)

370  (*)
	`p2v
(
	`PTE_ADDR
(*
±e
));

371 
	}
}

377 
	$c›yout
(
pde_t
 *
pgdú
, 
uöt
 
va
, *
p
, uöà
Àn
)

379 *
buf
, *
∑0
;

380 
uöt
 
n
, 
va0
;

382 
buf
 = (*)
p
;

383 
Àn
 > 0){

384 
va0
 = (
uöt
)
	`PGROUNDDOWN
(
va
);

385 
∑0
 = 
	`uva2ka
(
pgdú
, (*)
va0
);

386 if(
∑0
 == 0)

388 
n
 = 
PGSIZE
 - (
va
 - 
va0
);

389 if(
n
 > 
Àn
)

390 
n
 = 
Àn
;

391 
	`memmove
(
∑0
 + (
va
 - 
va0
), 
buf
, 
n
);

392 
Àn
 -
n
;

393 
buf
 +
n
;

394 
va
 = 
va0
 + 
PGSIZE
;

397 
	}
}

	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
(1, "wc:ÑeadÉrror\n");

30 
	`exô
();

32 
	`¥ötf
(1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
();

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
(1, "wc: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
();

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
();

54 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
(
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

15 
asm
 volatile("cld;Ñep insl" :

16 "=D" (
addr
), "=c" (
˙t
) :

17 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

19 
	}
}

21 
ölöe
 

22 
	$outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

25 
	}
}

27 
ölöe
 

28 
	$outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

31 
	}
}

33 
ölöe
 

34 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 
asm
 volatile("cld;Ñep outsl" :

37 "=S" (
addr
), "=c" (
˙t
) :

38 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

40 
	}
}

42 
ölöe
 

43 
	$°osb
(*
addr
, 
d©a
, 
˙t
)

45 
asm
 volatile("cld;Ñep stosb" :

46 "=D" (
addr
), "=c" (
˙t
) :

47 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

49 
	}
}

51 
ölöe
 

52 
	$°o¶
(*
addr
, 
d©a
, 
˙t
)

54 
asm
 volatile("cld;Ñep stosl" :

55 "=D" (
addr
), "=c" (
˙t
) :

56 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

58 
	}
}

60 
	g£gdesc
;

62 
ölöe
 

63 
	$lgdt
(
£gdesc
 *
p
, 
size
)

65 vﬁ©ûê
ush‹t
 
pd
[3];

67 
pd
[0] = 
size
-1;

68 
pd
[1] = (
uöt
)
p
;

69 
pd
[2] = (
uöt
)
p
 >> 16;

71 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

72 
	}
}

74 
	gg©edesc
;

76 
ölöe
 

77 
	$lidt
(
g©edesc
 *
p
, 
size
)

79 vﬁ©ûê
ush‹t
 
pd
[3];

81 
pd
[0] = 
size
-1;

82 
pd
[1] = (
uöt
)
p
;

83 
pd
[2] = (
uöt
)
p
 >> 16;

85 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

86 
	}
}

88 
ölöe
 

89 
	$…r
(
ush‹t
 
£l
)

91 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

92 
	}
}

94 
ölöe
 
uöt


95 
	$ªadeÊags
()

97 
uöt
 
eÊags
;

98 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

99  
eÊags
;

100 
	}
}

102 
ölöe
 

103 
	$lﬂdgs
(
ush‹t
 
v
)

105 
asm
 vﬁ©ûe("movw %0, %%gs" : : "r" (
v
));

106 
	}
}

108 
ölöe
 

109 
	$˛i
()

111 
asm
 volatile("cli");

112 
	}
}

114 
ölöe
 

115 
	$°i
()

117 
asm
 volatile("sti");

118 
	}
}

120 
ölöe
 
uöt


121 
	$xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

123 
uöt
 
ªsu…
;

126 
asm
 volatile("lock; xchgl %0, %1" :

127 "+m" (*
addr
), "˜" (
ªsu…
) :

128 "1" (
√wvÆ
) :

130  
ªsu…
;

131 
	}
}

133 
ölöe
 
uöt


134 
	$r¸2
()

136 
uöt
 
vÆ
;

137 
asm
 vﬁ©ûe("mov»%%¸2,%0" : "Ù" (
vÆ
));

138  
vÆ
;

139 
	}
}

141 
ölöe
 

142 
	$l¸3
(
uöt
 
vÆ
)

144 
asm
 vﬁ©ûe("mov»%0,%%¸3" : : "r" (
vÆ
));

145 
	}
}

150 
	så≠‰ame
 {

152 
uöt
 
	medi
;

153 
uöt
 
	mesi
;

154 
uöt
 
	mebp
;

155 
uöt
 
	m€•
;

156 
uöt
 
	mebx
;

157 
uöt
 
	medx
;

158 
uöt
 
	mecx
;

159 
uöt
 
	móx
;

162 
ush‹t
 
	mgs
;

163 
ush‹t
 
	m∑ddög1
;

164 
ush‹t
 
	mfs
;

165 
ush‹t
 
	m∑ddög2
;

166 
ush‹t
 
	mes
;

167 
ush‹t
 
	m∑ddög3
;

168 
ush‹t
 
	mds
;

169 
ush‹t
 
	m∑ddög4
;

170 
uöt
 
	må≠no
;

173 
uöt
 
	mîr
;

174 
uöt
 
	meù
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
uöt
 
	meÊags
;

180 
uöt
 
	me•
;

181 
ush‹t
 
	mss
;

182 
ush‹t
 
	m∑ddög6
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
();

14 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
92
946
asm.h
bio.c
bootmain.c
buf.h
cat.c
console.c
defs.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
forktest.c
fs.c
fs.h
grep.c
ide.c
init.c
ioapic.c
kalloc.c
kalloc_bitmap.c
kbd.c
kbd.h
kill.c
ksm.c
ksm.h
ksmreadme.c
ksmtest.c
lapic.c
ln.c
log.c
ls.c
main.c
memide.c
memlayout.h
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
picirq.c
pipe.c
printf.c
proc.c
proc.h
rm.c
sem.c
sem.h
semtest.c
semtest2.c
sh.c
spinlock.c
spinlock.h
stat.h
stressfs.c
string.c
syscall.c
syscall.h
sysfile.c
sysproc.c
systest.c
timer.c
trap.c
traps.h
types.h
uart.c
ulib.c
umalloc.c
user.h
usertests.c
vm.c
wc.c
x86.h
zombie.c
/usr/include/assert.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
